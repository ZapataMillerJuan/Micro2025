#ifndef INC_GY521_H_
#define INC_GY521_H_

#endif /* INC_GY521_H_ */

#include <stdint.h>

#define RAD_TO_DEG 57.295779513082320876798154814105

#define WHO_AM_I_REG 0x75
#define PWR_MGMT_1_REG 0x6B
#define SMPLRT_DIV_REG 0x19
#define ACCEL_CONFIG_REG 0x1C
#define ACCEL_XOUT_H_REG 0x3B
#define TEMP_OUT_H_REG 0x41
#define GYRO_CONFIG_REG 0x1B
#define GYRO_XOUT_H_REG 0x43
#define LOWPASS_CONFIG 0x1A

// Setup MPU6050
#define MPU6050_ADDR 0xD0

// MPU6050 structures
typedef struct {
    int16_t rawData[NUM_AXIS];                 // Lectura nueva cruda del sensor
    int32_t sumData[NUM_AXIS];                 // Suma acumulada para cada canal
    int16_t mediaBuffer[NUM_MAF][NUM_AXIS];    // Buffer circular para el historial
    int16_t filtredData[NUM_AXIS];             // Resultado filtrado
    uint8_t index;                             // √çndice del buffer circular
    uint8_t isOn;                              // Bandera para aplicar el filtro
} MAF_t;

typedef struct {
	int16_t X_RAW;
	int16_t Y_RAW;
	int16_t Z_RAW;
	int16_t X_filtered;
	int16_t Y_filtered;
	int16_t Z_filtered;
	int16_t X_Offset;
	int16_t Y_Offset;
	int16_t Z_Offset;
}s_Axis;
typedef struct{

	s_Axis Gyro;
	s_Axis Accel;

    int16_t temp;

    uint8_t Rec_Data[14];
    uint8_t DMAREADY;
    MAF_t MAF;


} MPU6050_t;


// Kalman structure
typedef struct {
    float Q_angle;
    float Q_bias;
    float R_measure;
    float angle;
    float bias;
    float P[2][2];
} Kalman_t;


uint8_t MPU6050_Init();

void MPU6050_NonBlocking_DMA(
		uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),
		uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size));

void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),
		uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout));
void MPU6050_Read_Accel(MPU6050_t *MpuData);

void MPU6050_Read_Gyro(MPU6050_t *MpuData);

void MPU6050_Read_Temp();

void MPU6050_Read_All(MPU6050_t *MpuData);

void MPU6050_DMAREADY();

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt);

