
testingADCv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ded4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e14c  0800e14c  00010108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e14c  0800e14c  0000f14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e154  0800e154  00010108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e154  0800e154  0000f154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e158  0800e158  0000f158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  0800e15c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e8  20000108  0800e264  00010108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  0800e264  00010af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a613  00000000  00000000  00010138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004104  00000000  00000000  0002a74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0002e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127d  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b85e  00000000  00000000  000312bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e804  00000000  00000000  0004cb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb5d  00000000  00000000  0006b31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ae7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e0  00000000  00000000  0010aec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001113a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e054 	.word	0x0800e054

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	0800e054 	.word	0x0800e054

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void Engines_task();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d10e      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcraws, 8);
 8000516:	2208      	movs	r2, #8
 8000518:	4911      	ldr	r1, [pc, #68]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800051a:	4812      	ldr	r0, [pc, #72]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800051c:	f002 fa58 	bl	80029d0 <HAL_ADC_Start_DMA>
		if(is10ms){
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x30>
			is10ms--;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000532:	701a      	strb	r2, [r3, #0]

		}
	}
	if(htim->Instance == TIM10){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d109      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x4e>
		SSD1306_DMAREADY(FALSE);
 800053e:	2000      	movs	r0, #0
 8000540:	f001 fd60 	bl	8002004 <SSD1306_DMAREADY>
		MPU6050_Read_All(&mpuValues);
 8000544:	480a      	ldr	r0, [pc, #40]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000546:	f001 fa41 	bl	80019cc <MPU6050_Read_All>
		mpuValues.DMAREADY=1;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40014800 	.word	0x40014800
 8000560:	200006a4 	.word	0x200006a4
 8000564:	20000124 	.word	0x20000124
 8000568:	20000000 	.word	0x20000000
 800056c:	40014400 	.word	0x40014400
 8000570:	200005d4 	.word	0x200005d4

08000574 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000580:	2b78      	cmp	r3, #120	@ 0x78
 8000582:	d102      	bne.n	800058a <HAL_I2C_MemTxCpltCallback+0x16>
		SSD1306_DMAREADY(TRUE);
 8000584:	2001      	movs	r0, #1
 8000586:	f001 fd3d 	bl	8002004 <SSD1306_DMAREADY>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a0:	2bd0      	cmp	r3, #208	@ 0xd0
 80005a2:	d158      	bne.n	8000656 <HAL_I2C_MemRxCpltCallback+0xc2>
		mpuValues.MAF.rawData[0] = (int16_t) (mpuValues.Rec_Data[0] << 8 | mpuValues.Rec_Data[1]);
 80005a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005b2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b21a      	sxth	r2, r3
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005be:	871a      	strh	r2, [r3, #56]	@ 0x38
		mpuValues.MAF.rawData[1] = (int16_t) (mpuValues.Rec_Data[2] << 8 | mpuValues.Rec_Data[3]);
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	021b      	lsls	r3, r3, #8
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005da:	875a      	strh	r2, [r3, #58]	@ 0x3a
		mpuValues.MAF.rawData[2] = (int16_t) (mpuValues.Rec_Data[4] << 8 | mpuValues.Rec_Data[5]);
 80005dc:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005ea:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b21a      	sxth	r2, r3
 80005f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
		mpuValues.MAF.rawData[3] = (int16_t) (mpuValues.Rec_Data[8] << 8 | mpuValues.Rec_Data[9]);
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80005fa:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80005fe:	b21b      	sxth	r3, r3
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000606:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21a      	sxth	r2, r3
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000612:	87da      	strh	r2, [r3, #62]	@ 0x3e
		mpuValues.MAF.rawData[4] = (int16_t) (mpuValues.Rec_Data[10]<< 8 | mpuValues.Rec_Data[11]);
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000616:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800061a:	b21b      	sxth	r3, r3
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	b21a      	sxth	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000622:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000626:	b21b      	sxth	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b21a      	sxth	r2, r3
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800062e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		mpuValues.MAF.rawData[5] = (int16_t) (mpuValues.Rec_Data[12]<< 8 | mpuValues.Rec_Data[13]);
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000634:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000638:	b21b      	sxth	r3, r3
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000640:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000644:	b21b      	sxth	r3, r3
 8000646:	4313      	orrs	r3, r2
 8000648:	b21a      	sxth	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800064c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		SSD1306_DMAREADY(TRUE);
 8000650:	2001      	movs	r0, #1
 8000652:	f001 fcd7 	bl	8002004 <SSD1306_DMAREADY>

	}
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200005d4 	.word	0x200005d4

08000664 <Engines_task>:
void Engines_task(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

	en_HandlerENG(&motorR, 55000, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	f24d 61d8 	movw	r1, #55000	@ 0xd6d8
 800066e:	484d      	ldr	r0, [pc, #308]	@ (80007a4 <Engines_task+0x140>)
 8000670:	f001 f8fa 	bl	8001868 <en_HandlerENG>
	en_HandlerENG(&motorL, 40000, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	f649 4140 	movw	r1, #40000	@ 0x9c40
 800067a:	484b      	ldr	r0, [pc, #300]	@ (80007a8 <Engines_task+0x144>)
 800067c:	f001 f8f4 	bl	8001868 <en_HandlerENG>
	switch(motorR.estado){
 8000680:	4b48      	ldr	r3, [pc, #288]	@ (80007a4 <Engines_task+0x140>)
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d83f      	bhi.n	8000708 <Engines_task+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <Engines_task+0x2c>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006bb 	.word	0x080006bb
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006a1 	.word	0x080006a1
			case BRAKE:
				HAL_GPIO_WritePin(MOTOR2_OUT_A_GPIO_Port, MOTOR2_OUT_A_Pin, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a6:	4841      	ldr	r0, [pc, #260]	@ (80007ac <Engines_task+0x148>)
 80006a8:	f003 fba0 	bl	8003dec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR2_OUT_B_GPIO_Port, MOTOR2_OUT_B_Pin, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b2:	483e      	ldr	r0, [pc, #248]	@ (80007ac <Engines_task+0x148>)
 80006b4:	f003 fb9a 	bl	8003dec <HAL_GPIO_WritePin>
				break;
 80006b8:	e027      	b.n	800070a <Engines_task+0xa6>

			case FRONT:
				HAL_GPIO_WritePin(MOTOR2_OUT_A_GPIO_Port, MOTOR2_OUT_A_Pin, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c0:	483a      	ldr	r0, [pc, #232]	@ (80007ac <Engines_task+0x148>)
 80006c2:	f003 fb93 	bl	8003dec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR2_OUT_B_GPIO_Port, MOTOR2_OUT_B_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006cc:	4837      	ldr	r0, [pc, #220]	@ (80007ac <Engines_task+0x148>)
 80006ce:	f003 fb8d 	bl	8003dec <HAL_GPIO_WritePin>
				break;
 80006d2:	e01a      	b.n	800070a <Engines_task+0xa6>

			case BACK:
				HAL_GPIO_WritePin(MOTOR2_OUT_A_GPIO_Port, MOTOR2_OUT_A_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006da:	4834      	ldr	r0, [pc, #208]	@ (80007ac <Engines_task+0x148>)
 80006dc:	f003 fb86 	bl	8003dec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR2_OUT_B_GPIO_Port, MOTOR2_OUT_B_Pin, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e6:	4831      	ldr	r0, [pc, #196]	@ (80007ac <Engines_task+0x148>)
 80006e8:	f003 fb80 	bl	8003dec <HAL_GPIO_WritePin>
				break;
 80006ec:	e00d      	b.n	800070a <Engines_task+0xa6>

			case FREE:
				HAL_GPIO_WritePin(MOTOR2_OUT_A_GPIO_Port, MOTOR2_OUT_A_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f4:	482d      	ldr	r0, [pc, #180]	@ (80007ac <Engines_task+0x148>)
 80006f6:	f003 fb79 	bl	8003dec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR2_OUT_B_GPIO_Port, MOTOR2_OUT_B_Pin, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000700:	482a      	ldr	r0, [pc, #168]	@ (80007ac <Engines_task+0x148>)
 8000702:	f003 fb73 	bl	8003dec <HAL_GPIO_WritePin>
				break;
 8000706:	e000      	b.n	800070a <Engines_task+0xa6>
			default:
				break;
 8000708:	bf00      	nop
			}
	switch(motorL.estado){
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <Engines_task+0x144>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d83a      	bhi.n	8000788 <Engines_task+0x124>
 8000712:	a201      	add	r2, pc, #4	@ (adr r2, 8000718 <Engines_task+0xb4>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000741 	.word	0x08000741
 800071c:	08000759 	.word	0x08000759
 8000720:	08000771 	.word	0x08000771
 8000724:	08000729 	.word	0x08000729
		case BRAKE:
			HAL_GPIO_WritePin(MOTOR_OUT_A_GPIO_Port, MOTOR_OUT_A_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2108      	movs	r1, #8
 800072c:	481f      	ldr	r0, [pc, #124]	@ (80007ac <Engines_task+0x148>)
 800072e:	f003 fb5d 	bl	8003dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_OUT_B_GPIO_Port, MOTOR_OUT_B_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000738:	481d      	ldr	r0, [pc, #116]	@ (80007b0 <Engines_task+0x14c>)
 800073a:	f003 fb57 	bl	8003dec <HAL_GPIO_WritePin>
			break;
 800073e:	e024      	b.n	800078a <Engines_task+0x126>

		case FRONT:
			HAL_GPIO_WritePin(MOTOR_OUT_A_GPIO_Port, MOTOR_OUT_A_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4819      	ldr	r0, [pc, #100]	@ (80007ac <Engines_task+0x148>)
 8000746:	f003 fb51 	bl	8003dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_OUT_B_GPIO_Port, MOTOR_OUT_B_Pin, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000750:	4817      	ldr	r0, [pc, #92]	@ (80007b0 <Engines_task+0x14c>)
 8000752:	f003 fb4b 	bl	8003dec <HAL_GPIO_WritePin>
			break;
 8000756:	e018      	b.n	800078a <Engines_task+0x126>

		case BACK:
			HAL_GPIO_WritePin(MOTOR_OUT_A_GPIO_Port, MOTOR_OUT_A_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4813      	ldr	r0, [pc, #76]	@ (80007ac <Engines_task+0x148>)
 800075e:	f003 fb45 	bl	8003dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_OUT_B_GPIO_Port, MOTOR_OUT_B_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000768:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <Engines_task+0x14c>)
 800076a:	f003 fb3f 	bl	8003dec <HAL_GPIO_WritePin>
			break;
 800076e:	e00c      	b.n	800078a <Engines_task+0x126>

		case FREE:
			HAL_GPIO_WritePin(MOTOR_OUT_A_GPIO_Port, MOTOR_OUT_A_Pin, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <Engines_task+0x148>)
 8000776:	f003 fb39 	bl	8003dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_OUT_B_GPIO_Port, MOTOR_OUT_B_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <Engines_task+0x14c>)
 8000782:	f003 fb33 	bl	8003dec <HAL_GPIO_WritePin>
			break;
 8000786:	e000      	b.n	800078a <Engines_task+0x126>
		default:
			break;
 8000788:	bf00      	nop
	}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <Engines_task+0x144>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <Engines_task+0x150>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <Engines_task+0x140>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <Engines_task+0x150>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200006cc 	.word	0x200006cc
 80007a8:	200006c4 	.word	0x200006c4
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40020000 	.word	0x40020000
 80007b4:	200002e0 	.word	0x200002e0

080007b8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	adcUSB[0] = adcraws[0];
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007c6:	801a      	strh	r2, [r3, #0]
	adcUSB[1] = adcraws[1];
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007ca:	885a      	ldrh	r2, [r3, #2]
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007ce:	805a      	strh	r2, [r3, #2]
	adcUSB[2] = adcraws[2];
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007d2:	889a      	ldrh	r2, [r3, #4]
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007d6:	809a      	strh	r2, [r3, #4]
	adcUSB[3] = adcraws[3];
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007da:	88da      	ldrh	r2, [r3, #6]
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007de:	80da      	strh	r2, [r3, #6]
	adcUSB[4] = adcraws[4];
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007e2:	891a      	ldrh	r2, [r3, #8]
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007e6:	811a      	strh	r2, [r3, #8]
	adcUSB[5] = adcraws[5];
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007ea:	895a      	ldrh	r2, [r3, #10]
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007ee:	815a      	strh	r2, [r3, #10]
	adcUSB[6] = adcraws[6];
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007f2:	899a      	ldrh	r2, [r3, #12]
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007f6:	819a      	strh	r2, [r3, #12]
	adcUSB[7] = adcraws[7];
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <HAL_ADC_ConvCpltCallback+0x54>)
 80007fa:	89da      	ldrh	r2, [r3, #14]
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <HAL_ADC_ConvCpltCallback+0x58>)
 80007fe:	81da      	strh	r2, [r3, #14]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	200006a4 	.word	0x200006a4
 8000810:	200006b4 	.word	0x200006b4

08000814 <USBRxData>:
void USBRxData(uint8_t *buf, uint32_t Len){
 8000814:	b490      	push	{r4, r7}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	for(nBytesTx = 0;nBytesTx<Len;nBytesTx++){
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <USBRxData+0x6c>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e020      	b.n	8000868 <USBRxData+0x54>
			dataRx.buff[dataRx.indexW++]= buf[nBytesTx];
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <USBRxData+0x6c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	441a      	add	r2, r3
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <USBRxData+0x70>)
 8000832:	6819      	ldr	r1, [r3, #0]
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <USBRxData+0x70>)
 8000836:	795b      	ldrb	r3, [r3, #5]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	1c58      	adds	r0, r3, #1
 800083c:	b2c4      	uxtb	r4, r0
 800083e:	4811      	ldr	r0, [pc, #68]	@ (8000884 <USBRxData+0x70>)
 8000840:	7144      	strb	r4, [r0, #5]
 8000842:	440b      	add	r3, r1
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	701a      	strb	r2, [r3, #0]
		    dataRx.indexW &= dataRx.mask;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <USBRxData+0x70>)
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <USBRxData+0x70>)
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <USBRxData+0x70>)
 800085a:	715a      	strb	r2, [r3, #5]
	for(nBytesTx = 0;nBytesTx<Len;nBytesTx++){
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <USBRxData+0x6c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <USBRxData+0x6c>)
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <USBRxData+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	4293      	cmp	r3, r2
 8000872:	d8d8      	bhi.n	8000826 <USBRxData+0x12>
		}
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bc90      	pop	{r4, r7}
 800087e:	4770      	bx	lr
 8000880:	200006a0 	.word	0x200006a0
 8000884:	200003b8 	.word	0x200003b8

08000888 <decodeHeader>:

void decodeHeader(_sRx *dataRx)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    uint8_t auxIndex=dataRx->indexW;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	795b      	ldrb	r3, [r3, #5]
 8000894:	73fb      	strb	r3, [r7, #15]
    while(dataRx->indexR != auxIndex){
 8000896:	e0ed      	b.n	8000a74 <decodeHeader+0x1ec>
        switch(dataRx->header)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7a9b      	ldrb	r3, [r3, #10]
 800089c:	2b06      	cmp	r3, #6
 800089e:	f200 80d2 	bhi.w	8000a46 <decodeHeader+0x1be>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <decodeHeader+0x20>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008c5 	.word	0x080008c5
 80008ac:	080008e5 	.word	0x080008e5
 80008b0:	08000923 	.word	0x08000923
 80008b4:	0800094f 	.word	0x0800094f
 80008b8:	0800097b 	.word	0x0800097b
 80008bc:	08000993 	.word	0x08000993
 80008c0:	080009f7 	.word	0x080009f7
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7912      	ldrb	r2, [r2, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b55      	cmp	r3, #85	@ 0x55
 80008d2:	f040 80bc 	bne.w	8000a4e <decodeHeader+0x1c6>
                    dataRx->header = HEADER_N;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	729a      	strb	r2, [r3, #10]
                    dataRx->timeOut = 5;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2205      	movs	r2, #5
 80008e0:	72da      	strb	r2, [r3, #11]
                }
            break;
 80008e2:	e0b4      	b.n	8000a4e <decodeHeader+0x1c6>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	7912      	ldrb	r2, [r2, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80008f2:	d103      	bne.n	80008fc <decodeHeader+0x74>
                    dataRx->header = HEADER_E;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2202      	movs	r2, #2
 80008f8:	729a      	strb	r2, [r3, #10]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                        dataRx->header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 80008fa:	e0aa      	b.n	8000a52 <decodeHeader+0x1ca>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7912      	ldrb	r2, [r2, #4]
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b55      	cmp	r3, #85	@ 0x55
 800090a:	f000 80a2 	beq.w	8000a52 <decodeHeader+0x1ca>
                        dataRx->header = HEADER_U;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	729a      	strb	r2, [r3, #10]
                        dataRx->indexR--;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	3b01      	subs	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	711a      	strb	r2, [r3, #4]
            break;
 8000920:	e097      	b.n	8000a52 <decodeHeader+0x1ca>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b45      	cmp	r3, #69	@ 0x45
 8000930:	d103      	bne.n	800093a <decodeHeader+0xb2>
                    dataRx->header = HEADER_R;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2203      	movs	r2, #3
 8000936:	729a      	strb	r2, [r3, #10]
                }else{
                    dataRx->header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000938:	e08e      	b.n	8000a58 <decodeHeader+0x1d0>
                    dataRx->header = HEADER_U;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	729a      	strb	r2, [r3, #10]
                    dataRx->indexR--;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	711a      	strb	r2, [r3, #4]
            break;
 800094c:	e084      	b.n	8000a58 <decodeHeader+0x1d0>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7912      	ldrb	r2, [r2, #4]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b52      	cmp	r3, #82	@ 0x52
 800095c:	d103      	bne.n	8000966 <decodeHeader+0xde>
                    dataRx->header = NBYTES;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2204      	movs	r2, #4
 8000962:	729a      	strb	r2, [r3, #10]
                }else{
                    dataRx->header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000964:	e078      	b.n	8000a58 <decodeHeader+0x1d0>
                    dataRx->header = HEADER_U;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	729a      	strb	r2, [r3, #10]
                    dataRx->indexR--;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	711a      	strb	r2, [r3, #4]
            break;
 8000978:	e06e      	b.n	8000a58 <decodeHeader+0x1d0>
            case NBYTES:
                dataRx->nBytes=dataRx->buff[dataRx->indexR];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	7912      	ldrb	r2, [r2, #4]
 8000982:	4413      	add	r3, r2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	725a      	strb	r2, [r3, #9]
                dataRx->header = TOKEN;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2205      	movs	r2, #5
 800098e:	729a      	strb	r2, [r3, #10]
            break;
 8000990:	e062      	b.n	8000a58 <decodeHeader+0x1d0>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	7912      	ldrb	r2, [r2, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b3a      	cmp	r3, #58	@ 0x3a
 80009a0:	d11f      	bne.n	80009e2 <decodeHeader+0x15a>
                    dataRx->header = PAYLOAD;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2206      	movs	r2, #6
 80009a6:	729a      	strb	r2, [r3, #10]
                    dataRx->indexData = dataRx->indexR+1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	719a      	strb	r2, [r3, #6]
                    dataRx->indexData &= dataRx->mask;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	799a      	ldrb	r2, [r3, #6]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	79db      	ldrb	r3, [r3, #7]
 80009bc:	4013      	ands	r3, r2
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	719a      	strb	r2, [r3, #6]
                    dataRx->chk = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	721a      	strb	r2, [r3, #8]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^dataRx->nBytes ^':') ;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7a1a      	ldrb	r2, [r3, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a5b      	ldrb	r3, [r3, #9]
 80009d2:	4053      	eors	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	721a      	strb	r2, [r3, #8]
                }else{
                    dataRx->header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80009e0:	e03a      	b.n	8000a58 <decodeHeader+0x1d0>
                    dataRx->header = HEADER_U;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	729a      	strb	r2, [r3, #10]
                    dataRx->indexR--;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	711a      	strb	r2, [r3, #4]
            break;
 80009f4:	e030      	b.n	8000a58 <decodeHeader+0x1d0>
            case PAYLOAD:
                dataRx->nBytes--;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a5b      	ldrb	r3, [r3, #9]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	725a      	strb	r2, [r3, #9]
                if(dataRx->nBytes>0){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7a5b      	ldrb	r3, [r3, #9]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00c      	beq.n	8000a24 <decodeHeader+0x19c>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7a1a      	ldrb	r2, [r3, #8]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	7909      	ldrb	r1, [r1, #4]
 8000a16:	440b      	add	r3, r1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	721a      	strb	r2, [r3, #8]
                }else{
                    dataRx->header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        dataRx->isComannd = TRUE;
                }
            break;
 8000a22:	e018      	b.n	8000a56 <decodeHeader+0x1ce>
                    dataRx->header = HEADER_U;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	729a      	strb	r2, [r3, #10]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	7912      	ldrb	r2, [r2, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7a1b      	ldrb	r3, [r3, #8]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d10b      	bne.n	8000a56 <decodeHeader+0x1ce>
                        dataRx->isComannd = TRUE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2201      	movs	r2, #1
 8000a42:	731a      	strb	r2, [r3, #12]
            break;
 8000a44:	e007      	b.n	8000a56 <decodeHeader+0x1ce>
            default:
                dataRx->header = HEADER_U;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	729a      	strb	r2, [r3, #10]
            break;
 8000a4c:	e004      	b.n	8000a58 <decodeHeader+0x1d0>
            break;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <decodeHeader+0x1d0>
            break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <decodeHeader+0x1d0>
            break;
 8000a56:	bf00      	nop
        }
        dataRx->indexR++;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791a      	ldrb	r2, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	79db      	ldrb	r3, [r3, #7]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	f47f af0c 	bne.w	8000898 <decodeHeader+0x10>
    }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <decodeCommand>:
void decodeCommand(_sRx *dataRx, _sTx *dataTx)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    //int32_t motorSpeed, auxSpeed;
   // int8_t angleSource;
    //uint32_t servoPrevio=miServo.currentValue;
    switch(dataRx->buff[dataRx->indexData]){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	7992      	ldrb	r2, [r2, #6]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2ba5      	cmp	r3, #165	@ 0xa5
 8000aa8:	d012      	beq.n	8000ad0 <decodeCommand+0x40>
 8000aaa:	2bf0      	cmp	r3, #240	@ 0xf0
 8000aac:	f040 811a 	bne.w	8000ce4 <decodeCommand+0x254>
        case ALIVE:
            putHeaderOnTx(dataTx, ALIVE, 2);
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	21f0      	movs	r1, #240	@ 0xf0
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f000 f935 	bl	8000d24 <putHeaderOnTx>
            putByteOnTx(dataTx, ACK );
 8000aba:	210d      	movs	r1, #13
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	f000 f9e1 	bl	8000e84 <putByteOnTx>
            putByteOnTx(dataTx, dataTx->chk);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	79db      	ldrb	r3, [r3, #7]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f000 f9db 	bl	8000e84 <putByteOnTx>
        break;
 8000ace:	e11f      	b.n	8000d10 <decodeCommand+0x280>
        case DATA:
        	myWord.ui16[0] = adcUSB[0];
 8000ad0:	4b91      	ldr	r3, [pc, #580]	@ (8000d18 <decodeCommand+0x288>)
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	4b91      	ldr	r3, [pc, #580]	@ (8000d1c <decodeCommand+0x28c>)
 8000ad6:	801a      	strh	r2, [r3, #0]
        	putHeaderOnTx(dataTx, DATA, 29);
 8000ad8:	221d      	movs	r2, #29
 8000ada:	21a5      	movs	r1, #165	@ 0xa5
 8000adc:	6838      	ldr	r0, [r7, #0]
 8000ade:	f000 f921 	bl	8000d24 <putHeaderOnTx>
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8000d1c <decodeCommand+0x28c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f000 f9cb 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000aee:	4b8b      	ldr	r3, [pc, #556]	@ (8000d1c <decodeCommand+0x28c>)
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	4619      	mov	r1, r3
 8000af4:	6838      	ldr	r0, [r7, #0]
 8000af6:	f000 f9c5 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[1];
 8000afa:	4b87      	ldr	r3, [pc, #540]	@ (8000d18 <decodeCommand+0x288>)
 8000afc:	885a      	ldrh	r2, [r3, #2]
 8000afe:	4b87      	ldr	r3, [pc, #540]	@ (8000d1c <decodeCommand+0x28c>)
 8000b00:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000b02:	4b86      	ldr	r3, [pc, #536]	@ (8000d1c <decodeCommand+0x28c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	6838      	ldr	r0, [r7, #0]
 8000b0a:	f000 f9bb 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000b0e:	4b83      	ldr	r3, [pc, #524]	@ (8000d1c <decodeCommand+0x28c>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f000 f9b5 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[2];
 8000b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d18 <decodeCommand+0x288>)
 8000b1c:	889a      	ldrh	r2, [r3, #4]
 8000b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d1c <decodeCommand+0x28c>)
 8000b20:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000b22:	4b7e      	ldr	r3, [pc, #504]	@ (8000d1c <decodeCommand+0x28c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f000 f9ab 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d1c <decodeCommand+0x28c>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6838      	ldr	r0, [r7, #0]
 8000b36:	f000 f9a5 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[3];
 8000b3a:	4b77      	ldr	r3, [pc, #476]	@ (8000d18 <decodeCommand+0x288>)
 8000b3c:	88da      	ldrh	r2, [r3, #6]
 8000b3e:	4b77      	ldr	r3, [pc, #476]	@ (8000d1c <decodeCommand+0x28c>)
 8000b40:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000b42:	4b76      	ldr	r3, [pc, #472]	@ (8000d1c <decodeCommand+0x28c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f000 f99b 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000b4e:	4b73      	ldr	r3, [pc, #460]	@ (8000d1c <decodeCommand+0x28c>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	4619      	mov	r1, r3
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f000 f995 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[4];
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000d18 <decodeCommand+0x288>)
 8000b5c:	891a      	ldrh	r2, [r3, #8]
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d1c <decodeCommand+0x28c>)
 8000b60:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000b62:	4b6e      	ldr	r3, [pc, #440]	@ (8000d1c <decodeCommand+0x28c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f000 f98b 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d1c <decodeCommand+0x28c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	4619      	mov	r1, r3
 8000b74:	6838      	ldr	r0, [r7, #0]
 8000b76:	f000 f985 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[5];
 8000b7a:	4b67      	ldr	r3, [pc, #412]	@ (8000d18 <decodeCommand+0x288>)
 8000b7c:	895a      	ldrh	r2, [r3, #10]
 8000b7e:	4b67      	ldr	r3, [pc, #412]	@ (8000d1c <decodeCommand+0x28c>)
 8000b80:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000b82:	4b66      	ldr	r3, [pc, #408]	@ (8000d1c <decodeCommand+0x28c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f000 f97b 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000b8e:	4b63      	ldr	r3, [pc, #396]	@ (8000d1c <decodeCommand+0x28c>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	4619      	mov	r1, r3
 8000b94:	6838      	ldr	r0, [r7, #0]
 8000b96:	f000 f975 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[6];
 8000b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d18 <decodeCommand+0x288>)
 8000b9c:	899a      	ldrh	r2, [r3, #12]
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d1c <decodeCommand+0x28c>)
 8000ba0:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d1c <decodeCommand+0x28c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6838      	ldr	r0, [r7, #0]
 8000baa:	f000 f96b 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000bae:	4b5b      	ldr	r3, [pc, #364]	@ (8000d1c <decodeCommand+0x28c>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f000 f965 	bl	8000e84 <putByteOnTx>
        	myWord.ui16[0] = adcUSB[7];
 8000bba:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <decodeCommand+0x288>)
 8000bbc:	89da      	ldrh	r2, [r3, #14]
 8000bbe:	4b57      	ldr	r3, [pc, #348]	@ (8000d1c <decodeCommand+0x28c>)
 8000bc0:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.ui8[0]);
 8000bc2:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <decodeCommand+0x28c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f000 f95b 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.ui8[1]);
 8000bce:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <decodeCommand+0x28c>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f000 f955 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[0];
 8000bda:	4b51      	ldr	r3, [pc, #324]	@ (8000d20 <decodeCommand+0x290>)
 8000bdc:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 8000be0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d1c <decodeCommand+0x28c>)
 8000be2:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000be4:	4b4d      	ldr	r3, [pc, #308]	@ (8000d1c <decodeCommand+0x28c>)
 8000be6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f000 f948 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000bf4:	4b49      	ldr	r3, [pc, #292]	@ (8000d1c <decodeCommand+0x28c>)
 8000bf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f000 f940 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[1];
 8000c04:	4b46      	ldr	r3, [pc, #280]	@ (8000d20 <decodeCommand+0x290>)
 8000c06:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 8000c0a:	4b44      	ldr	r3, [pc, #272]	@ (8000d1c <decodeCommand+0x28c>)
 8000c0c:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000c0e:	4b43      	ldr	r3, [pc, #268]	@ (8000d1c <decodeCommand+0x28c>)
 8000c10:	f993 3000 	ldrsb.w	r3, [r3]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	6838      	ldr	r0, [r7, #0]
 8000c1a:	f000 f933 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d1c <decodeCommand+0x28c>)
 8000c20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	6838      	ldr	r0, [r7, #0]
 8000c2a:	f000 f92b 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[2];
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d20 <decodeCommand+0x290>)
 8000c30:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <decodeCommand+0x28c>)
 8000c36:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000c38:	4b38      	ldr	r3, [pc, #224]	@ (8000d1c <decodeCommand+0x28c>)
 8000c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	6838      	ldr	r0, [r7, #0]
 8000c44:	f000 f91e 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000c48:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <decodeCommand+0x28c>)
 8000c4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4619      	mov	r1, r3
 8000c52:	6838      	ldr	r0, [r7, #0]
 8000c54:	f000 f916 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[3];
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <decodeCommand+0x290>)
 8000c5a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <decodeCommand+0x28c>)
 8000c60:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <decodeCommand+0x28c>)
 8000c64:	f993 3000 	ldrsb.w	r3, [r3]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6838      	ldr	r0, [r7, #0]
 8000c6e:	f000 f909 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <decodeCommand+0x28c>)
 8000c74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6838      	ldr	r0, [r7, #0]
 8000c7e:	f000 f901 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[4];
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <decodeCommand+0x290>)
 8000c84:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	@ 0x40
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <decodeCommand+0x28c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <decodeCommand+0x28c>)
 8000c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f000 f8f4 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <decodeCommand+0x28c>)
 8000c9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	6838      	ldr	r0, [r7, #0]
 8000ca8:	f000 f8ec 	bl	8000e84 <putByteOnTx>
        	myWord.i16[0] = mpuValues.MAF.rawData[5];
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <decodeCommand+0x290>)
 8000cae:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	@ 0x42
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <decodeCommand+0x28c>)
 8000cb4:	801a      	strh	r2, [r3, #0]
        	putByteOnTx(dataTx, myWord.i8[0]);
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <decodeCommand+0x28c>)
 8000cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6838      	ldr	r0, [r7, #0]
 8000cc2:	f000 f8df 	bl	8000e84 <putByteOnTx>
        	putByteOnTx(dataTx, myWord.i8[1]);
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <decodeCommand+0x28c>)
 8000cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6838      	ldr	r0, [r7, #0]
 8000cd2:	f000 f8d7 	bl	8000e84 <putByteOnTx>
        	//putHeaderOnTx(dataTx, ALIVE, 2);
        	//putByteOnTx(dataTx, ACK );
        	putByteOnTx(dataTx, dataTx->chk);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	79db      	ldrb	r3, [r3, #7]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	f000 f8d1 	bl	8000e84 <putByteOnTx>
        	break;
 8000ce2:	e015      	b.n	8000d10 <decodeCommand+0x280>
        default:
            putHeaderOnTx(dataTx, (_eCmd)dataRx->buff[dataRx->indexData], 2);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	7992      	ldrb	r2, [r2, #6]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f000 f815 	bl	8000d24 <putHeaderOnTx>
            putByteOnTx(dataTx,UNKNOWN );
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	6838      	ldr	r0, [r7, #0]
 8000cfe:	f000 f8c1 	bl	8000e84 <putByteOnTx>
            putByteOnTx(dataTx, dataTx->chk);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	79db      	ldrb	r3, [r3, #7]
 8000d06:	4619      	mov	r1, r3
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f000 f8bb 	bl	8000e84 <putByteOnTx>
        break;
 8000d0e:	bf00      	nop
    }
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200006b4 	.word	0x200006b4
 8000d1c:	200006d4 	.word	0x200006d4
 8000d20:	200005d4 	.word	0x200005d4

08000d24 <putHeaderOnTx>:
uint8_t putHeaderOnTx(_sTx  *dataTx, _eCmd ID, uint8_t frameLength)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]='U';
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	795b      	ldrb	r3, [r3, #5]
 8000d42:	1c59      	adds	r1, r3, #1
 8000d44:	b2c8      	uxtb	r0, r1
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	7148      	strb	r0, [r1, #5]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2255      	movs	r2, #85	@ 0x55
 8000d4e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	795a      	ldrb	r2, [r3, #5]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	795b      	ldrb	r3, [r3, #5]
 8000d68:	1c59      	adds	r1, r3, #1
 8000d6a:	b2c8      	uxtb	r0, r1
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	7148      	strb	r0, [r1, #5]
 8000d70:	4413      	add	r3, r2
 8000d72:	224e      	movs	r2, #78	@ 0x4e
 8000d74:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	795a      	ldrb	r2, [r3, #5]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	799b      	ldrb	r3, [r3, #6]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	795b      	ldrb	r3, [r3, #5]
 8000d8e:	1c59      	adds	r1, r3, #1
 8000d90:	b2c8      	uxtb	r0, r1
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	7148      	strb	r0, [r1, #5]
 8000d96:	4413      	add	r3, r2
 8000d98:	2245      	movs	r2, #69	@ 0x45
 8000d9a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	795a      	ldrb	r2, [r3, #5]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	799b      	ldrb	r3, [r3, #6]
 8000da4:	4013      	ands	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	795b      	ldrb	r3, [r3, #5]
 8000db4:	1c59      	adds	r1, r3, #1
 8000db6:	b2c8      	uxtb	r0, r1
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	7148      	strb	r0, [r1, #5]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2252      	movs	r2, #82	@ 0x52
 8000dc0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	795a      	ldrb	r2, [r3, #5]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	799b      	ldrb	r3, [r3, #6]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength+1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	795b      	ldrb	r3, [r3, #5]
 8000dda:	1c59      	adds	r1, r3, #1
 8000ddc:	b2c8      	uxtb	r0, r1
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	7148      	strb	r0, [r1, #5]
 8000de2:	4413      	add	r3, r2
 8000de4:	78ba      	ldrb	r2, [r7, #2]
 8000de6:	3201      	adds	r2, #1
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795a      	ldrb	r2, [r3, #5]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	799b      	ldrb	r3, [r3, #6]
 8000df4:	4013      	ands	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	795b      	ldrb	r3, [r3, #5]
 8000e04:	1c59      	adds	r1, r3, #1
 8000e06:	b2c8      	uxtb	r0, r1
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	7148      	strb	r0, [r1, #5]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	223a      	movs	r2, #58	@ 0x3a
 8000e10:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795a      	ldrb	r2, [r3, #5]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	1c59      	adds	r1, r3, #1
 8000e2c:	b2c8      	uxtb	r0, r1
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	7148      	strb	r0, [r1, #5]
 8000e32:	4413      	add	r3, r2
 8000e34:	78fa      	ldrb	r2, [r7, #3]
 8000e36:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	795a      	ldrb	r2, [r3, #5]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	799b      	ldrb	r3, [r3, #6]
 8000e40:	4013      	ands	r3, r2
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= (frameLength+1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	79db      	ldrb	r3, [r3, #7]
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	78bb      	ldrb	r3, [r7, #2]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	4053      	eors	r3, r2
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^ID ^':') ;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	79da      	ldrb	r2, [r3, #7]
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	4053      	eors	r3, r2
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	71da      	strb	r2, [r3, #7]
    return  dataTx->chk;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	79db      	ldrb	r3, [r3, #7]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <putByteOnTx>:
uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
    dataTx->buff[dataTx->indexW++]=byte;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	795b      	ldrb	r3, [r3, #5]
 8000e98:	1c59      	adds	r1, r3, #1
 8000e9a:	b2c8      	uxtb	r0, r1
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	7148      	strb	r0, [r1, #5]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	795a      	ldrb	r2, [r3, #5]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	79da      	ldrb	r2, [r3, #7]
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	4053      	eors	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	71da      	strb	r2, [r3, #7]
    return dataTx->chk;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	79db      	ldrb	r3, [r3, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SSD1306_Task>:
void SSD1306_Task(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8

	uint32_t guiaBarras;
	//if(SISINIT){
		SSD1306_Fill(WHITE);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 fed6 	bl	8001c8c <SSD1306_Fill>
		SSD1306_GotoXY(90, 50);
 8000ee0:	2132      	movs	r1, #50	@ 0x32
 8000ee2:	205a      	movs	r0, #90	@ 0x5a
 8000ee4:	f000 ff4a 	bl	8001d7c <SSD1306_GotoXY>
		for(uint8_t i = 0; i < 8; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	e03a      	b.n	8000f64 <SSD1306_Task+0x90>
			for(uint8_t j = 0; j < 45; j++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	e031      	b.n	8000f58 <SSD1306_Task+0x84>
				if(adcUSB[i] <= ADC_to_Index[j]){
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f74 <SSD1306_Task+0xa0>)
 8000ef8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	491e      	ldr	r1, [pc, #120]	@ (8000f78 <SSD1306_Task+0xa4>)
 8000f00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d824      	bhi.n	8000f52 <SSD1306_Task+0x7e>
					guiaBarras = 5 + i * 8;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	603b      	str	r3, [r7, #0]
					SSD1306_DrawLine(guiaBarras, 59,  guiaBarras, Index_to_Bar[j], BLACK);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b298      	uxth	r0, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	4918      	ldr	r1, [pc, #96]	@ (8000f7c <SSD1306_Task+0xa8>)
 8000f1c:	5ccb      	ldrb	r3, [r1, r3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2300      	movs	r3, #0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	460b      	mov	r3, r1
 8000f26:	213b      	movs	r1, #59	@ 0x3b
 8000f28:	f000 ff3e 	bl	8001da8 <SSD1306_DrawLine>
					SSD1306_DrawLine(guiaBarras+1, 59,  guiaBarras+1, Index_to_Bar[j], BLACK);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b298      	uxth	r0, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	490f      	ldr	r1, [pc, #60]	@ (8000f7c <SSD1306_Task+0xa8>)
 8000f40:	5ccb      	ldrb	r3, [r1, r3]
 8000f42:	4619      	mov	r1, r3
 8000f44:	2300      	movs	r3, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	213b      	movs	r1, #59	@ 0x3b
 8000f4c:	f000 ff2c 	bl	8001da8 <SSD1306_DrawLine>
					break;
 8000f50:	e005      	b.n	8000f5e <SSD1306_Task+0x8a>
			for(uint8_t j = 0; j < 45; j++){
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f5c:	d9ca      	bls.n	8000ef4 <SSD1306_Task+0x20>
		for(uint8_t i = 0; i < 8; i++){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3301      	adds	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	d9c1      	bls.n	8000eee <SSD1306_Task+0x1a>
			}
		}
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200006b4 	.word	0x200006b4
 8000f78:	0800e0dc 	.word	0x0800e0dc
 8000f7c:	0800e0b4 	.word	0x0800e0b4

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f84:	f001 fb3a 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_ADC_Start_DMA(hadc, pData, Length);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f88:	f000 f8a6 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8c:	f000 faf6 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f90:	f000 fab6 	bl	8001500 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f94:	f000 f908 	bl	80011a8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000f98:	f00c fab4 	bl	800d504 <MX_USB_DEVICE_Init>
  MX_TIM11_Init();
 8000f9c:	f000 fa8c 	bl	80014b8 <MX_TIM11_Init>
  MX_TIM10_Init();
 8000fa0:	f000 fa66 	bl	8001470 <MX_TIM10_Init>
  MX_I2C1_Init();
 8000fa4:	f000 f9b4 	bl	8001310 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f9e0 	bl	800136c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000fac:	4838      	ldr	r0, [pc, #224]	@ (8001090 <main+0x110>)
 8000fae:	f008 f8df 	bl	8009170 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim10);
 8000fb2:	4838      	ldr	r0, [pc, #224]	@ (8001094 <main+0x114>)
 8000fb4:	f008 f8dc 	bl	8009170 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  //en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
  //en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000fb8:	4937      	ldr	r1, [pc, #220]	@ (8001098 <main+0x118>)
 8000fba:	4838      	ldr	r0, [pc, #224]	@ (800109c <main+0x11c>)
 8000fbc:	f001 f80c 	bl	8001fd8 <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8000fc0:	4937      	ldr	r1, [pc, #220]	@ (80010a0 <main+0x120>)
 8000fc2:	4838      	ldr	r0, [pc, #224]	@ (80010a4 <main+0x124>)
 8000fc4:	f000 fd36 	bl	8001a34 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8000fc8:	4937      	ldr	r1, [pc, #220]	@ (80010a8 <main+0x128>)
 8000fca:	4834      	ldr	r0, [pc, #208]	@ (800109c <main+0x11c>)
 8000fcc:	f000 fd1c 	bl	8001a08 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8000fd0:	f000 fd46 	bl	8001a60 <SSD1306_Init>

  CDC_Attach_Rx(USBRxData);
 8000fd4:	4835      	ldr	r0, [pc, #212]	@ (80010ac <main+0x12c>)
 8000fd6:	f00c fbe7 	bl	800d7a8 <CDC_Attach_Rx>
  nBytesTx = 0;
 8000fda:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <main+0x130>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

  dataRx.buff = (uint8_t *)buffRx;
 8000fe0:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <main+0x134>)
 8000fe2:	4a35      	ldr	r2, [pc, #212]	@ (80010b8 <main+0x138>)
 8000fe4:	601a      	str	r2, [r3, #0]
  dataRx.indexR = 0;
 8000fe6:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <main+0x134>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
  dataRx.indexW = 0;
 8000fec:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <main+0x134>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	715a      	strb	r2, [r3, #5]
  dataRx.header = HEADER_U;
 8000ff2:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <main+0x134>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	729a      	strb	r2, [r3, #10]
  dataRx.mask = RXBUFSIZE - 1;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80010b4 <main+0x134>)
 8000ffa:	22ff      	movs	r2, #255	@ 0xff
 8000ffc:	71da      	strb	r2, [r3, #7]

  dataTx.bytesToTx = 0;
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <main+0x13c>)
 8001000:	2200      	movs	r2, #0
 8001002:	721a      	strb	r2, [r3, #8]
  dataTx.buff = buffTx;
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <main+0x13c>)
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <main+0x140>)
 8001008:	601a      	str	r2, [r3, #0]
  dataTx.indexR = 0;
 800100a:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <main+0x13c>)
 800100c:	2200      	movs	r2, #0
 800100e:	711a      	strb	r2, [r3, #4]
  dataTx.indexW = 0;
 8001010:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <main+0x13c>)
 8001012:	2200      	movs	r2, #0
 8001014:	715a      	strb	r2, [r3, #5]
  dataTx.mask = TXBUFSIZE -1;
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <main+0x13c>)
 8001018:	22ff      	movs	r2, #255	@ 0xff
 800101a:	719a      	strb	r2, [r3, #6]
  //SSD1306_DrawBitmap(0, 0, imagen2, 128, 64, WHITE);
  MPU6050_Init(&mpuValues);
 800101c:	4829      	ldr	r0, [pc, #164]	@ (80010c4 <main+0x144>)
 800101e:	f000 fc69 	bl	80018f4 <MPU6050_Init>
  mpuValues.DMAREADY = 1;
 8001022:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <main+0x144>)
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(!is10ms){
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <main+0x148>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10e      	bne.n	8001050 <main+0xd0>
		  is10ms = 40;
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <main+0x148>)
 8001034:	2228      	movs	r2, #40	@ 0x28
 8001036:	701a      	strb	r2, [r3, #0]
		  is100ms--;
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <main+0x14c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <main+0x14c>)
 8001042:	701a      	strb	r2, [r3, #0]
		  is250ms--;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <main+0x150>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3b01      	subs	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <main+0x150>)
 800104e:	701a      	strb	r2, [r3, #0]
	  }
	  if(!is100ms){
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <main+0x14c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <main+0xe6>
		  is100ms = 10;
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <main+0x14c>)
 800105a:	220a      	movs	r2, #10
 800105c:	701a      	strb	r2, [r3, #0]
		  SSD1306_Task();
 800105e:	f7ff ff39 	bl	8000ed4 <SSD1306_Task>
		  SSD1306_RefreshReady();
 8001062:	f000 ffdf 	bl	8002024 <SSD1306_RefreshReady>

	  }
	  if(!is250ms){
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <main+0x150>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <main+0x102>
		  Engines_task();
 800106e:	f7ff faf9 	bl	8000664 <Engines_task>
		  is250ms = 25;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <main+0x150>)
 8001074:	2219      	movs	r2, #25
 8001076:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8001078:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107c:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <main+0x154>)
 800107e:	f002 fece 	bl	8003e1e <HAL_GPIO_TogglePin>
	  }
	  serialTask((_sRx *)&dataRx,&dataTx);
 8001082:	490e      	ldr	r1, [pc, #56]	@ (80010bc <main+0x13c>)
 8001084:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <main+0x134>)
 8001086:	f000 fb07 	bl	8001698 <serialTask>
	  //MPU6050_MAF(&mpuValues);
	  SSD1306_UpdateScreen();
 800108a:	f000 fd99 	bl	8001bc0 <SSD1306_UpdateScreen>
	  if(!is10ms){
 800108e:	e7cc      	b.n	800102a <main+0xaa>
 8001090:	20000370 	.word	0x20000370
 8001094:	20000328 	.word	0x20000328
 8001098:	08001771 	.word	0x08001771
 800109c:	08001739 	.word	0x08001739
 80010a0:	0800181d 	.word	0x0800181d
 80010a4:	080017a5 	.word	0x080017a5
 80010a8:	080017e5 	.word	0x080017e5
 80010ac:	08000815 	.word	0x08000815
 80010b0:	200006a0 	.word	0x200006a0
 80010b4:	200003b8 	.word	0x200003b8
 80010b8:	200003d4 	.word	0x200003d4
 80010bc:	200003c8 	.word	0x200003c8
 80010c0:	200004d4 	.word	0x200004d4
 80010c4:	200005d4 	.word	0x200005d4
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000001 	.word	0x20000001
 80010d0:	20000002 	.word	0x20000002
 80010d4:	40020800 	.word	0x40020800

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00c ff88 	bl	800dffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <SystemClock_Config+0xc8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <SystemClock_Config+0xc8>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <SystemClock_Config+0xc8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <SystemClock_Config+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <SystemClock_Config+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001148:	2319      	movs	r3, #25
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800114c:	23c0      	movs	r3, #192	@ 0xc0
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f007 fb73 	bl	8008848 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 fb78 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2103      	movs	r1, #3
 8001188:	4618      	mov	r0, r3
 800118a:	f007 fdd5 	bl	8008d38 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001194:	f000 fb62 	bl	800185c <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	@ 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b52      	ldr	r3, [pc, #328]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <MX_ADC1_Init+0x160>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b50      	ldr	r3, [pc, #320]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b48      	ldr	r3, [pc, #288]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b46      	ldr	r3, [pc, #280]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011ea:	4a48      	ldr	r2, [pc, #288]	@ (800130c <MX_ADC1_Init+0x164>)
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80011f4:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011f6:	2208      	movs	r2, #8
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b42      	ldr	r3, [pc, #264]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b40      	ldr	r3, [pc, #256]	@ (8001304 <MX_ADC1_Init+0x15c>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	483e      	ldr	r0, [pc, #248]	@ (8001304 <MX_ADC1_Init+0x15c>)
 800120a:	f001 fa8d 	bl	8002728 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 fb22 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001220:	2303      	movs	r3, #3
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4836      	ldr	r0, [pc, #216]	@ (8001304 <MX_ADC1_Init+0x15c>)
 800122a:	f001 fce3 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 fb12 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001238:	2301      	movs	r3, #1
 800123a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	482f      	ldr	r0, [pc, #188]	@ (8001304 <MX_ADC1_Init+0x15c>)
 8001246:	f001 fcd5 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001250:	f000 fb04 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001254:	2302      	movs	r3, #2
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001258:	2303      	movs	r3, #3
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4828      	ldr	r0, [pc, #160]	@ (8001304 <MX_ADC1_Init+0x15c>)
 8001262:	f001 fcc7 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800126c:	f000 faf6 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001270:	2303      	movs	r3, #3
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4821      	ldr	r0, [pc, #132]	@ (8001304 <MX_ADC1_Init+0x15c>)
 800127e:	f001 fcb9 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001288:	f000 fae8 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800128c:	2304      	movs	r3, #4
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001290:	2305      	movs	r3, #5
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	481a      	ldr	r0, [pc, #104]	@ (8001304 <MX_ADC1_Init+0x15c>)
 800129a:	f001 fcab 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80012a4:	f000 fada 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012a8:	2305      	movs	r3, #5
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80012ac:	2306      	movs	r3, #6
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4813      	ldr	r0, [pc, #76]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80012b6:	f001 fc9d 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80012c0:	f000 facc 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012c4:	2306      	movs	r3, #6
 80012c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80012d2:	f001 fc8f 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80012dc:	f000 fabe 	bl	800185c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012e0:	2307      	movs	r3, #7
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_ADC1_Init+0x15c>)
 80012ee:	f001 fc81 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80012f8:	f000 fab0 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000124 	.word	0x20000124
 8001308:	40012000 	.word	0x40012000
 800130c:	0f000001 	.word	0x0f000001

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f002 fd81 	bl	8003e54 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fa80 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001cc 	.word	0x200001cc
 8001364:	40005400 	.word	0x40005400
 8001368:	00061a80 	.word	0x00061a80

0800136c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	@ 0x38
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139c:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <MX_TIM3_Init+0xfc>)
 800139e:	4a33      	ldr	r2, [pc, #204]	@ (800146c <MX_TIM3_Init+0x100>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013a4:	220f      	movs	r2, #15
 80013a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013b0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80013b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c2:	4829      	ldr	r0, [pc, #164]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013c4:	f007 fe84 	bl	80090d0 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013ce:	f000 fa45 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	4822      	ldr	r0, [pc, #136]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013e0:	f008 f934 	bl	800964c <HAL_TIM_ConfigClockSource>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013ea:	f000 fa37 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ee:	481e      	ldr	r0, [pc, #120]	@ (8001468 <MX_TIM3_Init+0xfc>)
 80013f0:	f007 ff20 	bl	8009234 <HAL_TIM_PWM_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013fa:	f000 fa2f 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	4619      	mov	r1, r3
 800140c:	4816      	ldr	r0, [pc, #88]	@ (8001468 <MX_TIM3_Init+0xfc>)
 800140e:	f008 fcb9 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001418:	f000 fa20 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141c:	2360      	movs	r3, #96	@ 0x60
 800141e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_TIM3_Init+0xfc>)
 8001434:	f008 f848 	bl	80094c8 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800143e:	f000 fa0d 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2204      	movs	r2, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_TIM3_Init+0xfc>)
 800144a:	f008 f83d 	bl	80094c8 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001454:	f000 fa02 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_TIM3_Init+0xfc>)
 800145a:	f000 ffbd 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002e0 	.word	0x200002e0
 800146c:	40000400 	.word	0x40000400

08001470 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001474:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_TIM10_Init+0x40>)
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <MX_TIM10_Init+0x44>)
 8001478:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_TIM10_Init+0x40>)
 800147c:	222f      	movs	r2, #47	@ 0x2f
 800147e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_TIM10_Init+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_TIM10_Init+0x40>)
 8001488:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800148c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <MX_TIM10_Init+0x40>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_TIM10_Init+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_TIM10_Init+0x40>)
 800149c:	f007 fe18 	bl	80090d0 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014a6:	f000 f9d9 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000328 	.word	0x20000328
 80014b4:	40014400 	.word	0x40014400

080014b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <MX_TIM11_Init+0x44>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 23999;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014d0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80014d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014e4:	f007 fdf4 	bl	80090d0 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014ee:	f000 f9b5 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000370 	.word	0x20000370
 80014fc:	40014800 	.word	0x40014800

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_DMA_Init+0x78>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a1a      	ldr	r2, [pc, #104]	@ (8001578 <MX_DMA_Init+0x78>)
 8001510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_DMA_Init+0x78>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_DMA_Init+0x78>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <MX_DMA_Init+0x78>)
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_DMA_Init+0x78>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200b      	movs	r0, #11
 8001544:	f001 feeb 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f001 ff04 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	200c      	movs	r0, #12
 8001554:	f001 fee3 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001558:	200c      	movs	r0, #12
 800155a:	f001 fefc 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2038      	movs	r0, #56	@ 0x38
 8001564:	f001 fedb 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001568:	2038      	movs	r0, #56	@ 0x38
 800156a:	f001 fef4 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <MX_GPIO_Init+0x10c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a3b      	ldr	r2, [pc, #236]	@ (8001688 <MX_GPIO_Init+0x10c>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a34      	ldr	r2, [pc, #208]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <MX_GPIO_Init+0x10c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001608:	4820      	ldr	r0, [pc, #128]	@ (800168c <MX_GPIO_Init+0x110>)
 800160a:	f002 fbef 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_OUT_B_GPIO_Port, MOTOR_OUT_B_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001614:	481e      	ldr	r0, [pc, #120]	@ (8001690 <MX_GPIO_Init+0x114>)
 8001616:	f002 fbe9 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_OUT_A_Pin|MOTOR2_OUT_A_Pin|MOTOR2_OUT_B_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001620:	481c      	ldr	r0, [pc, #112]	@ (8001694 <MX_GPIO_Init+0x118>)
 8001622:	f002 fbe3 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4813      	ldr	r0, [pc, #76]	@ (800168c <MX_GPIO_Init+0x110>)
 8001640:	f002 fa50 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_OUT_B_Pin */
  GPIO_InitStruct.Pin = MOTOR_OUT_B_Pin;
 8001644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_OUT_B_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MX_GPIO_Init+0x114>)
 800165e:	f002 fa41 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_OUT_A_Pin MOTOR2_OUT_A_Pin MOTOR2_OUT_B_Pin */
  GPIO_InitStruct.Pin = MOTOR_OUT_A_Pin|MOTOR2_OUT_A_Pin|MOTOR2_OUT_B_Pin;
 8001662:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	@ (8001694 <MX_GPIO_Init+0x118>)
 800167c:	f002 fa32 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	@ 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400

08001698 <serialTask>:

/* USER CODE BEGIN 4 */
void serialTask(_sRx *dataRx, _sTx *dataTx)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	if(dataRx->isComannd){
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7b1b      	ldrb	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <serialTask+0x20>
			dataRx->isComannd=FALSE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	731a      	strb	r2, [r3, #12]
			decodeCommand(dataRx,dataTx);
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff f9ec 	bl	8000a90 <decodeCommand>
	    }
	if(dataRx->indexR!=dataRx->indexW){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	791a      	ldrb	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	795b      	ldrb	r3, [r3, #5]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d002      	beq.n	80016ca <serialTask+0x32>
	        decodeHeader(dataRx);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff f8df 	bl	8000888 <decodeHeader>
	    }
	if(dataTx->indexR!=dataTx->indexW){
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	791a      	ldrb	r2, [r3, #4]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d02b      	beq.n	800172e <serialTask+0x96>
		if(dataTx->indexW > dataTx->indexR){
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	795a      	ldrb	r2, [r3, #5]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d908      	bls.n	80016f4 <serialTask+0x5c>
				dataTx->bytesToTx = dataTx->indexW - dataTx->indexR;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	795a      	ldrb	r2, [r3, #5]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	721a      	strb	r2, [r3, #8]
 80016f2:	e006      	b.n	8001702 <serialTask+0x6a>
			}else{
				dataTx->bytesToTx = sizeof(dataTx->buff) - dataTx->indexR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	f1c3 0304 	rsb	r3, r3, #4
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	721a      	strb	r2, [r3, #8]
			}
			if(CDC_Transmit_FS(&dataTx->buff[dataTx->indexR], dataTx->bytesToTx) == USBD_OK){
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	7912      	ldrb	r2, [r2, #4]
 800170a:	441a      	add	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7a1b      	ldrb	r3, [r3, #8]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f00c f810 	bl	800d738 <CDC_Transmit_FS>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <serialTask+0x96>
				dataTx->indexR += dataTx->bytesToTx;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	791a      	ldrb	r2, [r3, #4]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	7a1b      	ldrb	r3, [r3, #8]
 8001726:	4413      	add	r3, r2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	711a      	strb	r2, [r3, #4]
			}
	    }
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <I2C_DMA_Transmit>:
uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	461a      	mov	r2, r3
 8001742:	4603      	mov	r3, r0
 8001744:	81fb      	strh	r3, [r7, #14]
 8001746:	460b      	mov	r3, r1
 8001748:	81bb      	strh	r3, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800174e:	89ba      	ldrh	r2, [r7, #12]
 8001750:	89f9      	ldrh	r1, [r7, #14]
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <I2C_DMA_Transmit+0x34>)
 800175e:	f003 f8fd 	bl	800495c <HAL_I2C_Mem_Write_DMA>
	return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200001cc 	.word	0x200001cc

08001770 <I2C_1_Abstract_Master_Transmit_Blocking>:
uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4603      	mov	r3, r0
 800177c:	81fb      	strh	r3, [r7, #14]
 800177e:	4613      	mov	r3, r2
 8001780:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8001782:	89ba      	ldrh	r2, [r7, #12]
 8001784:	89f9      	ldrh	r1, [r7, #14]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8001790:	f002 fcba 	bl	8004108 <HAL_I2C_Master_Transmit>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001cc 	.word	0x200001cc

080017a4 <I2C_RBlocking>:
uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4603      	mov	r3, r0
 80017ae:	81fb      	strh	r3, [r7, #14]
 80017b0:	460b      	mov	r3, r1
 80017b2:	81bb      	strh	r3, [r7, #12]
 80017b4:	4613      	mov	r3, r2
 80017b6:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
 80017b8:	8978      	ldrh	r0, [r7, #10]
 80017ba:	89ba      	ldrh	r2, [r7, #12]
 80017bc:	89f9      	ldrh	r1, [r7, #14]
 80017be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	8b3b      	ldrh	r3, [r7, #24]
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4603      	mov	r3, r0
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <I2C_RBlocking+0x3c>)
 80017d0:	f002 fe92 	bl	80044f8 <HAL_I2C_Mem_Read>
	return 1;
 80017d4:	2301      	movs	r3, #1

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001cc 	.word	0x200001cc

080017e4 <I2C_DMA_Recive>:
uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60ba      	str	r2, [r7, #8]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	81fb      	strh	r3, [r7, #14]
 80017f2:	460b      	mov	r3, r1
 80017f4:	81bb      	strh	r3, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80017fa:	89ba      	ldrh	r2, [r7, #12]
 80017fc:	89f9      	ldrh	r1, [r7, #14]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <I2C_DMA_Recive+0x34>)
 800180a:	f003 fa05 	bl	8004c18 <HAL_I2C_Mem_Read_DMA>
	return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001cc 	.word	0x200001cc

0800181c <I2C_1_Abstract_Mem_Write_Blocking>:
uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af04      	add	r7, sp, #16
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	80fb      	strh	r3, [r7, #6]
 8001828:	460b      	mov	r3, r1
 800182a:	717b      	strb	r3, [r7, #5]
 800182c:	4613      	mov	r3, r2
 800182e:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	b29a      	uxth	r2, r3
 8001834:	793b      	ldrb	r3, [r7, #4]
 8001836:	b298      	uxth	r0, r3
 8001838:	88f9      	ldrh	r1, [r7, #6]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	8a3b      	ldrh	r3, [r7, #16]
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4603      	mov	r3, r0
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800184a:	f002 fd5b 	bl	8004304 <HAL_I2C_Mem_Write>
 800184e:	4603      	mov	r3, r0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001cc 	.word	0x200001cc

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <en_HandlerENG>:
	engines->speed=0;
	engines->maxSpeed=maxSpeed;

}

void en_HandlerENG(_sEng *engines,int32_t newspeed,uint8_t freno){
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	71fb      	strb	r3, [r7, #7]

	if(newspeed==engines->speed)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4293      	cmp	r3, r2
 8001880:	d031      	beq.n	80018e6 <en_HandlerENG+0x7e>
		return;
	if(freno==1){
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d103      	bne.n	8001890 <en_HandlerENG+0x28>
		engines->estado=BRAKE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2203      	movs	r2, #3
 800188c:	709a      	strb	r2, [r3, #2]
		return;
 800188e:	e02b      	b.n	80018e8 <en_HandlerENG+0x80>
	}
	if(newspeed>engines->maxSpeed)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	889b      	ldrh	r3, [r3, #4]
 8001894:	461a      	mov	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4293      	cmp	r3, r2
 800189a:	dd02      	ble.n	80018a2 <en_HandlerENG+0x3a>
		newspeed=engines->maxSpeed;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	889b      	ldrh	r3, [r3, #4]
 80018a0:	60bb      	str	r3, [r7, #8]
	//agregar el caso anterior para negativo
	if(newspeed<0){
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	da09      	bge.n	80018bc <en_HandlerENG+0x54>
		engines->estado= BACK;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	709a      	strb	r2, [r3, #2]
		engines->speed= -newspeed;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	425b      	negs	r3, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	e015      	b.n	80018e8 <en_HandlerENG+0x80>
	}else if(newspeed>0){
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dd07      	ble.n	80018d2 <en_HandlerENG+0x6a>
		engines->estado= FRONT;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	709a      	strb	r2, [r3, #2]
		engines->speed= newspeed;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	e00a      	b.n	80018e8 <en_HandlerENG+0x80>
	}else if(newspeed==0){
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <en_HandlerENG+0x80>
		engines->estado= FREE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2202      	movs	r2, #2
 80018dc:	709a      	strb	r2, [r3, #2]
		engines->speed= 0;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	e000      	b.n	80018e8 <en_HandlerENG+0x80>
		return;
 80018e6:	bf00      	nop
	}

}
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(MPU6050_t *MpuData){
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <MPU6050_Init+0xd0>)
 8001906:	681c      	ldr	r4, [r3, #0]
 8001908:	f107 030f 	add.w	r3, r7, #15
 800190c:	2201      	movs	r2, #1
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	2175      	movs	r1, #117	@ 0x75
 8001914:	20d0      	movs	r0, #208	@ 0xd0
 8001916:	47a0      	blx	r4
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b68      	cmp	r3, #104	@ 0x68
 800191c:	d14c      	bne.n	80019b8 <MPU6050_Init+0xc4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <MPU6050_Init+0xd4>)
 8001924:	681c      	ldr	r4, [r3, #0]
 8001926:	f107 030e 	add.w	r3, r7, #14
 800192a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	216b      	movs	r1, #107	@ 0x6b
 8001938:	20d0      	movs	r0, #208	@ 0xd0
 800193a:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800193c:	2307      	movs	r3, #7
 800193e:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <MPU6050_Init+0xd4>)
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	f107 030e 	add.w	r3, r7, #14
 8001948:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800194c:	9201      	str	r2, [sp, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	2119      	movs	r1, #25
 8001956:	20d0      	movs	r0, #208	@ 0xd0
 8001958:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 800195e:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <MPU6050_Init+0xd4>)
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	f107 030e 	add.w	r3, r7, #14
 8001966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800196a:	9201      	str	r2, [sp, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	9200      	str	r2, [sp, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	211c      	movs	r1, #28
 8001974:	20d0      	movs	r0, #208	@ 0xd0
 8001976:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001978:	2300      	movs	r3, #0
 800197a:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <MPU6050_Init+0xd4>)
 800197e:	681c      	ldr	r4, [r3, #0]
 8001980:	f107 030e 	add.w	r3, r7, #14
 8001984:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	211b      	movs	r1, #27
 8001992:	20d0      	movs	r0, #208	@ 0xd0
 8001994:	47a0      	blx	r4

        Data = 0x03;
 8001996:	2303      	movs	r3, #3
 8001998:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MPU6050_Init+0xd4>)
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	f107 030e 	add.w	r3, r7, #14
 80019a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	9200      	str	r2, [sp, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	211a      	movs	r1, #26
 80019b0:	20d0      	movs	r0, #208	@ 0xd0
 80019b2:	47a0      	blx	r4

        return 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <MPU6050_Init+0xc6>
    }
    return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200006e0 	.word	0x200006e0
 80019c8:	200006e4 	.word	0x200006e4

080019cc <MPU6050_Read_All>:
//
//    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
//    MpuData.Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
//}

void MPU6050_Read_All(MPU6050_t *MpuData) {
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <MPU6050_Read_All+0x2e>
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MPU6050_Read_All+0x38>)
 80019e0:	681c      	ldr	r4, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80019e8:	230e      	movs	r3, #14
 80019ea:	213b      	movs	r1, #59	@ 0x3b
 80019ec:	20d0      	movs	r0, #208	@ 0xd0
 80019ee:	47a0      	blx	r4
    MpuData->DMAREADY=0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80019f8:	e000      	b.n	80019fc <MPU6050_Read_All+0x30>
    	return;
 80019fa:	bf00      	nop


}
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200006d8 	.word	0x200006d8

08001a08 <MPU6050_NonBlocking_DMA>:


void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <MPU6050_NonBlocking_DMA+0x24>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <MPU6050_NonBlocking_DMA+0x28>)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6013      	str	r3, [r2, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200006dc 	.word	0x200006dc
 8001a30:	200006d8 	.word	0x200006d8

08001a34 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 8001a3e:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <MPU6050_I2C_Blocking+0x24>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 8001a44:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <MPU6050_I2C_Blocking+0x28>)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200006e0 	.word	0x200006e0
 8001a5c:	200006e4 	.word	0x200006e4

08001a60 <SSD1306_Init>:
        }
    }
}

void SSD1306_Init()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8001a64:	22ae      	movs	r2, #174	@ 0xae
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	@ 0x78
 8001a6a:	f000 fa99 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	@ 0x78
 8001a74:	f000 fa94 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001a78:	2210      	movs	r2, #16
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	@ 0x78
 8001a7e:	f000 fa8f 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001a82:	22b0      	movs	r2, #176	@ 0xb0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	@ 0x78
 8001a88:	f000 fa8a 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001a8c:	22c8      	movs	r2, #200	@ 0xc8
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	@ 0x78
 8001a92:	f000 fa85 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	@ 0x78
 8001a9c:	f000 fa80 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	@ 0x78
 8001aa6:	f000 fa7b 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	@ 0x78
 8001ab0:	f000 fa76 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001ab4:	2281      	movs	r2, #129	@ 0x81
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	@ 0x78
 8001aba:	f000 fa71 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001abe:	22ff      	movs	r2, #255	@ 0xff
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	@ 0x78
 8001ac4:	f000 fa6c 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001ac8:	22a1      	movs	r2, #161	@ 0xa1
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 fa67 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001ad2:	22a6      	movs	r2, #166	@ 0xa6
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 fa62 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001adc:	22a8      	movs	r2, #168	@ 0xa8
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	@ 0x78
 8001ae2:	f000 fa5d 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001ae6:	223f      	movs	r2, #63	@ 0x3f
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	@ 0x78
 8001aec:	f000 fa58 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001af0:	22a4      	movs	r2, #164	@ 0xa4
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	@ 0x78
 8001af6:	f000 fa53 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8001afa:	22d3      	movs	r2, #211	@ 0xd3
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	@ 0x78
 8001b00:	f000 fa4e 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2078      	movs	r0, #120	@ 0x78
 8001b0a:	f000 fa49 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001b0e:	22d5      	movs	r2, #213	@ 0xd5
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	@ 0x78
 8001b14:	f000 fa44 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001b18:	22f0      	movs	r2, #240	@ 0xf0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	@ 0x78
 8001b1e:	f000 fa3f 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8001b22:	22d9      	movs	r2, #217	@ 0xd9
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	@ 0x78
 8001b28:	f000 fa3a 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001b2c:	2222      	movs	r2, #34	@ 0x22
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	@ 0x78
 8001b32:	f000 fa35 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001b36:	22da      	movs	r2, #218	@ 0xda
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	@ 0x78
 8001b3c:	f000 fa30 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b40:	2212      	movs	r2, #18
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	@ 0x78
 8001b46:	f000 fa2b 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001b4a:	22db      	movs	r2, #219	@ 0xdb
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	@ 0x78
 8001b50:	f000 fa26 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001b54:	2220      	movs	r2, #32
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	@ 0x78
 8001b5a:	f000 fa21 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001b5e:	228d      	movs	r2, #141	@ 0x8d
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	@ 0x78
 8001b64:	f000 fa1c 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001b68:	2214      	movs	r2, #20
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	@ 0x78
 8001b6e:	f000 fa17 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001b72:	22af      	movs	r2, #175	@ 0xaf
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	@ 0x78
 8001b78:	f000 fa12 	bl	8001fa0 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b7c:	222e      	movs	r2, #46	@ 0x2e
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	@ 0x78
 8001b82:	f000 fa0d 	bl	8001fa0 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	71da      	strb	r2, [r3, #7]
	SSD1306.Needtorefresh=1;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	741a      	strb	r2, [r3, #16]
	SSD1306.DMAREADY=0;
 8001baa:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <SSD1306_Init+0x15c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	745a      	strb	r2, [r3, #17]
	SSD1306_Fill(BLACK);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f86b 	bl	8001c8c <SSD1306_Fill>
	//SSD1306_UpdateScreen();

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000af0 	.word	0x20000af0

08001bc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001bc0:	b598      	push	{r3, r4, r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001bc6:	7c5b      	ldrb	r3, [r3, #17]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d055      	beq.n	8001c78 <SSD1306_UpdateScreen+0xb8>
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001bce:	7c1b      	ldrb	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d051      	beq.n	8001c78 <SSD1306_UpdateScreen+0xb8>
		switch(SSD1306.DMA){
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001bd6:	79db      	ldrb	r3, [r3, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01c      	beq.n	8001c16 <SSD1306_UpdateScreen+0x56>
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d137      	bne.n	8001c50 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <SSD1306_UpdateScreen+0xc0>)
 8001be2:	681c      	ldr	r4, [r3, #0]
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001be6:	799b      	ldrb	r3, [r3, #6]
 8001be8:	01db      	lsls	r3, r3, #7
 8001bea:	4a26      	ldr	r2, [pc, #152]	@ (8001c84 <SSD1306_UpdateScreen+0xc4>)
 8001bec:	441a      	add	r2, r3
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	2140      	movs	r1, #64	@ 0x40
 8001bf2:	2078      	movs	r0, #120	@ 0x78
 8001bf4:	47a0      	blx	r4
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d12d      	bne.n	8001c58 <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001bfe:	799b      	ldrb	r3, [r3, #6]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c06:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001c14:	e020      	b.n	8001c58 <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c18:	799b      	ldrb	r3, [r3, #6]
 8001c1a:	3b50      	subs	r3, #80	@ 0x50
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c20:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8001c28:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <SSD1306_UpdateScreen+0xc0>)
 8001c30:	681c      	ldr	r4, [r3, #0]
 8001c32:	2303      	movs	r3, #3
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <SSD1306_UpdateScreen+0xc8>)
 8001c36:	2100      	movs	r1, #0
 8001c38:	2078      	movs	r0, #120	@ 0x78
 8001c3a:	47a0      	blx	r4
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10c      	bne.n	8001c5c <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001c4e:	e005      	b.n	8001c5c <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c52:	2208      	movs	r2, #8
 8001c54:	719a      	strb	r2, [r3, #6]
				break;
 8001c56:	e002      	b.n	8001c5e <SSD1306_UpdateScreen+0x9e>
				break;
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <SSD1306_UpdateScreen+0x9e>
				break;
 8001c5c:	bf00      	nop
			}
		if(SSD1306.Page>7){
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	2b07      	cmp	r3, #7
 8001c64:	d908      	bls.n	8001c78 <SSD1306_UpdateScreen+0xb8>
			SSD1306.Page=0;
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	741a      	strb	r2, [r3, #16]
			SSD1306.DMAREADY=0;
 8001c72:	4b02      	ldr	r3, [pc, #8]	@ (8001c7c <SSD1306_UpdateScreen+0xbc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	745a      	strb	r2, [r3, #17]
		}
	}
}
 8001c78:	bf00      	nop
 8001c7a:	bd98      	pop	{r3, r4, r7, pc}
 8001c7c:	20000af0 	.word	0x20000af0
 8001c80:	20000ae8 	.word	0x20000ae8
 8001c84:	200006e8 	.word	0x200006e8
 8001c88:	20000af8 	.word	0x20000af8

08001c8c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <SSD1306_Fill+0x14>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <SSD1306_Fill+0x16>
 8001ca0:	23ff      	movs	r3, #255	@ 0xff
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <SSD1306_Fill+0x2c>)
 8001caa:	f00c f9a7 	bl	800dffc <memset>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200006e8 	.word	0x200006e8

08001cbc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	80bb      	strh	r3, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cd2:	d848      	bhi.n	8001d66 <SSD1306_DrawPixel+0xaa>
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd8:	d845      	bhi.n	8001d66 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <SSD1306_DrawPixel+0xb8>)
 8001cdc:	791b      	ldrb	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11a      	bne.n	8001d2c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	01db      	lsls	r3, r3, #7
 8001d02:	4413      	add	r3, r2
 8001d04:	4a1c      	ldr	r2, [pc, #112]	@ (8001d78 <SSD1306_DrawPixel+0xbc>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	b25a      	sxtb	r2, r3
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b259      	sxtb	r1, r3
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	01db      	lsls	r3, r3, #7
 8001d22:	4413      	add	r3, r2
 8001d24:	b2c9      	uxtb	r1, r1
 8001d26:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <SSD1306_DrawPixel+0xbc>)
 8001d28:	54d1      	strb	r1, [r2, r3]
 8001d2a:	e01d      	b.n	8001d68 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	b298      	uxth	r0, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <SSD1306_DrawPixel+0xbc>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	4013      	ands	r3, r2
 8001d54:	b259      	sxtb	r1, r3
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	4603      	mov	r3, r0
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b2c9      	uxtb	r1, r1
 8001d60:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SSD1306_DrawPixel+0xbc>)
 8001d62:	54d1      	strb	r1, [r2, r3]
 8001d64:	e000      	b.n	8001d68 <SSD1306_DrawPixel+0xac>
		return;
 8001d66:	bf00      	nop
	}
}
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000af0 	.word	0x20000af0
 8001d78:	200006e8 	.word	0x200006e8

08001d7c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <SSD1306_GotoXY+0x28>)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <SSD1306_GotoXY+0x28>)
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	8053      	strh	r3, [r2, #2]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000af0 	.word	0x20000af0

08001da8 <SSD1306_DrawLine>:
	}
	return *str;
}

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	80fb      	strh	r3, [r7, #6]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80bb      	strh	r3, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dca:	d901      	bls.n	8001dd0 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001dcc:	237f      	movs	r3, #127	@ 0x7f
 8001dce:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dd4:	d901      	bls.n	8001dda <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001dd6:	237f      	movs	r3, #127	@ 0x7f
 8001dd8:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 8001dda:	88bb      	ldrh	r3, [r7, #4]
 8001ddc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dde:	d901      	bls.n	8001de4 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001de0:	233f      	movs	r3, #63	@ 0x3f
 8001de2:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 8001de4:	883b      	ldrh	r3, [r7, #0]
 8001de6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001de8:	d901      	bls.n	8001dee <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001dea:	233f      	movs	r3, #63	@ 0x3f
 8001dec:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d205      	bcs.n	8001e02 <SSD1306_DrawLine+0x5a>
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	e004      	b.n	8001e0c <SSD1306_DrawLine+0x64>
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001e0e:	88ba      	ldrh	r2, [r7, #4]
 8001e10:	883b      	ldrh	r3, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d205      	bcs.n	8001e22 <SSD1306_DrawLine+0x7a>
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	e004      	b.n	8001e2c <SSD1306_DrawLine+0x84>
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	883b      	ldrh	r3, [r7, #0]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d201      	bcs.n	8001e3a <SSD1306_DrawLine+0x92>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e001      	b.n	8001e3e <SSD1306_DrawLine+0x96>
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001e40:	88ba      	ldrh	r2, [r7, #4]
 8001e42:	883b      	ldrh	r3, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d201      	bcs.n	8001e4c <SSD1306_DrawLine+0xa4>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e001      	b.n	8001e50 <SSD1306_DrawLine+0xa8>
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001e52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dd06      	ble.n	8001e6c <SSD1306_DrawLine+0xc4>
 8001e5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e62:	0fda      	lsrs	r2, r3, #31
 8001e64:	4413      	add	r3, r2
 8001e66:	105b      	asrs	r3, r3, #1
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	e006      	b.n	8001e7a <SSD1306_DrawLine+0xd2>
 8001e6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e70:	0fda      	lsrs	r2, r3, #31
 8001e72:	4413      	add	r3, r2
 8001e74:	105b      	asrs	r3, r3, #1
 8001e76:	425b      	negs	r3, r3
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 8001e7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d129      	bne.n	8001ed8 <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 8001e84:	883a      	ldrh	r2, [r7, #0]
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d205      	bcs.n	8001e98 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001e8c:	883b      	ldrh	r3, [r7, #0]
 8001e8e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e94:	893b      	ldrh	r3, [r7, #8]
 8001e96:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d205      	bcs.n	8001eac <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	82bb      	strh	r3, [r7, #20]
 8001eb0:	e00c      	b.n	8001ecc <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001eb2:	8ab9      	ldrh	r1, [r7, #20]
 8001eb4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fefe 	bl	8001cbc <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 8001ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	82bb      	strh	r3, [r7, #20]
 8001ecc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dded      	ble.n	8001eb2 <SSD1306_DrawLine+0x10a>
		}
		return;
 8001ed6:	e05f      	b.n	8001f98 <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 8001ed8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d129      	bne.n	8001f34 <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 8001ee0:	883a      	ldrh	r2, [r7, #0]
 8001ee2:	88bb      	ldrh	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d205      	bcs.n	8001ef4 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001ee8:	883b      	ldrh	r3, [r7, #0]
 8001eea:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001ef0:	893b      	ldrh	r3, [r7, #8]
 8001ef2:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d205      	bcs.n	8001f08 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f04:	893b      	ldrh	r3, [r7, #8]
 8001f06:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	82bb      	strh	r3, [r7, #20]
 8001f0c:	e00c      	b.n	8001f28 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f14:	88b9      	ldrh	r1, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fed0 	bl	8001cbc <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 8001f1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	82bb      	strh	r3, [r7, #20]
 8001f28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dded      	ble.n	8001f0e <SSD1306_DrawLine+0x166>
		}
		return;
 8001f32:	e031      	b.n	8001f98 <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8001f34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f38:	88b9      	ldrh	r1, [r7, #4]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff febd 	bl	8001cbc <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8001f42:	88fa      	ldrh	r2, [r7, #6]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d103      	bne.n	8001f52 <SSD1306_DrawLine+0x1aa>
 8001f4a:	88ba      	ldrh	r2, [r7, #4]
 8001f4c:	883b      	ldrh	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d021      	beq.n	8001f96 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001f52:	8afb      	ldrh	r3, [r7, #22]
 8001f54:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8001f56:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f5e:	425b      	negs	r3, r3
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd08      	ble.n	8001f76 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001f64:	8afa      	ldrh	r2, [r7, #22]
 8001f66:	8a3b      	ldrh	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001f6e:	89fa      	ldrh	r2, [r7, #14]
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	4413      	add	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8001f76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dad8      	bge.n	8001f34 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001f82:	8afa      	ldrh	r2, [r7, #22]
 8001f84:	8a7b      	ldrh	r3, [r7, #18]
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001f8c:	89ba      	ldrh	r2, [r7, #12]
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001f94:	e7ce      	b.n	8001f34 <SSD1306_DrawLine+0x18c>
			break;
 8001f96:	bf00      	nop
		}
	}
}
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}
	...

08001fa0 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	460b      	mov	r3, r1
 8001fac:	71bb      	strb	r3, [r7, #6]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001fb6:	797b      	ldrb	r3, [r7, #5]
 8001fb8:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <SSD1306_I2C_Write+0x34>)
 8001fbc:	681c      	ldr	r4, [r3, #0]
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	b298      	uxth	r0, r3
 8001fc2:	f107 010c 	add.w	r1, r7, #12
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	2202      	movs	r2, #2
 8001fca:	47a0      	blx	r4
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}
 8001fd4:	20000aec 	.word	0x20000aec

08001fd8 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8001fe2:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <Display_Set_I2C_Master_Transmit+0x24>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <Display_Set_I2C_Master_Transmit+0x28>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000ae8 	.word	0x20000ae8
 8002000:	20000aec 	.word	0x20000aec

08002004 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(uint8_t STATE){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
		SSD1306.DMAREADY=STATE;
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <SSD1306_DMAREADY+0x1c>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	7453      	strb	r3, [r2, #17]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	20000af0 	.word	0x20000af0

08002024 <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <SSD1306_RefreshReady+0x14>)
 800202a:	2201      	movs	r2, #1
 800202c:	741a      	strb	r2, [r3, #16]
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000af0 	.word	0x20000af0

0800203c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_MspInit+0x58>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <HAL_MspInit+0x58>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002050:	6453      	str	r3, [r2, #68]	@ 0x44
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_MspInit+0x58>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <HAL_MspInit+0x58>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <HAL_MspInit+0x58>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_MspInit+0x58>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2051      	movs	r0, #81	@ 0x51
 8002080:	f001 f94d 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002084:	2051      	movs	r0, #81	@ 0x51
 8002086:	f001 f966 	bl	8003356 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a33      	ldr	r2, [pc, #204]	@ (8002184 <HAL_ADC_MspInit+0xec>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d15f      	bne.n	800217a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4a31      	ldr	r2, [pc, #196]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a2a      	ldr	r2, [pc, #168]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_ADC_MspInit+0xf0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020f2:	23ff      	movs	r3, #255	@ 0xff
 80020f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f6:	2303      	movs	r3, #3
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4821      	ldr	r0, [pc, #132]	@ (800218c <HAL_ADC_MspInit+0xf4>)
 8002106:	f001 fced 	bl	8003ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800210a:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 800210c:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_ADC_MspInit+0xfc>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 800212c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002142:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002146:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800214e:	4810      	ldr	r0, [pc, #64]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002150:	f001 f91c 	bl	800338c <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800215a:	f7ff fb7f 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a0b      	ldr	r2, [pc, #44]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_ADC_MspInit+0xf8>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2012      	movs	r0, #18
 8002170:	f001 f8d5 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002174:	2012      	movs	r0, #18
 8002176:	f001 f8ee 	bl	8003356 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	@ 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40012000 	.word	0x40012000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	2000016c 	.word	0x2000016c
 8002194:	40026410 	.word	0x40026410

08002198 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a4f      	ldr	r2, [pc, #316]	@ (80022f4 <HAL_I2C_MspInit+0x15c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	f040 8097 	bne.w	80022ea <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	4b4d      	ldr	r3, [pc, #308]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	4a4c      	ldr	r2, [pc, #304]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80021cc:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d8:	23c0      	movs	r3, #192	@ 0xc0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021dc:	2312      	movs	r3, #18
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e8:	2304      	movs	r3, #4
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4842      	ldr	r0, [pc, #264]	@ (80022fc <HAL_I2C_MspInit+0x164>)
 80021f4:	f001 fc76 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	4a3d      	ldr	r2, [pc, #244]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002206:	6413      	str	r3, [r2, #64]	@ 0x40
 8002208:	4b3b      	ldr	r3, [pc, #236]	@ (80022f8 <HAL_I2C_MspInit+0x160>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002214:	4b3a      	ldr	r3, [pc, #232]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <HAL_I2C_MspInit+0x16c>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002220:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 800222e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002232:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002234:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002246:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002252:	482b      	ldr	r0, [pc, #172]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002254:	f001 f89a 	bl	800338c <HAL_DMA_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800225e:	f7ff fafd 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34
 8002268:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <HAL_I2C_MspInit+0x168>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 8002270:	4a26      	ldr	r2, [pc, #152]	@ (800230c <HAL_I2C_MspInit+0x174>)
 8002272:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002274:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 8002276:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800227a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227c:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 800228a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800228e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80022ae:	4816      	ldr	r0, [pc, #88]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 80022b0:	f001 f86c 	bl	800338c <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80022ba:	f7ff facf 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a11      	ldr	r2, [pc, #68]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022c4:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <HAL_I2C_MspInit+0x170>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	201f      	movs	r0, #31
 80022d0:	f001 f825 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022d4:	201f      	movs	r0, #31
 80022d6:	f001 f83e 	bl	8003356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2020      	movs	r0, #32
 80022e0:	f001 f81d 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022e4:	2020      	movs	r0, #32
 80022e6:	f001 f836 	bl	8003356 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	@ 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	20000220 	.word	0x20000220
 8002304:	40026028 	.word	0x40026028
 8002308:	20000280 	.word	0x20000280
 800230c:	40026010 	.word	0x40026010

08002310 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <HAL_TIM_Base_MspInit+0xb8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b26      	ldr	r3, [pc, #152]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	201d      	movs	r0, #29
 8002344:	f000 ffeb 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002348:	201d      	movs	r0, #29
 800234a:	f001 f804 	bl	8003356 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800234e:	e036      	b.n	80023be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1e      	ldr	r2, [pc, #120]	@ (80023d0 <HAL_TIM_Base_MspInit+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d116      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2019      	movs	r0, #25
 800237c:	f000 ffcf 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002380:	2019      	movs	r0, #25
 8002382:	f000 ffe8 	bl	8003356 <HAL_NVIC_EnableIRQ>
}
 8002386:	e01a      	b.n	80023be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <HAL_TIM_Base_MspInit+0xc4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d115      	bne.n	80023be <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_TIM_Base_MspInit+0xbc>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201a      	movs	r0, #26
 80023b4:	f000 ffb3 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023b8:	201a      	movs	r0, #26
 80023ba:	f000 ffcc 	bl	8003356 <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <HAL_TIM_MspPostInit+0x68>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d11d      	bne.n	8002436 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_TIM_MspPostInit+0x6c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <HAL_TIM_MspPostInit+0x6c>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_TIM_MspPostInit+0x6c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002416:	2330      	movs	r3, #48	@ 0x30
 8002418:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002426:	2302      	movs	r3, #2
 8002428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	@ (8002448 <HAL_TIM_MspPostInit+0x70>)
 8002432:	f001 fb57 	bl	8003ae4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40000400 	.word	0x40000400
 8002444:	40023800 	.word	0x40023800
 8002448:	40020400 	.word	0x40020400

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a2:	f000 f8fd 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <DMA1_Stream0_IRQHandler+0x10>)
 80024b2:	f001 f893 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000280 	.word	0x20000280

080024c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <DMA1_Stream1_IRQHandler+0x10>)
 80024c6:	f001 f889 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000220 	.word	0x20000220

080024d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <ADC_IRQHandler+0x10>)
 80024da:	f000 f968 	bl	80027ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000124 	.word	0x20000124

080024e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024ee:	f006 fefa 	bl	80092e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000328 	.word	0x20000328

080024fc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002502:	f006 fef0 	bl	80092e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000370 	.word	0x20000370

08002510 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <TIM3_IRQHandler+0x10>)
 8002516:	f006 fee6 	bl	80092e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200002e0 	.word	0x200002e0

08002524 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <I2C1_EV_IRQHandler+0x10>)
 800252a:	f002 fd05 	bl	8004f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200001cc 	.word	0x200001cc

08002538 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <I2C1_ER_IRQHandler+0x10>)
 800253e:	f002 fe6c 	bl	800521a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200001cc 	.word	0x200001cc

0800254c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <DMA2_Stream0_IRQHandler+0x10>)
 8002552:	f001 f843 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000016c 	.word	0x2000016c

08002560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <OTG_FS_IRQHandler+0x10>)
 8002566:	f005 f860 	bl	800762a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200013ec 	.word	0x200013ec

08002574 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <SystemInit+0x20>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <SystemInit+0x20>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ac:	f7ff ffea 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480c      	ldr	r0, [pc, #48]	@ (80025e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b2:	490d      	ldr	r1, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c8:	4c0a      	ldr	r4, [pc, #40]	@ (80025f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d6:	f00b fd19 	bl	800e00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025da:	f7fe fcd1 	bl	8000f80 <main>
  bx  lr    
 80025de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80025ec:	0800e15c 	.word	0x0800e15c
  ldr r2, =_sbss
 80025f0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80025f4:	20001af0 	.word	0x20001af0

080025f8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <DMA1_Stream2_IRQHandler>
	...

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <HAL_Init+0x40>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_Init+0x40>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_Init+0x40>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 fe6f 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	200f      	movs	r0, #15
 800262c:	f000 f808 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fd04 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fe87 	bl	8003372 <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f000 fe4f 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	@ (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000004 	.word	0x20000004
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	20000b04 	.word	0x20000b04

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000b04 	.word	0x20000b04

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c

08002728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e033      	b.n	80027a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fca6 	bl	8002098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800276e:	f023 0302 	bic.w	r3, r3, #2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fb6c 	bl	8002e58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d049      	beq.n	8002878 <HAL_ADC_IRQHandler+0xca>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d046      	beq.n	8002878 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d12b      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d127      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002830:	2b00      	cmp	r3, #0
 8002832:	d119      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0220 	bic.w	r2, r2, #32
 8002842:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd ffa5 	bl	80007b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0212 	mvn.w	r2, #18
 8002876:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d057      	beq.n	800293e <HAL_ADC_IRQHandler+0x190>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d054      	beq.n	800293e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d139      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d12b      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d124      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002908:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fc10 	bl	8003154 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 020c 	mvn.w	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10d      	bne.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f929 	bl	8002bcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0201 	mvn.w	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002992:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x218>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d012      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	f043 0202 	orr.w	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0220 	mvn.w	r2, #32
 80029b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f912 	bl	8002be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0220 	mvn.w	r2, #32
 80029c4:	601a      	str	r2, [r3, #0]
  }
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Start_DMA+0x22>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0d0      	b.n	8002b94 <HAL_ADC_Start_DMA+0x1c4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d018      	beq.n	8002a3a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a18:	4b60      	ldr	r3, [pc, #384]	@ (8002b9c <HAL_ADC_Start_DMA+0x1cc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a60      	ldr	r2, [pc, #384]	@ (8002ba0 <HAL_ADC_Start_DMA+0x1d0>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9a      	lsrs	r2, r3, #18
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a2c:	e002      	b.n	8002a34 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f9      	bne.n	8002a2e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a48:	d107      	bne.n	8002a5a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 8088 	bne.w	8002b7a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f023 0206 	bic.w	r2, r3, #6
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac6:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <HAL_ADC_Start_DMA+0x1d4>)
 8002ac8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	4a36      	ldr	r2, [pc, #216]	@ (8002ba8 <HAL_ADC_Start_DMA+0x1d8>)
 8002ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad6:	4a35      	ldr	r2, [pc, #212]	@ (8002bac <HAL_ADC_Start_DMA+0x1dc>)
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	4a34      	ldr	r2, [pc, #208]	@ (8002bb0 <HAL_ADC_Start_DMA+0x1e0>)
 8002ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002afa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	334c      	adds	r3, #76	@ 0x4c
 8002b16:	4619      	mov	r1, r3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f000 fce4 	bl	80034e8 <HAL_DMA_Start_IT>
 8002b20:	4603      	mov	r3, r0
 8002b22:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d129      	bne.n	8002b92 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	e020      	b.n	8002b92 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_ADC_Start_DMA+0x1e4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d11b      	bne.n	8002b92 <HAL_ADC_Start_DMA+0x1c2>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d114      	bne.n	8002b92 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e00b      	b.n	8002b92 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	40012300 	.word	0x40012300
 8002ba8:	08003051 	.word	0x08003051
 8002bac:	0800310b 	.word	0x0800310b
 8002bb0:	08003127 	.word	0x08003127
 8002bb4:	40012000 	.word	0x40012000

08002bb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1c>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e113      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x244>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d925      	bls.n	8002c6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68d9      	ldr	r1, [r3, #12]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	2207      	movs	r2, #7
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68d9      	ldr	r1, [r3, #12]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	4603      	mov	r3, r0
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4403      	add	r3, r0
 8002c5e:	3b1e      	subs	r3, #30
 8002c60:	409a      	lsls	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	e022      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	2207      	movs	r2, #7
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4403      	add	r3, r0
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d824      	bhi.n	8002d04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b05      	subs	r3, #5
 8002ccc:	221f      	movs	r2, #31
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	400a      	ands	r2, r1
 8002cda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b05      	subs	r3, #5
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d02:	e04c      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d824      	bhi.n	8002d56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b23      	subs	r3, #35	@ 0x23
 8002d1e:	221f      	movs	r2, #31
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43da      	mvns	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b23      	subs	r3, #35	@ 0x23
 8002d48:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d54:	e023      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b41      	subs	r3, #65	@ 0x41
 8002d68:	221f      	movs	r2, #31
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	400a      	ands	r2, r1
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b41      	subs	r3, #65	@ 0x41
 8002d92:	fa00 f203 	lsl.w	r2, r0, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_ADC_ConfigChannel+0x250>)
 8002da0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a28      	ldr	r2, [pc, #160]	@ (8002e48 <HAL_ADC_ConfigChannel+0x254>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10f      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d8>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b12      	cmp	r3, #18
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <HAL_ADC_ConfigChannel+0x254>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d12b      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x23a>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_ADC_ConfigChannel+0x258>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x1f4>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b11      	cmp	r3, #17
 8002de6:	d122      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <HAL_ADC_ConfigChannel+0x258>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0a:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <HAL_ADC_ConfigChannel+0x25c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_ADC_ConfigChannel+0x260>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	0c9a      	lsrs	r2, r3, #18
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40012300 	.word	0x40012300
 8002e48:	40012000 	.word	0x40012000
 8002e4c:	10000012 	.word	0x10000012
 8002e50:	20000004 	.word	0x20000004
 8002e54:	431bde83 	.word	0x431bde83

08002e58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e60:	4b79      	ldr	r3, [pc, #484]	@ (8003048 <ADC_Init+0x1f0>)
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	021a      	lsls	r2, r3, #8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	4a58      	ldr	r2, [pc, #352]	@ (800304c <ADC_Init+0x1f4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002efe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	e00f      	b.n	8002f56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0202 	bic.w	r2, r2, #2
 8002f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6899      	ldr	r1, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7e1b      	ldrb	r3, [r3, #24]
 8002f70:	005a      	lsls	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	035a      	lsls	r2, r3, #13
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	e007      	b.n	8002fcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	051a      	lsls	r2, r3, #20
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800300e:	025a      	lsls	r2, r3, #9
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	029a      	lsls	r2, r3, #10
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40012300 	.word	0x40012300
 800304c:	0f000001 	.word	0x0f000001

08003050 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	d13c      	bne.n	80030e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d12b      	bne.n	80030dc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003088:	2b00      	cmp	r3, #0
 800308a:	d127      	bne.n	80030dc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d119      	bne.n	80030dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0220 	bic.w	r2, r2, #32
 80030b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7fd fb6b 	bl	80007b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030e2:	e00e      	b.n	8003102 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fd75 	bl	8002be0 <HAL_ADC_ErrorCallback>
}
 80030f6:	e004      	b.n	8003102 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff fd4d 	bl	8002bb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	@ 0x40
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fd4a 	bl	8002be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__NVIC_GetPriorityGrouping+0x18>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0307 	and.w	r3, r3, #7
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db0b      	blt.n	80031f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	4907      	ldr	r1, [pc, #28]	@ (8003204 <__NVIC_EnableIRQ+0x38>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2001      	movs	r0, #1
 80031ee:	fa00 f202 	lsl.w	r2, r0, r2
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	@ (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff29 	bl	8003168 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff3e 	bl	80031b0 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff31 	bl	80031cc <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffa2 	bl	80032c4 <SysTick_Config>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff f996 	bl	80026c8 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e099      	b.n	80034dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c8:	e00f      	b.n	80033ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ca:	f7ff f97d 	bl	80026c8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d908      	bls.n	80033ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2203      	movs	r2, #3
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e078      	b.n	80034dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e8      	bne.n	80033ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4b38      	ldr	r3, [pc, #224]	@ (80034e4 <HAL_DMA_Init+0x158>)
 8003404:	4013      	ands	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	2b04      	cmp	r3, #4
 8003442:	d107      	bne.n	8003454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	4313      	orrs	r3, r2
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0307 	bic.w	r3, r3, #7
 800346a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b04      	cmp	r3, #4
 800347c:	d117      	bne.n	80034ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 faab 	bl	80039ec <DMA_CheckFifoParam>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2240      	movs	r2, #64	@ 0x40
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034aa:	2301      	movs	r3, #1
 80034ac:	e016      	b.n	80034dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa62 	bl	8003980 <DMA_CalcBaseAndBitshift>
 80034bc:	4603      	mov	r3, r0
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c4:	223f      	movs	r2, #63	@ 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	f010803f 	.word	0xf010803f

080034e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_DMA_Start_IT+0x26>
 800350a:	2302      	movs	r3, #2
 800350c:	e040      	b.n	8003590 <HAL_DMA_Start_IT+0xa8>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d12f      	bne.n	8003582 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f9f4 	bl	8003924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003540:	223f      	movs	r2, #63	@ 0x3f
 8003542:	409a      	lsls	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0216 	orr.w	r2, r2, #22
 8003556:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0208 	orr.w	r2, r2, #8
 800356e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e005      	b.n	800358e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800358a:	2302      	movs	r3, #2
 800358c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00c      	b.n	80035d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003824 <HAL_DMA_IRQHandler+0x248>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003828 <HAL_DMA_IRQHandler+0x24c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	2204      	movs	r2, #4
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2210      	movs	r2, #16
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d043      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03c      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	2210      	movs	r2, #16
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e01f      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e016      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0208 	bic.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	2220      	movs	r2, #32
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 808f 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8087 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2220      	movs	r2, #32
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b05      	cmp	r3, #5
 8003784:	d136      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0216 	bic.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x1da>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0208 	bic.w	r2, r2, #8
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	223f      	movs	r2, #63	@ 0x3f
 80037cc:	409a      	lsls	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07e      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
        }
        return;
 80037f2:	e079      	b.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01d      	beq.n	800383e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	2b00      	cmp	r3, #0
 8003816:	d031      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e02c      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
 8003822:	bf00      	nop
 8003824:	20000004 	.word	0x20000004
 8003828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e01e      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d032      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2205      	movs	r2, #5
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d307      	bcc.n	80038c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x2cc>
 80038c2:	e000      	b.n	80038c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e000      	b.n	80038ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80038e8:	bf00      	nop
    }
  }
}
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d108      	bne.n	8003964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003962:	e007      	b.n	8003974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3b10      	subs	r3, #16
 8003990:	4a14      	ldr	r2, [pc, #80]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399a:	4a13      	ldr	r2, [pc, #76]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d909      	bls.n	80039c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	@ 0x58
 80039c0:	e007      	b.n	80039d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	aaaaaaab 	.word	0xaaaaaaab
 80039e8:	0800e144 	.word	0x0800e144

080039ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d856      	bhi.n	8003aba <DMA_CheckFifoParam+0xce>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <DMA_CheckFifoParam+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003abb 	.word	0x08003abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d046      	beq.n	8003abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e043      	b.n	8003abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a3e:	d140      	bne.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e03d      	b.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d121      	bne.n	8003a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d837      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xda>
 8003a56:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <DMA_CheckFifoParam+0x70>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a73 	.word	0x08003a73
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e030      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d025      	beq.n	8003aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e022      	b.n	8003aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a92:	e01c      	b.n	8003ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d903      	bls.n	8003aa2 <DMA_CheckFifoParam+0xb6>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d003      	beq.n	8003aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa0:	e018      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa6:	e015      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aba:	bf00      	nop
 8003abc:	e00a      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e008      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e006      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e159      	b.n	8003db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f040 8148 	bne.w	8003dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d005      	beq.n	8003b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d130      	bne.n	8003b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0201 	and.w	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d017      	beq.n	8003bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d123      	bne.n	8003c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	08da      	lsrs	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3208      	adds	r2, #8
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a2 	beq.w	8003dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b57      	ldr	r3, [pc, #348]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	4a56      	ldr	r2, [pc, #344]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7a:	4b54      	ldr	r3, [pc, #336]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c86:	4a52      	ldr	r2, [pc, #328]	@ (8003dd0 <HAL_GPIO_Init+0x2ec>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a49      	ldr	r2, [pc, #292]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d019      	beq.n	8003ce6 <HAL_GPIO_Init+0x202>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a48      	ldr	r2, [pc, #288]	@ (8003dd8 <HAL_GPIO_Init+0x2f4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0x1fe>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a47      	ldr	r2, [pc, #284]	@ (8003ddc <HAL_GPIO_Init+0x2f8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00d      	beq.n	8003cde <HAL_GPIO_Init+0x1fa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a46      	ldr	r2, [pc, #280]	@ (8003de0 <HAL_GPIO_Init+0x2fc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <HAL_GPIO_Init+0x1f6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a45      	ldr	r2, [pc, #276]	@ (8003de4 <HAL_GPIO_Init+0x300>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_GPIO_Init+0x1f2>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e008      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e006      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e004      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e002      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f002 0203 	and.w	r2, r2, #3
 8003cee:	0092      	lsls	r2, r2, #2
 8003cf0:	4093      	lsls	r3, r2
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf8:	4935      	ldr	r1, [pc, #212]	@ (8003dd0 <HAL_GPIO_Init+0x2ec>)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d54:	4a24      	ldr	r2, [pc, #144]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5a:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d84:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	f67f aea2 	bls.w	8003b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40020400 	.word	0x40020400
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	40020c00 	.word	0x40020c00
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e08:	e003      	b.n	8003e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e30:	887a      	ldrh	r2, [r7, #2]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4013      	ands	r3, r2
 8003e36:	041a      	lsls	r2, r3, #16
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	400b      	ands	r3, r1
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e12b      	b.n	80040be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fe f98c 	bl	8002198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	@ 0x24
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f005 f8f6 	bl	80090a8 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4a81      	ldr	r2, [pc, #516]	@ (80040c8 <HAL_I2C_Init+0x274>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d807      	bhi.n	8003ed8 <HAL_I2C_Init+0x84>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a80      	ldr	r2, [pc, #512]	@ (80040cc <HAL_I2C_Init+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e006      	b.n	8003ee6 <HAL_I2C_Init+0x92>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a7d      	ldr	r2, [pc, #500]	@ (80040d0 <HAL_I2C_Init+0x27c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	bf94      	ite	ls
 8003ee0:	2301      	movls	r3, #1
 8003ee2:	2300      	movhi	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0e7      	b.n	80040be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a78      	ldr	r2, [pc, #480]	@ (80040d4 <HAL_I2C_Init+0x280>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0c9b      	lsrs	r3, r3, #18
 8003ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80040c8 <HAL_I2C_Init+0x274>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d802      	bhi.n	8003f28 <HAL_I2C_Init+0xd4>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3301      	adds	r3, #1
 8003f26:	e009      	b.n	8003f3c <HAL_I2C_Init+0xe8>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	4a69      	ldr	r2, [pc, #420]	@ (80040d8 <HAL_I2C_Init+0x284>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	495c      	ldr	r1, [pc, #368]	@ (80040c8 <HAL_I2C_Init+0x274>)
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	d819      	bhi.n	8003f90 <HAL_I2C_Init+0x13c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e59      	subs	r1, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f70:	400b      	ands	r3, r1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_I2C_Init+0x138>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e59      	subs	r1, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f84:	3301      	adds	r3, #1
 8003f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8a:	e051      	b.n	8004030 <HAL_I2C_Init+0x1dc>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e04f      	b.n	8004030 <HAL_I2C_Init+0x1dc>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <HAL_I2C_Init+0x168>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e012      	b.n	8003fe2 <HAL_I2C_Init+0x18e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e58      	subs	r0, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	0099      	lsls	r1, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Init+0x196>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e022      	b.n	8004030 <HAL_I2C_Init+0x1dc>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10e      	bne.n	8004010 <HAL_I2C_Init+0x1bc>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1e58      	subs	r0, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	440b      	add	r3, r1
 8004000:	fbb0 f3f3 	udiv	r3, r0, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400e:	e00f      	b.n	8004030 <HAL_I2C_Init+0x1dc>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	0099      	lsls	r1, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	fbb0 f3f3 	udiv	r3, r0, r3
 8004026:	3301      	adds	r3, #1
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	6809      	ldr	r1, [r1, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69da      	ldr	r2, [r3, #28]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800405e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6911      	ldr	r1, [r2, #16]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	4311      	orrs	r1, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	430b      	orrs	r3, r1
 8004072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	000186a0 	.word	0x000186a0
 80040cc:	001e847f 	.word	0x001e847f
 80040d0:	003d08ff 	.word	0x003d08ff
 80040d4:	431bde83 	.word	0x431bde83
 80040d8:	10624dd3 	.word	0x10624dd3

080040dc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b80      	cmp	r3, #128	@ 0x80
 80040f0:	d103      	bne.n	80040fa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
  }
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7fe fad4 	bl	80026c8 <HAL_GetTick>
 8004120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	f040 80e0 	bne.w	80042f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2319      	movs	r3, #25
 8004136:	2201      	movs	r2, #1
 8004138:	4970      	ldr	r1, [pc, #448]	@ (80042fc <HAL_I2C_Master_Transmit+0x1f4>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f002 feae 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
 8004148:	e0d3      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x50>
 8004154:	2302      	movs	r3, #2
 8004156:	e0cc      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d007      	beq.n	800417e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	@ 0x21
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2210      	movs	r2, #16
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	893a      	ldrh	r2, [r7, #8]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4a50      	ldr	r2, [pc, #320]	@ (8004300 <HAL_I2C_Master_Transmit+0x1f8>)
 80041be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f002 faa4 	bl	8006714 <I2C_MasterRequestWrite>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e08d      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041ec:	e066      	b.n	80042bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f002 ff6c 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06b      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <HAL_I2C_Master_Transmit+0x188>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d017      	beq.n	8004290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f002 ff63 	bl	8007160 <I2C_WaitOnBTFFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e01a      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d194      	bne.n	80041ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	00100002 	.word	0x00100002
 8004300:	ffff0000 	.word	0xffff0000

08004304 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800431e:	f7fe f9d3 	bl	80026c8 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	f040 80d9 	bne.w	80044e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2319      	movs	r3, #25
 8004338:	2201      	movs	r2, #1
 800433a:	496d      	ldr	r1, [pc, #436]	@ (80044f0 <HAL_I2C_Mem_Write+0x1ec>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f002 fdad 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
 800434a:	e0cc      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2C_Mem_Write+0x56>
 8004356:	2302      	movs	r3, #2
 8004358:	e0c5      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d007      	beq.n	8004380 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	@ 0x21
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a4d      	ldr	r2, [pc, #308]	@ (80044f4 <HAL_I2C_Mem_Write+0x1f0>)
 80043c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043c2:	88f8      	ldrh	r0, [r7, #6]
 80043c4:	893a      	ldrh	r2, [r7, #8]
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4603      	mov	r3, r0
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f002 fa20 	bl	8006818 <I2C_RequestMemoryWrite>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d052      	beq.n	8004484 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e081      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f002 fe72 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06b      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d11b      	bne.n	8004484 <HAL_I2C_Mem_Write+0x180>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1aa      	bne.n	80043e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f002 fe65 	bl	8007160 <I2C_WaitOnBTFFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d107      	bne.n	80044b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e016      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	00100002 	.word	0x00100002
 80044f4:	ffff0000 	.word	0xffff0000

080044f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	@ 0x30
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	460b      	mov	r3, r1
 800450c:	813b      	strh	r3, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004512:	f7fe f8d9 	bl	80026c8 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b20      	cmp	r3, #32
 8004522:	f040 8214 	bne.w	800494e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2319      	movs	r3, #25
 800452c:	2201      	movs	r2, #1
 800452e:	497b      	ldr	r1, [pc, #492]	@ (800471c <HAL_I2C_Mem_Read+0x224>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f002 fcb3 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	e207      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_I2C_Mem_Read+0x56>
 800454a:	2302      	movs	r3, #2
 800454c:	e200      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d007      	beq.n	8004574 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004582:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2222      	movs	r2, #34	@ 0x22
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800459e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004720 <HAL_I2C_Mem_Read+0x228>)
 80045b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045b6:	88f8      	ldrh	r0, [r7, #6]
 80045b8:	893a      	ldrh	r2, [r7, #8]
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	4603      	mov	r3, r0
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f002 f9bc 	bl	8006944 <I2C_RequestMemoryRead>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1bc      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d113      	bne.n	8004606 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e190      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	2b01      	cmp	r3, #1
 800460c:	d11b      	bne.n	8004646 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e170      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11b      	bne.n	8004686 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	e150      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800469c:	e144      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	f200 80f1 	bhi.w	800488a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d123      	bne.n	80046f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f002 fdcd 	bl	8007254 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e145      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046f6:	e117      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d14e      	bne.n	800479e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	2200      	movs	r2, #0
 8004708:	4906      	ldr	r1, [pc, #24]	@ (8004724 <HAL_I2C_Mem_Read+0x22c>)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f002 fbc6 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e11a      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
 800471a:	bf00      	nop
 800471c:	00100002 	.word	0x00100002
 8004720:	ffff0000 	.word	0xffff0000
 8004724:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800479c:	e0c4      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	2200      	movs	r2, #0
 80047a6:	496c      	ldr	r1, [pc, #432]	@ (8004958 <HAL_I2C_Mem_Read+0x460>)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f002 fb77 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cb      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	2200      	movs	r2, #0
 8004802:	4955      	ldr	r1, [pc, #340]	@ (8004958 <HAL_I2C_Mem_Read+0x460>)
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f002 fb49 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e09d      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004888:	e04e      	b.n	8004928 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800488c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f002 fce0 	bl	8007254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e058      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d124      	bne.n	8004928 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d107      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	f47f aeb6 	bne.w	800469e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	00010004 	.word	0x00010004

0800495c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800497a:	f7fd fea5 	bl	80026c8 <HAL_GetTick>
 800497e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b20      	cmp	r3, #32
 800498a:	f040 8136 	bne.w	8004bfa <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800498e:	4b9d      	ldr	r3, [pc, #628]	@ (8004c04 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	08db      	lsrs	r3, r3, #3
 8004994:	4a9c      	ldr	r2, [pc, #624]	@ (8004c08 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	0a1a      	lsrs	r2, r3, #8
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009a      	lsls	r2, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d112      	bne.n	80049da <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
 80049d8:	e110      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d0df      	beq.n	80049a8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e102      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d007      	beq.n	8004a1c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2221      	movs	r2, #33	@ 0x21
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c0c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a5e:	897a      	ldrh	r2, [r7, #10]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004a64:	893a      	ldrh	r2, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80a9 	beq.w	8004bd2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02a      	beq.n	8004ade <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8c:	4a60      	ldr	r2, [pc, #384]	@ (8004c10 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a94:	4a5f      	ldr	r2, [pc, #380]	@ (8004c14 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004a96:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aac:	2200      	movs	r2, #0
 8004aae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	f7fe fd0b 	bl	80034e8 <HAL_DMA_Start_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d166      	bne.n	8004baa <HAL_I2C_Mem_Write_DMA+0x24e>
 8004adc:	e013      	b.n	8004b06 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e07a      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b06:	88f8      	ldrh	r0, [r7, #6]
 8004b08:	893a      	ldrh	r2, [r7, #8]
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2323      	movs	r3, #35	@ 0x23
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4603      	mov	r3, r0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f001 fe7e 	bl	8006818 <I2C_RequestMemoryWrite>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d022      	beq.n	8004b68 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fd36 	bl	8003598 <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b46:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e049      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b94:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e028      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e014      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000004 	.word	0x20000004
 8004c08:	14f8b589 	.word	0x14f8b589
 8004c0c:	ffff0000 	.word	0xffff0000
 8004c10:	08006b15 	.word	0x08006b15
 8004c14:	08006cd3 	.word	0x08006cd3

08004c18 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	@ 0x30
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7fd fd49 	bl	80026c8 <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	f040 8172 	bne.w	8004f2e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c4a:	4b93      	ldr	r3, [pc, #588]	@ (8004e98 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	4a92      	ldr	r2, [pc, #584]	@ (8004e9c <HAL_I2C_Mem_Read_DMA+0x284>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0a1a      	lsrs	r2, r3, #8
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d112      	bne.n	8004c96 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	e14c      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d0df      	beq.n	8004c64 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Read_DMA+0x9a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e13e      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d007      	beq.n	8004cd8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2222      	movs	r2, #34	@ 0x22
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	@ 0x40
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a62      	ldr	r2, [pc, #392]	@ (8004ea0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004d1a:	897a      	ldrh	r2, [r7, #10]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004d20:	893a      	ldrh	r2, [r7, #8]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80cc 	beq.w	8004ed4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02d      	beq.n	8004da0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	4a56      	ldr	r2, [pc, #344]	@ (8004ea4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	4a55      	ldr	r2, [pc, #340]	@ (8004ea8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d58:	2200      	movs	r2, #0
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	2200      	movs	r2, #0
 8004d6a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	4619      	mov	r1, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	f7fe fbad 	bl	80034e8 <HAL_DMA_Start_IT>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004d94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 8087 	bne.w	8004eac <HAL_I2C_Mem_Read_DMA+0x294>
 8004d9e:	e013      	b.n	8004dc8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b3      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004dc8:	88f8      	ldrh	r0, [r7, #6]
 8004dca:	893a      	ldrh	r2, [r7, #8]
 8004dcc:	8979      	ldrh	r1, [r7, #10]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	2323      	movs	r3, #35	@ 0x23
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f001 fdb3 	bl	8006944 <I2C_RequestMemoryRead>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d023      	beq.n	8004e2c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fbd5 	bl	8003598 <HAL_DMA_Abort_IT>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	2200      	movs	r2, #0
 8004dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e081      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d108      	bne.n	8004e46 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e007      	b.n	8004e56 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e82:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	e049      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x312>
 8004e96:	bf00      	nop
 8004e98:	20000004 	.word	0x20000004
 8004e9c:	14f8b589 	.word	0x14f8b589
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	08006b15 	.word	0x08006b15
 8004ea8:	08006cd3 	.word	0x08006cd3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	f043 0210 	orr.w	r2, r3, #16
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e02d      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004ed4:	88f8      	ldrh	r0, [r7, #6]
 8004ed6:	893a      	ldrh	r2, [r7, #8]
 8004ed8:	8979      	ldrh	r1, [r7, #10]
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2323      	movs	r3, #35	@ 0x23
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f001 fd2d 	bl	8006944 <I2C_RequestMemoryRead>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e01d      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f18:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3728      	adds	r7, #40	@ 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d003      	beq.n	8004f70 <HAL_I2C_EV_IRQHandler+0x38>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	f040 80c1 	bne.w	80050f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004f90:	d003      	beq.n	8004f9a <HAL_I2C_EV_IRQHandler+0x62>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004f98:	d101      	bne.n	8004f9e <HAL_I2C_EV_IRQHandler+0x66>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_I2C_EV_IRQHandler+0x68>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	f000 8132 	beq.w	800520a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_I2C_EV_IRQHandler+0x92>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	0a5b      	lsrs	r3, r3, #9
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f002 f9d5 	bl	800736c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fd87 	bl	8005ad6 <I2C_Master_SB>
 8004fc8:	e092      	b.n	80050f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	08db      	lsrs	r3, r3, #3
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_I2C_EV_IRQHandler+0xb2>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fdfd 	bl	8005be2 <I2C_Master_ADD10>
 8004fe8:	e082      	b.n	80050f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0xd2>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	0a5b      	lsrs	r3, r3, #9
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fe17 	bl	8005c36 <I2C_Master_ADDR>
 8005008:	e072      	b.n	80050f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03b      	beq.n	800508e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005024:	f000 80f3 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00f      	beq.n	8005054 <HAL_I2C_EV_IRQHandler+0x11c>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	0a9b      	lsrs	r3, r3, #10
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_I2C_EV_IRQHandler+0x11c>
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9df 	bl	8005410 <I2C_MasterTransmit_TXE>
 8005052:	e04d      	b.n	80050f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80d6 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	0a5b      	lsrs	r3, r3, #9
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80cf 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005070:	7bbb      	ldrb	r3, [r7, #14]
 8005072:	2b21      	cmp	r3, #33	@ 0x21
 8005074:	d103      	bne.n	800507e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa66 	bl	8005548 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800507c:	e0c7      	b.n	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	f040 80c4 	bne.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fad4 	bl	8005634 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508c:	e0bf      	b.n	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800509c:	f000 80b7 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	099b      	lsrs	r3, r3, #6
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <HAL_I2C_EV_IRQHandler+0x194>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <HAL_I2C_EV_IRQHandler+0x194>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb4d 	bl	8005764 <I2C_MasterReceive_RXNE>
 80050ca:	e011      	b.n	80050f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 809a 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8093 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc03 	bl	80058f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ee:	e08e      	b.n	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
 80050f0:	e08d      	b.n	800520e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	e007      	b.n	8005114 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0x20e>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	0a5b      	lsrs	r3, r3, #9
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 ffc8 	bl	80060d4 <I2C_Slave_ADDR>
 8005144:	e066      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_I2C_EV_IRQHandler+0x22e>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 f802 	bl	8006168 <I2C_Slave_STOPF>
 8005164:	e056      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005166:	7bbb      	ldrb	r3, [r7, #14]
 8005168:	2b21      	cmp	r3, #33	@ 0x21
 800516a:	d002      	beq.n	8005172 <HAL_I2C_EV_IRQHandler+0x23a>
 800516c:	7bbb      	ldrb	r3, [r7, #14]
 800516e:	2b29      	cmp	r3, #41	@ 0x29
 8005170:	d125      	bne.n	80051be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	09db      	lsrs	r3, r3, #7
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00f      	beq.n	800519e <HAL_I2C_EV_IRQHandler+0x266>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	0a9b      	lsrs	r3, r3, #10
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_I2C_EV_IRQHandler+0x266>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fede 	bl	8005f58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800519c:	e039      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d033      	beq.n	8005212 <HAL_I2C_EV_IRQHandler+0x2da>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	0a5b      	lsrs	r3, r3, #9
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d02d      	beq.n	8005212 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 ff0b 	bl	8005fd2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051bc:	e029      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00f      	beq.n	80051ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	0a9b      	lsrs	r3, r3, #10
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 ff16 	bl	8006014 <I2C_SlaveReceive_RXNE>
 80051e8:	e014      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	0a5b      	lsrs	r3, r3, #9
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 ff44 	bl	8006090 <I2C_SlaveReceive_BTF>
 8005208:	e004      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005212:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	@ 0x28
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800523c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x4e>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005266:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <HAL_I2C_ER_IRQHandler+0x78>
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005290:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	0a9b      	lsrs	r3, r3, #10
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d03f      	beq.n	800531e <HAL_I2C_ER_IRQHandler+0x104>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d039      	beq.n	800531e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052aa:	7efb      	ldrb	r3, [r7, #27]
 80052ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80052c4:	7ebb      	ldrb	r3, [r7, #26]
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d112      	bne.n	80052f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10f      	bne.n	80052f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	2b21      	cmp	r3, #33	@ 0x21
 80052d4:	d008      	beq.n	80052e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b29      	cmp	r3, #41	@ 0x29
 80052da:	d005      	beq.n	80052e8 <HAL_I2C_ER_IRQHandler+0xce>
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b28      	cmp	r3, #40	@ 0x28
 80052e0:	d106      	bne.n	80052f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b21      	cmp	r3, #33	@ 0x21
 80052e6:	d103      	bne.n	80052f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 f86d 	bl	80063c8 <I2C_Slave_AF>
 80052ee:	e016      	b.n	800531e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	f043 0304 	orr.w	r3, r3, #4
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005302:	7efb      	ldrb	r3, [r7, #27]
 8005304:	2b10      	cmp	r3, #16
 8005306:	d002      	beq.n	800530e <HAL_I2C_ER_IRQHandler+0xf4>
 8005308:	7efb      	ldrb	r3, [r7, #27]
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	d107      	bne.n	800531e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800531c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	0adb      	lsrs	r3, r3, #11
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <HAL_I2C_ER_IRQHandler+0x12e>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005346:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 f8a8 	bl	80064b0 <I2C_ITError>
  }
}
 8005360:	bf00      	nop
 8005362:	3728      	adds	r7, #40	@ 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
 80053c4:	4613      	mov	r3, r2
 80053c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005426:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d150      	bne.n	80054d8 <I2C_MasterTransmit_TXE+0xc8>
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b21      	cmp	r3, #33	@ 0x21
 800543a:	d14d      	bne.n	80054d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d01d      	beq.n	800547e <I2C_MasterTransmit_TXE+0x6e>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b20      	cmp	r3, #32
 8005446:	d01a      	beq.n	800547e <I2C_MasterTransmit_TXE+0x6e>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800544e:	d016      	beq.n	800547e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800545e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2211      	movs	r2, #17
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff76 	bl	8005368 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800547c:	e060      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800548c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d107      	bne.n	80054c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fb f857 	bl	8000574 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054c6:	e03b      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ff49 	bl	8005368 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054d6:	e033      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b21      	cmp	r3, #33	@ 0x21
 80054dc:	d005      	beq.n	80054ea <I2C_MasterTransmit_TXE+0xda>
 80054de:	7bbb      	ldrb	r3, [r7, #14]
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	d12d      	bne.n	8005540 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b22      	cmp	r3, #34	@ 0x22
 80054e8:	d12a      	bne.n	8005540 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d108      	bne.n	8005506 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005502:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005504:	e01c      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d103      	bne.n	800551a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f88e 	bl	8005634 <I2C_MemoryTransmit_TXE_BTF>
}
 8005518:	e012      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	781a      	ldrb	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800553e:	e7ff      	b.n	8005540 <I2C_MasterTransmit_TXE+0x130>
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b21      	cmp	r3, #33	@ 0x21
 8005560:	d164      	bne.n	800562c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005590:	e04c      	b.n	800562c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d01d      	beq.n	80055d4 <I2C_MasterTransmit_BTF+0x8c>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b20      	cmp	r3, #32
 800559c:	d01a      	beq.n	80055d4 <I2C_MasterTransmit_BTF+0x8c>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055a4:	d016      	beq.n	80055d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2211      	movs	r2, #17
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff fecb 	bl	8005368 <HAL_I2C_MasterTxCpltCallback>
}
 80055d2:	e02b      	b.n	800562c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b40      	cmp	r3, #64	@ 0x40
 800560c:	d107      	bne.n	800561e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fa ffac 	bl	8000574 <HAL_I2C_MemTxCpltCallback>
}
 800561c:	e006      	b.n	800562c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe9e 	bl	8005368 <HAL_I2C_MasterTxCpltCallback>
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11d      	bne.n	8005688 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10b      	bne.n	800566c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005658:	b2da      	uxtb	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800566a:	e077      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005670:	b29b      	uxth	r3, r3
 8005672:	121b      	asrs	r3, r3, #8
 8005674:	b2da      	uxtb	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005686:	e069      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10b      	bne.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056a6:	e059      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d152      	bne.n	8005756 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b22      	cmp	r3, #34	@ 0x22
 80056b4:	d10d      	bne.n	80056d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056d0:	e044      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b21      	cmp	r3, #33	@ 0x21
 80056e0:	d112      	bne.n	8005708 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005706:	e029      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d124      	bne.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b21      	cmp	r3, #33	@ 0x21
 8005716:	d121      	bne.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005726:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005736:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fa ff10 	bl	8000574 <HAL_I2C_MemTxCpltCallback>
}
 8005754:	e002      	b.n	800575c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fe fcc0 	bl	80040dc <I2C_Flush_DR>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b22      	cmp	r3, #34	@ 0x22
 8005776:	f040 80b9 	bne.w	80058ec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d921      	bls.n	80057d2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	f040 8096 	bne.w	80058ec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057d0:	e08c      	b.n	80058ec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d07f      	beq.n	80058da <I2C_MasterReceive_RXNE+0x176>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <I2C_MasterReceive_RXNE+0x82>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d179      	bne.n	80058da <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fd02 	bl	80071f0 <I2C_WaitOnSTOPRequestThroughIT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d14c      	bne.n	800588c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005800:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005810:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d10a      	bne.n	8005862 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fa fe9a 	bl	8000594 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005860:	e044      	b.n	80058ec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d002      	beq.n	8005876 <I2C_MasterReceive_RXNE+0x112>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d103      	bne.n	800587e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	@ 0x30
 800587c:	e002      	b.n	8005884 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2212      	movs	r2, #18
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fd79 	bl	800537c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800588a:	e02f      	b.n	80058ec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800589a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fd88 	bl	80053e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058d8:	e008      	b.n	80058ec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e8:	605a      	str	r2, [r3, #4]
}
 80058ea:	e7ff      	b.n	80058ec <I2C_MasterReceive_RXNE+0x188>
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b04      	cmp	r3, #4
 800590a:	d11b      	bne.n	8005944 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005942:	e0c4      	b.n	8005ace <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d129      	bne.n	80059a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800595c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d00a      	beq.n	800597a <I2C_MasterReceive_BTF+0x86>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d007      	beq.n	800597a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005978:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059a0:	e095      	b.n	8005ace <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d17d      	bne.n	8005aa8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d002      	beq.n	80059b8 <I2C_MasterReceive_BTF+0xc4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d108      	bne.n	80059ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e016      	b.n	80059f8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d002      	beq.n	80059d6 <I2C_MasterReceive_BTF+0xe2>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d108      	bne.n	80059e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e007      	b.n	80059f8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d10a      	bne.n	8005a7e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fa fd8c 	bl	8000594 <HAL_I2C_MemRxCpltCallback>
}
 8005a7c:	e027      	b.n	8005ace <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d002      	beq.n	8005a92 <I2C_MasterReceive_BTF+0x19e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d103      	bne.n	8005a9a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a98:	e002      	b.n	8005aa0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2212      	movs	r2, #18
 8005a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fc6b 	bl	800537c <HAL_I2C_MasterRxCpltCallback>
}
 8005aa6:	e012      	b.n	8005ace <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b40      	cmp	r3, #64	@ 0x40
 8005ae8:	d117      	bne.n	8005b1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b04:	e067      	b.n	8005bd6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]
}
 8005b18:	e05d      	b.n	8005bd6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b22:	d133      	bne.n	8005b8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b21      	cmp	r3, #33	@ 0x21
 8005b2e:	d109      	bne.n	8005b44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	e008      	b.n	8005b56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <I2C_Master_SB+0x92>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d032      	beq.n	8005bd6 <I2C_Master_SB+0x100>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d02d      	beq.n	8005bd6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b88:	605a      	str	r2, [r3, #4]
}
 8005b8a:	e024      	b.n	8005bd6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10e      	bne.n	8005bb2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	11db      	asrs	r3, r3, #7
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0306 	and.w	r3, r3, #6
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f063 030f 	orn	r3, r3, #15
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]
}
 8005bb0:	e011      	b.n	8005bd6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d10d      	bne.n	8005bd6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	11db      	asrs	r3, r3, #7
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0306 	and.w	r3, r3, #6
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f063 030e 	orn	r3, r3, #14
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	611a      	str	r2, [r3, #16]
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <I2C_Master_ADD10+0x26>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00c      	beq.n	8005c2a <I2C_Master_ADD10+0x48>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c28:	605a      	str	r2, [r3, #4]
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b091      	sub	sp, #68	@ 0x44
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b22      	cmp	r3, #34	@ 0x22
 8005c5e:	f040 8169 	bne.w	8005f34 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <I2C_Master_ADDR+0x54>
 8005c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c6e:	2b40      	cmp	r3, #64	@ 0x40
 8005c70:	d10b      	bne.n	8005c8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c72:	2300      	movs	r3, #0
 8005c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	e160      	b.n	8005f4c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d11d      	bne.n	8005cce <I2C_Master_ADDR+0x98>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c9a:	d118      	bne.n	8005cce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ccc:	e13e      	b.n	8005f4c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d113      	bne.n	8005d00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e115      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	f040 808a 	bne.w	8005e20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d12:	d137      	bne.n	8005d84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d32:	d113      	bne.n	8005d5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	e0e7      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	623b      	str	r3, [r7, #32]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e0d3      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d02e      	beq.n	8005de8 <I2C_Master_ADDR+0x1b2>
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d02b      	beq.n	8005de8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d92:	2b12      	cmp	r3, #18
 8005d94:	d102      	bne.n	8005d9c <I2C_Master_ADDR+0x166>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d125      	bne.n	8005de8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00e      	beq.n	8005dc0 <I2C_Master_ADDR+0x18a>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d00b      	beq.n	8005dc0 <I2C_Master_ADDR+0x18a>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d008      	beq.n	8005dc0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e007      	b.n	8005dd0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	e0a1      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e085      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d14d      	bne.n	8005ec6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d016      	beq.n	8005e5e <I2C_Master_ADDR+0x228>
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d013      	beq.n	8005e5e <I2C_Master_ADDR+0x228>
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d010      	beq.n	8005e5e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e4a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e007      	b.n	8005e6e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e6c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e7c:	d117      	bne.n	8005eae <I2C_Master_ADDR+0x278>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e84:	d00b      	beq.n	8005e9e <I2C_Master_ADDR+0x268>
 8005e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d008      	beq.n	8005e9e <I2C_Master_ADDR+0x268>
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d005      	beq.n	8005e9e <I2C_Master_ADDR+0x268>
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d002      	beq.n	8005e9e <I2C_Master_ADDR+0x268>
 8005e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d107      	bne.n	8005eae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e032      	b.n	8005f2c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee4:	d117      	bne.n	8005f16 <I2C_Master_ADDR+0x2e0>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005eec:	d00b      	beq.n	8005f06 <I2C_Master_ADDR+0x2d0>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d008      	beq.n	8005f06 <I2C_Master_ADDR+0x2d0>
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d005      	beq.n	8005f06 <I2C_Master_ADDR+0x2d0>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d002      	beq.n	8005f06 <I2C_Master_ADDR+0x2d0>
 8005f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d107      	bne.n	8005f16 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f32:	e00b      	b.n	8005f4c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	e7ff      	b.n	8005f4c <I2C_Master_ADDR+0x316>
 8005f4c:	bf00      	nop
 8005f4e:	3744      	adds	r7, #68	@ 0x44
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02b      	beq.n	8005fca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d114      	bne.n	8005fca <I2C_SlaveTransmit_TXE+0x72>
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b29      	cmp	r3, #41	@ 0x29
 8005fa4:	d111      	bne.n	8005fca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2221      	movs	r2, #33	@ 0x21
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2228      	movs	r2, #40	@ 0x28
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff f9e3 	bl	8005390 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006022:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d02c      	beq.n	8006088 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d114      	bne.n	8006088 <I2C_SlaveReceive_RXNE+0x74>
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b2a      	cmp	r3, #42	@ 0x2a
 8006062:	d111      	bne.n	8006088 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006072:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2222      	movs	r2, #34	@ 0x22
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2228      	movs	r2, #40	@ 0x28
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff f98e 	bl	80053a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d012      	beq.n	80060c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060ee:	2b28      	cmp	r3, #40	@ 0x28
 80060f0:	d127      	bne.n	8006142 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006100:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	089b      	lsrs	r3, r3, #2
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800610e:	2301      	movs	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	81bb      	strh	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006134:	89ba      	ldrh	r2, [r7, #12]
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff f93c 	bl	80053b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006140:	e00e      	b.n	8006160 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006176:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006186:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006188:	2300      	movs	r3, #0
 800618a:	60bb      	str	r3, [r7, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c4:	d172      	bne.n	80062ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b22      	cmp	r3, #34	@ 0x22
 80061ca:	d002      	beq.n	80061d2 <I2C_Slave_STOPF+0x6a>
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80061d0:	d135      	bne.n	800623e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f043 0204 	orr.w	r2, r3, #4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006204:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd fb70 	bl	80038f0 <HAL_DMA_GetState>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d049      	beq.n	80062aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	4a69      	ldr	r2, [pc, #420]	@ (80063c0 <I2C_Slave_STOPF+0x258>)
 800621c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	4618      	mov	r0, r3
 8006224:	f7fd f9b8 	bl	8003598 <HAL_DMA_Abort_IT>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d03d      	beq.n	80062aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800623c:	e035      	b.n	80062aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	f043 0204 	orr.w	r2, r3, #4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006270:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fb3a 	bl	80038f0 <HAL_DMA_GetState>
 800627c:	4603      	mov	r3, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	d014      	beq.n	80062ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006286:	4a4e      	ldr	r2, [pc, #312]	@ (80063c0 <I2C_Slave_STOPF+0x258>)
 8006288:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd f982 	bl	8003598 <HAL_DMA_Abort_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	e000      	b.n	80062ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d03e      	beq.n	8006334 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d112      	bne.n	80062ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d112      	bne.n	800631e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	f043 0204 	orr.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8b7 	bl	80064b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006342:	e039      	b.n	80063b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	2b2a      	cmp	r3, #42	@ 0x2a
 8006348:	d109      	bne.n	800635e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2228      	movs	r2, #40	@ 0x28
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff f823 	bl	80053a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b28      	cmp	r3, #40	@ 0x28
 8006368:	d111      	bne.n	800638e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a15      	ldr	r2, [pc, #84]	@ (80063c4 <I2C_Slave_STOPF+0x25c>)
 800636e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff f824 	bl	80053d4 <HAL_I2C_ListenCpltCallback>
}
 800638c:	e014      	b.n	80063b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006392:	2b22      	cmp	r3, #34	@ 0x22
 8006394:	d002      	beq.n	800639c <I2C_Slave_STOPF+0x234>
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b22      	cmp	r3, #34	@ 0x22
 800639a:	d10d      	bne.n	80063b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fe fff6 	bl	80053a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	08006d4d 	.word	0x08006d4d
 80063c4:	ffff0000 	.word	0xffff0000

080063c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d002      	beq.n	80063ea <I2C_Slave_AF+0x22>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d129      	bne.n	800643e <I2C_Slave_AF+0x76>
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b28      	cmp	r3, #40	@ 0x28
 80063ee:	d126      	bne.n	800643e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2e      	ldr	r2, [pc, #184]	@ (80064ac <I2C_Slave_AF+0xe4>)
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006404:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800640e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fe ffcc 	bl	80053d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800643c:	e031      	b.n	80064a2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b21      	cmp	r3, #33	@ 0x21
 8006442:	d129      	bne.n	8006498 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a19      	ldr	r2, [pc, #100]	@ (80064ac <I2C_Slave_AF+0xe4>)
 8006448:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2221      	movs	r2, #33	@ 0x21
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800646e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006478:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006488:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fd fe26 	bl	80040dc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fe ff7d 	bl	8005390 <HAL_I2C_SlaveTxCpltCallback>
}
 8006496:	e004      	b.n	80064a2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064a0:	615a      	str	r2, [r3, #20]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	ffff0000 	.word	0xffff0000

080064b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d002      	beq.n	80064d4 <I2C_ITError+0x24>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d10a      	bne.n	80064ea <I2C_ITError+0x3a>
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b22      	cmp	r3, #34	@ 0x22
 80064d8:	d107      	bne.n	80064ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064f0:	2b28      	cmp	r3, #40	@ 0x28
 80064f2:	d107      	bne.n	8006504 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2228      	movs	r2, #40	@ 0x28
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006502:	e015      	b.n	8006530 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006512:	d00a      	beq.n	800652a <I2C_ITError+0x7a>
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b60      	cmp	r3, #96	@ 0x60
 8006518:	d007      	beq.n	800652a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800653e:	d162      	bne.n	8006606 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800654e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d020      	beq.n	80065a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006562:	4a6a      	ldr	r2, [pc, #424]	@ (800670c <I2C_ITError+0x25c>)
 8006564:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656a:	4618      	mov	r0, r3
 800656c:	f7fd f814 	bl	8003598 <HAL_DMA_Abort_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8089 	beq.w	800668a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800659a:	4610      	mov	r0, r2
 800659c:	4798      	blx	r3
 800659e:	e074      	b.n	800668a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	4a59      	ldr	r2, [pc, #356]	@ (800670c <I2C_ITError+0x25c>)
 80065a6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fc fff3 	bl	8003598 <HAL_DMA_Abort_IT>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d068      	beq.n	800668a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c2:	2b40      	cmp	r3, #64	@ 0x40
 80065c4:	d10b      	bne.n	80065de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	e041      	b.n	800668a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b60      	cmp	r3, #96	@ 0x60
 8006610:	d125      	bne.n	800665e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d10b      	bne.n	8006646 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fe fed0 	bl	80053fc <HAL_I2C_AbortCpltCallback>
 800665c:	e015      	b.n	800668a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	d10b      	bne.n	8006684 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fe feaf 	bl	80053e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10e      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d113      	bne.n	8006704 <I2C_ITError+0x254>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b28      	cmp	r3, #40	@ 0x28
 80066e0:	d110      	bne.n	8006704 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006710 <I2C_ITError+0x260>)
 80066e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fe fe68 	bl	80053d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	08006d4d 	.word	0x08006d4d
 8006710:	ffff0000 	.word	0xffff0000

08006714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	460b      	mov	r3, r1
 8006722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b08      	cmp	r3, #8
 800672e:	d006      	beq.n	800673e <I2C_MasterRequestWrite+0x2a>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d003      	beq.n	800673e <I2C_MasterRequestWrite+0x2a>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800673c:	d108      	bne.n	8006750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e00b      	b.n	8006768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	2b12      	cmp	r3, #18
 8006756:	d107      	bne.n	8006768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fb91 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678e:	d103      	bne.n	8006798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e035      	b.n	8006808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067a4:	d108      	bne.n	80067b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a6:	897b      	ldrh	r3, [r7, #10]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067b4:	611a      	str	r2, [r3, #16]
 80067b6:	e01b      	b.n	80067f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067b8:	897b      	ldrh	r3, [r7, #10]
 80067ba:	11db      	asrs	r3, r3, #7
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0306 	and.w	r3, r3, #6
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f063 030f 	orn	r3, r3, #15
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	490e      	ldr	r1, [pc, #56]	@ (8006810 <I2C_MasterRequestWrite+0xfc>)
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fbda 	bl	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e010      	b.n	8006808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4907      	ldr	r1, [pc, #28]	@ (8006814 <I2C_MasterRequestWrite+0x100>)
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fbca 	bl	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	00010008 	.word	0x00010008
 8006814:	00010002 	.word	0x00010002

08006818 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	817b      	strh	r3, [r7, #10]
 800682a:	460b      	mov	r3, r1
 800682c:	813b      	strh	r3, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2200      	movs	r2, #0
 800684a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fb24 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006868:	d103      	bne.n	8006872 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e05f      	b.n	8006936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	492d      	ldr	r1, [pc, #180]	@ (8006940 <I2C_RequestMemoryWrite+0x128>)
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fb7f 	bl	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e04c      	b.n	8006936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b4:	6a39      	ldr	r1, [r7, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fc0a 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d107      	bne.n	80068da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e02b      	b.n	8006936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068e4:	893b      	ldrh	r3, [r7, #8]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	611a      	str	r2, [r3, #16]
 80068ee:	e021      	b.n	8006934 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006900:	6a39      	ldr	r1, [r7, #32]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fbe4 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	2b04      	cmp	r3, #4
 8006914:	d107      	bne.n	8006926 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e005      	b.n	8006936 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	00010002 	.word	0x00010002

08006944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	4608      	mov	r0, r1
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	817b      	strh	r3, [r7, #10]
 8006956:	460b      	mov	r3, r1
 8006958:	813b      	strh	r3, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800696c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800697c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2200      	movs	r2, #0
 8006986:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fa86 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a4:	d103      	bne.n	80069ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0aa      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	6a3a      	ldr	r2, [r7, #32]
 80069c6:	4952      	ldr	r1, [pc, #328]	@ (8006b10 <I2C_RequestMemoryRead+0x1cc>)
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fae1 	bl	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e097      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f0:	6a39      	ldr	r1, [r7, #32]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fb6c 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d107      	bne.n	8006a16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e076      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d105      	bne.n	8006a2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a20:	893b      	ldrh	r3, [r7, #8]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]
 8006a2a:	e021      	b.n	8006a70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3c:	6a39      	ldr	r1, [r7, #32]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fb46 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00d      	beq.n	8006a66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d107      	bne.n	8006a62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e050      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a66:	893b      	ldrh	r3, [r7, #8]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	6a39      	ldr	r1, [r7, #32]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fb2b 	bl	80070d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d107      	bne.n	8006a98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e035      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f9ef 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00d      	beq.n	8006ae0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad2:	d103      	bne.n	8006adc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e013      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ae0:	897b      	ldrh	r3, [r7, #10]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	6a3a      	ldr	r2, [r7, #32]
 8006af4:	4906      	ldr	r1, [pc, #24]	@ (8006b10 <I2C_RequestMemoryRead+0x1cc>)
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fa4a 	bl	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	00010002 	.word	0x00010002

08006b14 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b28:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b30:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006b46:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b54:	2200      	movs	r2, #0
 8006b56:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	2200      	movs	r2, #0
 8006b66:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006b68:	7cfb      	ldrb	r3, [r7, #19]
 8006b6a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006b6e:	2b21      	cmp	r3, #33	@ 0x21
 8006b70:	d007      	beq.n	8006b82 <I2C_DMAXferCplt+0x6e>
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006b78:	2b22      	cmp	r3, #34	@ 0x22
 8006b7a:	d131      	bne.n	8006be0 <I2C_DMAXferCplt+0xcc>
 8006b7c:	7cbb      	ldrb	r3, [r7, #18]
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d12e      	bne.n	8006be0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b90:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b98:	7cfb      	ldrb	r3, [r7, #19]
 8006b9a:	2b29      	cmp	r3, #41	@ 0x29
 8006b9c:	d10a      	bne.n	8006bb4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2221      	movs	r2, #33	@ 0x21
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2228      	movs	r2, #40	@ 0x28
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bac:	6978      	ldr	r0, [r7, #20]
 8006bae:	f7fe fbef 	bl	8005390 <HAL_I2C_SlaveTxCpltCallback>
 8006bb2:	e00c      	b.n	8006bce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bb8:	d109      	bne.n	8006bce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2222      	movs	r2, #34	@ 0x22
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2228      	movs	r2, #40	@ 0x28
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bc8:	6978      	ldr	r0, [r7, #20]
 8006bca:	f7fe fbeb 	bl	80053a4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006bdc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006bde:	e074      	b.n	8006cca <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d06e      	beq.n	8006cca <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c04:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006c14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c1c:	d009      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d006      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006c2a:	d002      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d107      	bne.n	8006c42 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c40:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c50:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c60:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006c70:	6978      	ldr	r0, [r7, #20]
 8006c72:	f7fe fbb9 	bl	80053e8 <HAL_I2C_ErrorCallback>
}
 8006c76:	e028      	b.n	8006cca <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b40      	cmp	r3, #64	@ 0x40
 8006c8a:	d10a      	bne.n	8006ca2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006c9a:	6978      	ldr	r0, [r7, #20]
 8006c9c:	f7f9 fc7a 	bl	8000594 <HAL_I2C_MemRxCpltCallback>
}
 8006ca0:	e013      	b.n	8006cca <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d002      	beq.n	8006cb6 <I2C_DMAXferCplt+0x1a2>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d103      	bne.n	8006cbe <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cbc:	e002      	b.n	8006cc4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2212      	movs	r2, #18
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cc4:	6978      	ldr	r0, [r7, #20]
 8006cc6:	f7fe fb59 	bl	800537c <HAL_I2C_MasterRxCpltCallback>
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cec:	2200      	movs	r2, #0
 8006cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fc fe03 	bl	800390c <HAL_DMA_GetError>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d01b      	beq.n	8006d44 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	f043 0210 	orr.w	r2, r3, #16
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7fe fb52 	bl	80053e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d66:	4b4b      	ldr	r3, [pc, #300]	@ (8006e94 <I2C_DMAAbort+0x148>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8006e98 <I2C_DMAAbort+0x14c>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0a1a      	lsrs	r2, r3, #8
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	00da      	lsls	r2, r3, #3
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	f043 0220 	orr.w	r2, r3, #32
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006d92:	e00a      	b.n	8006daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d0ea      	beq.n	8006d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db6:	2200      	movs	r2, #0
 8006db8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dec:	2200      	movs	r2, #0
 8006dee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b60      	cmp	r3, #96	@ 0x60
 8006e1a:	d10e      	bne.n	8006e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7fe fae2 	bl	80053fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e38:	e027      	b.n	8006e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e40:	2b28      	cmp	r3, #40	@ 0x28
 8006e42:	d117      	bne.n	8006e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2228      	movs	r2, #40	@ 0x28
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e72:	e007      	b.n	8006e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	f7fe faaf 	bl	80053e8 <HAL_I2C_ErrorCallback>
}
 8006e8a:	bf00      	nop
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000004 	.word	0x20000004
 8006e98:	14f8b589 	.word	0x14f8b589

08006e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eac:	e048      	b.n	8006f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb4:	d044      	beq.n	8006f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb6:	f7fb fc07 	bl	80026c8 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d139      	bne.n	8006f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d10d      	bne.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	43da      	mvns	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	e00c      	b.n	8006f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	43da      	mvns	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4013      	ands	r3, r2
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d116      	bne.n	8006f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e023      	b.n	8006f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10d      	bne.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	43da      	mvns	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4013      	ands	r3, r2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2301      	moveq	r3, #1
 8006f5e:	2300      	movne	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	e00c      	b.n	8006f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	43da      	mvns	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d093      	beq.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f9e:	e071      	b.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fae:	d123      	bne.n	8006ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe4:	f043 0204 	orr.w	r2, r3, #4
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e067      	b.n	80070c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d041      	beq.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007000:	f7fb fb62 	bl	80026c8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d136      	bne.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10c      	bne.n	800703a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	43da      	mvns	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf14      	ite	ne
 8007032:	2301      	movne	r3, #1
 8007034:	2300      	moveq	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	e00b      	b.n	8007052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	43da      	mvns	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4013      	ands	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e021      	b.n	80070c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10c      	bne.n	80070a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	43da      	mvns	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	e00b      	b.n	80070c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	43da      	mvns	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4013      	ands	r3, r2
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bf14      	ite	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	2300      	moveq	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f47f af6d 	bne.w	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070dc:	e034      	b.n	8007148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f915 	bl	800730e <I2C_IsAcknowledgeFailed>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e034      	b.n	8007158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d028      	beq.n	8007148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f6:	f7fb fae7 	bl	80026c8 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11d      	bne.n	8007148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d016      	beq.n	8007148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e007      	b.n	8007158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007152:	2b80      	cmp	r3, #128	@ 0x80
 8007154:	d1c3      	bne.n	80070de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800716c:	e034      	b.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f8cd 	bl	800730e <I2C_IsAcknowledgeFailed>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e034      	b.n	80071e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d028      	beq.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fb fa9f 	bl	80026c8 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11d      	bne.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d016      	beq.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e007      	b.n	80071e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d1c3      	bne.n	800716e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80071fc:	4b13      	ldr	r3, [pc, #76]	@ (800724c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	08db      	lsrs	r3, r3, #3
 8007202:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	0a1a      	lsrs	r2, r3, #8
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b01      	subs	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d107      	bne.n	800722e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	f043 0220 	orr.w	r2, r3, #32
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e008      	b.n	8007240 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723c:	d0e9      	beq.n	8007212 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000004 	.word	0x20000004
 8007250:	14f8b589 	.word	0x14f8b589

08007254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007260:	e049      	b.n	80072f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b10      	cmp	r3, #16
 800726e:	d119      	bne.n	80072a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0210 	mvn.w	r2, #16
 8007278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e030      	b.n	8007306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a4:	f7fb fa10 	bl	80026c8 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d302      	bcc.n	80072ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d11d      	bne.n	80072f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c4:	2b40      	cmp	r3, #64	@ 0x40
 80072c6:	d016      	beq.n	80072f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e007      	b.n	8007306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	d1ae      	bne.n	8007262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007324:	d11b      	bne.n	800735e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800732e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f043 0204 	orr.w	r2, r3, #4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007378:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800737c:	d103      	bne.n	8007386 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007384:	e007      	b.n	8007396 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800738e:	d102      	bne.n	8007396 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2208      	movs	r2, #8
 8007394:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af02      	add	r7, sp, #8
 80073a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e101      	b.n	80075b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f006 fb0a 	bl	800d9e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2203      	movs	r2, #3
 80073d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e2:	d102      	bne.n	80073ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 fe61 	bl	800a0b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	7c1a      	ldrb	r2, [r3, #16]
 80073fc:	f88d 2000 	strb.w	r2, [sp]
 8007400:	3304      	adds	r3, #4
 8007402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007404:	f002 fd40 	bl	8009e88 <USB_CoreInit>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e0ce      	b.n	80075b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f002 fe59 	bl	800a0d8 <USB_SetCurrentMode>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0bf      	b.n	80075b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	e04a      	b.n	80074d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3315      	adds	r3, #21
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007452:	7bfa      	ldrb	r2, [r7, #15]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3314      	adds	r3, #20
 8007462:	7bfa      	ldrb	r2, [r7, #15]
 8007464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007466:	7bfa      	ldrb	r2, [r7, #15]
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	b298      	uxth	r0, r3
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	332e      	adds	r3, #46	@ 0x2e
 800747a:	4602      	mov	r2, r0
 800747c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800747e:	7bfa      	ldrb	r2, [r7, #15]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	3318      	adds	r3, #24
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007492:	7bfa      	ldrb	r2, [r7, #15]
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	331c      	adds	r3, #28
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80074a6:	7bfa      	ldrb	r2, [r7, #15]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	3320      	adds	r3, #32
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80074ba:	7bfa      	ldrb	r2, [r7, #15]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3324      	adds	r3, #36	@ 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	3301      	adds	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d3af      	bcc.n	800743e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	e044      	b.n	800756e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074fa:	7bfa      	ldrb	r2, [r7, #15]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800750c:	7bfa      	ldrb	r2, [r7, #15]
 800750e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007510:	7bfa      	ldrb	r2, [r7, #15]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007552:	7bfa      	ldrb	r2, [r7, #15]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	3301      	adds	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	791b      	ldrb	r3, [r3, #4]
 8007572:	7bfa      	ldrb	r2, [r7, #15]
 8007574:	429a      	cmp	r2, r3
 8007576:	d3b5      	bcc.n	80074e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7c1a      	ldrb	r2, [r3, #16]
 8007580:	f88d 2000 	strb.w	r2, [sp]
 8007584:	3304      	adds	r3, #4
 8007586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007588:	f002 fdf2 	bl	800a170 <USB_DevInit>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e00c      	b.n	80075b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f003 fe3c 	bl	800b22e <USB_DevDisconnect>

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_PCD_Start+0x1c>
 80075d8:	2302      	movs	r3, #2
 80075da:	e022      	b.n	8007622 <HAL_PCD_Start+0x62>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d009      	beq.n	8007604 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f002 fd43 	bl	800a094 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f003 fdea 	bl	800b1ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800762a:	b590      	push	{r4, r7, lr}
 800762c:	b08d      	sub	sp, #52	@ 0x34
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f003 fea8 	bl	800b396 <USB_GetMode>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 848c 	bne.w	8007f66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f003 fe0c 	bl	800b270 <USB_ReadInterrupts>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8482 	beq.w	8007f64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f003 fdf9 	bl	800b270 <USB_ReadInterrupts>
 800767e:	4603      	mov	r3, r0
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b02      	cmp	r3, #2
 8007686:	d107      	bne.n	8007698 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f002 0202 	and.w	r2, r2, #2
 8007696:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f003 fde7 	bl	800b270 <USB_ReadInterrupts>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d161      	bne.n	8007770 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0210 	bic.w	r2, r2, #16
 80076ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3304      	adds	r3, #4
 80076da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80076e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076e6:	d124      	bne.n	8007732 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d035      	beq.n	8007760 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80076fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6a38      	ldr	r0, [r7, #32]
 8007708:	f003 fc1e 	bl	800af48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	091b      	lsrs	r3, r3, #4
 8007714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007718:	441a      	add	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800772a:	441a      	add	r2, r3
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	615a      	str	r2, [r3, #20]
 8007730:	e016      	b.n	8007760 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007738:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800773c:	d110      	bne.n	8007760 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007744:	2208      	movs	r2, #8
 8007746:	4619      	mov	r1, r3
 8007748:	6a38      	ldr	r0, [r7, #32]
 800774a:	f003 fbfd 	bl	800af48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800775a:	441a      	add	r2, r3
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0210 	orr.w	r2, r2, #16
 800776e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fd7b 	bl	800b270 <USB_ReadInterrupts>
 800777a:	4603      	mov	r3, r0
 800777c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007780:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007784:	f040 80a7 	bne.w	80078d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f003 fd80 	bl	800b296 <USB_ReadDevAllOutEpInterrupt>
 8007796:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007798:	e099      	b.n	80078ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 808e 	beq.w	80078c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f003 fda4 	bl	800b2fe <USB_ReadDevOutEPInterrupt>
 80077b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ce:	461a      	mov	r2, r3
 80077d0:	2301      	movs	r3, #1
 80077d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80077d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fea4 	bl	8008524 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f2:	461a      	mov	r2, r3
 80077f4:	2308      	movs	r3, #8
 80077f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80077f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 ff7a 	bl	80086f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007816:	461a      	mov	r2, r3
 8007818:	2310      	movs	r3, #16
 800781a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d030      	beq.n	8007888 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782e:	2b80      	cmp	r3, #128	@ 0x80
 8007830:	d109      	bne.n	8007846 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007844:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007848:	4613      	mov	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d108      	bne.n	8007876 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f006 f9b5 	bl	800dbe0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007882:	461a      	mov	r2, r3
 8007884:	2302      	movs	r3, #2
 8007886:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789e:	461a      	mov	r2, r3
 80078a0:	2320      	movs	r3, #32
 80078a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ba:	461a      	mov	r2, r3
 80078bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80078c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	3301      	adds	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f47f af62 	bne.w	800779a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f003 fcc8 	bl	800b270 <USB_ReadInterrupts>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078ea:	f040 80db 	bne.w	8007aa4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f003 fce9 	bl	800b2ca <USB_ReadDevAllInEpInterrupt>
 80078f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80078fe:	e0cd      	b.n	8007a9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80c2 	beq.w	8007a90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f003 fd0f 	bl	800b33a <USB_ReadDevInEPInterrupt>
 800791c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d057      	beq.n	80079d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	2201      	movs	r2, #1
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	43db      	mvns	r3, r3
 8007942:	69f9      	ldr	r1, [r7, #28]
 8007944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007948:	4013      	ands	r3, r2
 800794a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007958:	461a      	mov	r2, r3
 800795a:	2301      	movs	r3, #1
 800795c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	799b      	ldrb	r3, [r3, #6]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d132      	bne.n	80079cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800796a:	4613      	mov	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	3320      	adds	r3, #32
 8007976:	6819      	ldr	r1, [r3, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800797c:	4613      	mov	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4403      	add	r3, r0
 8007986:	331c      	adds	r3, #28
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4419      	add	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007990:	4613      	mov	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4403      	add	r3, r0
 800799a:	3320      	adds	r3, #32
 800799c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d113      	bne.n	80079cc <HAL_PCD_IRQHandler+0x3a2>
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	3324      	adds	r3, #36	@ 0x24
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d108      	bne.n	80079cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079c4:	461a      	mov	r2, r3
 80079c6:	2101      	movs	r1, #1
 80079c8:	f003 fd16 	bl	800b3f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f006 f889 	bl	800daea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d008      	beq.n	80079f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	461a      	mov	r2, r3
 80079f0:	2308      	movs	r3, #8
 80079f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d008      	beq.n	8007a10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	461a      	mov	r2, r3
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d023      	beq.n	8007a7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007a36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a38:	6a38      	ldr	r0, [r7, #32]
 8007a3a:	f002 fcfd 	bl	800a438 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	3310      	adds	r3, #16
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3304      	adds	r3, #4
 8007a50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d108      	bne.n	8007a6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f006 f8cc 	bl	800dc04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fcbd 	bl	800840a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	3301      	adds	r3, #1
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f47f af2e 	bne.w	8007900 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f003 fbe1 	bl	800b270 <USB_ReadInterrupts>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab8:	d122      	bne.n	8007b00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d108      	bne.n	8007aea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fea4 	bl	8008830 <HAL_PCDEx_LPM_Callback>
 8007ae8:	e002      	b.n	8007af0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f006 f86a 	bl	800dbc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695a      	ldr	r2, [r3, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f003 fbb3 	bl	800b270 <USB_ReadInterrupts>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b14:	d112      	bne.n	8007b3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d102      	bne.n	8007b2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f006 f826 	bl	800db78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695a      	ldr	r2, [r3, #20]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007b3a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f003 fb95 	bl	800b270 <USB_ReadInterrupts>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b50:	f040 80b7 	bne.w	8007cc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b62:	f023 0301 	bic.w	r3, r3, #1
 8007b66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2110      	movs	r1, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 fc62 	bl	800a438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b74:	2300      	movs	r3, #0
 8007b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b78:	e046      	b.n	8007c08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b86:	461a      	mov	r2, r3
 8007b88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b9e:	0151      	lsls	r1, r2, #5
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ba8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007bc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c04:	3301      	adds	r3, #1
 8007c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d3b2      	bcc.n	8007b7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c22:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007c26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7bdb      	ldrb	r3, [r3, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d016      	beq.n	8007c5e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c40:	f043 030b 	orr.w	r3, r3, #11
 8007c44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c56:	f043 030b 	orr.w	r3, r3, #11
 8007c5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c5c:	e015      	b.n	8007c8a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c70:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007c74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c84:	f043 030b 	orr.w	r3, r3, #11
 8007c88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c98:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007cac:	461a      	mov	r2, r3
 8007cae:	f003 fba3 	bl	800b3f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f003 fad2 	bl	800b270 <USB_ReadInterrupts>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cd6:	d123      	bne.n	8007d20 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f003 fb68 	bl	800b3b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f002 fc1f 	bl	800a52a <USB_GetDevSpeed>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681c      	ldr	r4, [r3, #0]
 8007cf8:	f001 f9ca 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 8007cfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d02:	461a      	mov	r2, r3
 8007d04:	4620      	mov	r0, r4
 8007d06:	f002 f923 	bl	8009f50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f005 ff15 	bl	800db3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695a      	ldr	r2, [r3, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f003 faa3 	bl	800b270 <USB_ReadInterrupts>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d10a      	bne.n	8007d4a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f005 fef2 	bl	800db1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f002 0208 	and.w	r2, r2, #8
 8007d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f003 fa8e 	bl	800b270 <USB_ReadInterrupts>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5a:	2b80      	cmp	r3, #128	@ 0x80
 8007d5c:	d123      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6e:	e014      	b.n	8007d9a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d74:	4613      	mov	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d105      	bne.n	8007d94 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb0a 	bl	80083a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	3301      	adds	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d3e4      	bcc.n	8007d70 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f003 fa60 	bl	800b270 <USB_ReadInterrupts>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dba:	d13c      	bne.n	8007e36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc0:	e02b      	b.n	8007e1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	3318      	adds	r3, #24
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d115      	bne.n	8007e14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007de8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da12      	bge.n	8007e14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df2:	4613      	mov	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3317      	adds	r3, #23
 8007dfe:	2201      	movs	r2, #1
 8007e00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 faca 	bl	80083a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	3301      	adds	r3, #1
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d3cd      	bcc.n	8007dc2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f003 fa18 	bl	800b270 <USB_ReadInterrupts>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e4a:	d156      	bne.n	8007efa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e50:	e045      	b.n	8007ede <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d12e      	bne.n	8007ed8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007e7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	da2b      	bge.n	8007ed8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	0c1a      	lsrs	r2, r3, #16
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007e8a:	4053      	eors	r3, r2
 8007e8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d121      	bne.n	8007ed8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e98:	4613      	mov	r3, r2
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ed4:	6053      	str	r3, [r2, #4]
            break;
 8007ed6:	e008      	b.n	8007eea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	791b      	ldrb	r3, [r3, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d3b3      	bcc.n	8007e52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695a      	ldr	r2, [r3, #20]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f003 f9b6 	bl	800b270 <USB_ReadInterrupts>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d10a      	bne.n	8007f26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f005 fe89 	bl	800dc28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f003 f9a0 	bl	800b270 <USB_ReadInterrupts>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d115      	bne.n	8007f66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f005 fe79 	bl	800dc44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6859      	ldr	r1, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	e000      	b.n	8007f66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007f64:	bf00      	nop
    }
  }
}
 8007f66:	3734      	adds	r7, #52	@ 0x34
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd90      	pop	{r4, r7, pc}

08007f6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_PCD_SetAddress+0x1a>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e012      	b.n	8007fac <HAL_PCD_SetAddress+0x40>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f003 f8ff 	bl	800b1a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	70fb      	strb	r3, [r7, #3]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	803b      	strh	r3, [r7, #0]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da0f      	bge.n	8007ffa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 020f 	and.w	r2, r3, #15
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	3310      	adds	r3, #16
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	3304      	adds	r3, #4
 8007ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	705a      	strb	r2, [r3, #1]
 8007ff8:	e00f      	b.n	800801a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	b2da      	uxtb	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008026:	883b      	ldrh	r3, [r7, #0]
 8008028:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	78ba      	ldrb	r2, [r7, #2]
 8008034:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008048:	78bb      	ldrb	r3, [r7, #2]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d102      	bne.n	8008054 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_PCD_EP_Open+0xae>
 800805e:	2302      	movs	r3, #2
 8008060:	e00e      	b.n	8008080 <HAL_PCD_EP_Open+0xcc>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	4618      	mov	r0, r3
 8008072:	f002 fa7f 	bl	800a574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800807e:	7afb      	ldrb	r3, [r7, #11]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0f      	bge.n	80080bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	f003 020f 	and.w	r2, r3, #15
 80080a2:	4613      	mov	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	3310      	adds	r3, #16
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	705a      	strb	r2, [r3, #1]
 80080ba:	e00f      	b.n	80080dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	4613      	mov	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	3304      	adds	r3, #4
 80080d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_PCD_EP_Close+0x6e>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e00e      	b.n	8008114 <HAL_PCD_EP_Close+0x8c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	4618      	mov	r0, r3
 8008106:	f002 fabd 	bl	800a684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	460b      	mov	r3, r1
 800812a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	f003 020f 	and.w	r2, r3, #15
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2200      	movs	r2, #0
 8008156:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	b2da      	uxtb	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	799b      	ldrb	r3, [r3, #6]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d102      	bne.n	8008178 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	799b      	ldrb	r3, [r3, #6]
 8008180:	461a      	mov	r2, r3
 8008182:	6979      	ldr	r1, [r7, #20]
 8008184:	f002 fb5a 	bl	800a83c <USB_EPStartXfer>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 020f 	and.w	r2, r3, #15
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80081b4:	681b      	ldr	r3, [r3, #0]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	460b      	mov	r3, r1
 80081d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081d2:	7afb      	ldrb	r3, [r7, #11]
 80081d4:	f003 020f 	and.w	r2, r3, #15
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	3310      	adds	r3, #16
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	3304      	adds	r3, #4
 80081e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2201      	movs	r2, #1
 8008200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008202:	7afb      	ldrb	r3, [r7, #11]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	b2da      	uxtb	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	799b      	ldrb	r3, [r3, #6]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d102      	bne.n	800821c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	799b      	ldrb	r3, [r3, #6]
 8008224:	461a      	mov	r2, r3
 8008226:	6979      	ldr	r1, [r7, #20]
 8008228:	f002 fb08 	bl	800a83c <USB_EPStartXfer>

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	7912      	ldrb	r2, [r2, #4]
 800824c:	4293      	cmp	r3, r2
 800824e:	d901      	bls.n	8008254 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e04f      	b.n	80082f4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	da0f      	bge.n	800827c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	f003 020f 	and.w	r2, r3, #15
 8008262:	4613      	mov	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	3310      	adds	r3, #16
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	3304      	adds	r3, #4
 8008272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	705a      	strb	r2, [r3, #1]
 800827a:	e00d      	b.n	8008298 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	3304      	adds	r3, #4
 8008290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_PCD_EP_SetStall+0x82>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e01d      	b.n	80082f4 <HAL_PCD_EP_SetStall+0xbe>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68f9      	ldr	r1, [r7, #12]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f002 fe96 	bl	800aff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d109      	bne.n	80082ea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7999      	ldrb	r1, [r3, #6]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80082e4:	461a      	mov	r2, r3
 80082e6:	f003 f887 	bl	800b3f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	7912      	ldrb	r2, [r2, #4]
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e042      	b.n	80083a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800831a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da0f      	bge.n	8008342 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 020f 	and.w	r2, r3, #15
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	3310      	adds	r3, #16
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	3304      	adds	r3, #4
 8008338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	705a      	strb	r2, [r3, #1]
 8008340:	e00f      	b.n	8008362 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	f003 020f 	and.w	r2, r3, #15
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	b2da      	uxtb	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_PCD_EP_ClrStall+0x86>
 800837e:	2302      	movs	r3, #2
 8008380:	e00e      	b.n	80083a0 <HAL_PCD_EP_ClrStall+0xa4>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	4618      	mov	r0, r3
 8008392:	f002 fe9f 	bl	800b0d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80083b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	da0c      	bge.n	80083d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	f003 020f 	and.w	r2, r3, #15
 80083c2:	4613      	mov	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	3310      	adds	r3, #16
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4413      	add	r3, r2
 80083d0:	3304      	adds	r3, #4
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e00c      	b.n	80083f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4413      	add	r3, r2
 80083ec:	3304      	adds	r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68f9      	ldr	r1, [r7, #12]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f002 fcbe 	bl	800ad78 <USB_EPStopXfer>
 80083fc:	4603      	mov	r3, r0
 80083fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008400:	7afb      	ldrb	r3, [r7, #11]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b08a      	sub	sp, #40	@ 0x28
 800840e:	af02      	add	r7, sp, #8
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	3310      	adds	r3, #16
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	3304      	adds	r3, #4
 8008430:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	429a      	cmp	r2, r3
 800843c:	d901      	bls.n	8008442 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e06b      	b.n	800851a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691a      	ldr	r2, [r3, #16]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	429a      	cmp	r2, r3
 8008456:	d902      	bls.n	800845e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3303      	adds	r3, #3
 8008462:	089b      	lsrs	r3, r3, #2
 8008464:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008466:	e02a      	b.n	80084be <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	429a      	cmp	r2, r3
 800847c:	d902      	bls.n	8008484 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	3303      	adds	r3, #3
 8008488:	089b      	lsrs	r3, r3, #2
 800848a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68d9      	ldr	r1, [r3, #12]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	b2da      	uxtb	r2, r3
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	4603      	mov	r3, r0
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	f002 fd13 	bl	800aecc <USB_WritePacket>

    ep->xfer_buff  += len;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	441a      	add	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	441a      	add	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d809      	bhi.n	80084e8 <PCD_WriteEmptyTxFifo+0xde>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	695a      	ldr	r2, [r3, #20]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80084dc:	429a      	cmp	r2, r3
 80084de:	d203      	bcs.n	80084e8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1bf      	bne.n	8008468 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d811      	bhi.n	8008518 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	2201      	movs	r2, #1
 80084fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008500:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	43db      	mvns	r3, r3
 800850e:	6939      	ldr	r1, [r7, #16]
 8008510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008514:	4013      	ands	r3, r2
 8008516:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	333c      	adds	r3, #60	@ 0x3c
 800853c:	3304      	adds	r3, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	799b      	ldrb	r3, [r3, #6]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d17b      	bne.n	8008652 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d015      	beq.n	8008590 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4a61      	ldr	r2, [pc, #388]	@ (80086ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008568:	4293      	cmp	r3, r2
 800856a:	f240 80b9 	bls.w	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80b3 	beq.w	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800858c:	6093      	str	r3, [r2, #8]
 800858e:	e0a7      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a6:	461a      	mov	r2, r3
 80085a8:	2320      	movs	r3, #32
 80085aa:	6093      	str	r3, [r2, #8]
 80085ac:	e098      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8093 	bne.w	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	4a4b      	ldr	r2, [pc, #300]	@ (80086ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d90f      	bls.n	80085e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d8:	461a      	mov	r2, r3
 80085da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085de:	6093      	str	r3, [r2, #8]
 80085e0:	e07e      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	3304      	adds	r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	0159      	lsls	r1, r3, #5
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	440b      	add	r3, r1
 8008604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d114      	bne.n	8008644 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800862c:	461a      	mov	r2, r3
 800862e:	2101      	movs	r1, #1
 8008630:	f002 fee2 	bl	800b3f8 <USB_EP0_OutStart>
 8008634:	e006      	b.n	8008644 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	441a      	add	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f005 fa32 	bl	800dab4 <HAL_PCD_DataOutStageCallback>
 8008650:	e046      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d124      	bne.n	80086a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008670:	461a      	mov	r2, r3
 8008672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008676:	6093      	str	r3, [r2, #8]
 8008678:	e032      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008690:	461a      	mov	r2, r3
 8008692:	2320      	movs	r3, #32
 8008694:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f005 fa09 	bl	800dab4 <HAL_PCD_DataOutStageCallback>
 80086a2:	e01d      	b.n	80086e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d114      	bne.n	80086d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	4613      	mov	r3, r2
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d108      	bne.n	80086d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80086cc:	461a      	mov	r2, r3
 80086ce:	2100      	movs	r1, #0
 80086d0:	f002 fe92 	bl	800b3f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f005 f9ea 	bl	800dab4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	4f54300a 	.word	0x4f54300a
 80086f0:	4f54310a 	.word	0x4f54310a

080086f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	333c      	adds	r3, #60	@ 0x3c
 800870c:	3304      	adds	r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a15      	ldr	r2, [pc, #84]	@ (800877c <PCD_EP_OutSetupPacket_int+0x88>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d90e      	bls.n	8008748 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008740:	461a      	mov	r2, r3
 8008742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008746:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f005 f9a1 	bl	800da90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <PCD_EP_OutSetupPacket_int+0x88>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d90c      	bls.n	8008770 <PCD_EP_OutSetupPacket_int+0x7c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	799b      	ldrb	r3, [r3, #6]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d108      	bne.n	8008770 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008768:	461a      	mov	r2, r3
 800876a:	2101      	movs	r1, #1
 800876c:	f002 fe44 	bl	800b3f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	4f54300a 	.word	0x4f54300a

08008780 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	4613      	mov	r3, r2
 800878e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008796:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d107      	bne.n	80087ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800879e:	883b      	ldrh	r3, [r7, #0]
 80087a0:	0419      	lsls	r1, r3, #16
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80087ac:	e028      	b.n	8008800 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	4413      	add	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
 80087c0:	e00d      	b.n	80087de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3340      	adds	r3, #64	@ 0x40
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	0c1b      	lsrs	r3, r3, #16
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	4413      	add	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	3301      	adds	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	7bfa      	ldrb	r2, [r7, #15]
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d3ec      	bcc.n	80087c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80087e8:	883b      	ldrh	r3, [r7, #0]
 80087ea:	0418      	lsls	r0, r3, #16
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	4302      	orrs	r2, r0
 80087f8:	3340      	adds	r3, #64	@ 0x40
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	887a      	ldrh	r2, [r7, #2]
 8008820:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e267      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d075      	beq.n	8008952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008866:	4b88      	ldr	r3, [pc, #544]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 030c 	and.w	r3, r3, #12
 800886e:	2b04      	cmp	r3, #4
 8008870:	d00c      	beq.n	800888c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008872:	4b85      	ldr	r3, [pc, #532]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800887a:	2b08      	cmp	r3, #8
 800887c:	d112      	bne.n	80088a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800887e:	4b82      	ldr	r3, [pc, #520]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800888a:	d10b      	bne.n	80088a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888c:	4b7e      	ldr	r3, [pc, #504]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05b      	beq.n	8008950 <HAL_RCC_OscConfig+0x108>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d157      	bne.n	8008950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e242      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ac:	d106      	bne.n	80088bc <HAL_RCC_OscConfig+0x74>
 80088ae:	4b76      	ldr	r3, [pc, #472]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a75      	ldr	r2, [pc, #468]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e01d      	b.n	80088f8 <HAL_RCC_OscConfig+0xb0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088c4:	d10c      	bne.n	80088e0 <HAL_RCC_OscConfig+0x98>
 80088c6:	4b70      	ldr	r3, [pc, #448]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a6f      	ldr	r2, [pc, #444]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a6c      	ldr	r2, [pc, #432]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e00b      	b.n	80088f8 <HAL_RCC_OscConfig+0xb0>
 80088e0:	4b69      	ldr	r3, [pc, #420]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a68      	ldr	r2, [pc, #416]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	4b66      	ldr	r3, [pc, #408]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a65      	ldr	r2, [pc, #404]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80088f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008900:	f7f9 fee2 	bl	80026c8 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008908:	f7f9 fede 	bl	80026c8 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b64      	cmp	r3, #100	@ 0x64
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e207      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800891a:	4b5b      	ldr	r3, [pc, #364]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <HAL_RCC_OscConfig+0xc0>
 8008926:	e014      	b.n	8008952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008928:	f7f9 fece 	bl	80026c8 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008930:	f7f9 feca 	bl	80026c8 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b64      	cmp	r3, #100	@ 0x64
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e1f3      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008942:	4b51      	ldr	r3, [pc, #324]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f0      	bne.n	8008930 <HAL_RCC_OscConfig+0xe8>
 800894e:	e000      	b.n	8008952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d063      	beq.n	8008a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800895e:	4b4a      	ldr	r3, [pc, #296]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 030c 	and.w	r3, r3, #12
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800896a:	4b47      	ldr	r3, [pc, #284]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008972:	2b08      	cmp	r3, #8
 8008974:	d11c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008976:	4b44      	ldr	r3, [pc, #272]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d116      	bne.n	80089b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008982:	4b41      	ldr	r3, [pc, #260]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_RCC_OscConfig+0x152>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d001      	beq.n	800899a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e1c7      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800899a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4937      	ldr	r1, [pc, #220]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ae:	e03a      	b.n	8008a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d020      	beq.n	80089fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089b8:	4b34      	ldr	r3, [pc, #208]	@ (8008a8c <HAL_RCC_OscConfig+0x244>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089be:	f7f9 fe83 	bl	80026c8 <HAL_GetTick>
 80089c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089c4:	e008      	b.n	80089d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089c6:	f7f9 fe7f 	bl	80026c8 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e1a8      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0f0      	beq.n	80089c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089e4:	4b28      	ldr	r3, [pc, #160]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4925      	ldr	r1, [pc, #148]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	e015      	b.n	8008a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089fa:	4b24      	ldr	r3, [pc, #144]	@ (8008a8c <HAL_RCC_OscConfig+0x244>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7f9 fe62 	bl	80026c8 <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a08:	f7f9 fe5e 	bl	80026c8 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e187      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d036      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a3a:	4b15      	ldr	r3, [pc, #84]	@ (8008a90 <HAL_RCC_OscConfig+0x248>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7f9 fe42 	bl	80026c8 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a48:	f7f9 fe3e 	bl	80026c8 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e167      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x200>
 8008a66:	e01b      	b.n	8008aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a68:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <HAL_RCC_OscConfig+0x248>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a6e:	f7f9 fe2b 	bl	80026c8 <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a74:	e00e      	b.n	8008a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a76:	f7f9 fe27 	bl	80026c8 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d907      	bls.n	8008a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e150      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	42470000 	.word	0x42470000
 8008a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a94:	4b88      	ldr	r3, [pc, #544]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1ea      	bne.n	8008a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8097 	beq.w	8008bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab2:	4b81      	ldr	r3, [pc, #516]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10f      	bne.n	8008ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ace:	4b7a      	ldr	r3, [pc, #488]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ada:	2301      	movs	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ade:	4b77      	ldr	r3, [pc, #476]	@ (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d118      	bne.n	8008b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008aea:	4b74      	ldr	r3, [pc, #464]	@ (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a73      	ldr	r2, [pc, #460]	@ (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008af6:	f7f9 fde7 	bl	80026c8 <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008afe:	f7f9 fde3 	bl	80026c8 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e10c      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b10:	4b6a      	ldr	r3, [pc, #424]	@ (8008cbc <HAL_RCC_OscConfig+0x474>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_OscConfig+0x2ea>
 8008b24:	4b64      	ldr	r3, [pc, #400]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b28:	4a63      	ldr	r2, [pc, #396]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b30:	e01c      	b.n	8008b6c <HAL_RCC_OscConfig+0x324>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x30c>
 8008b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b40:	f043 0304 	orr.w	r3, r3, #4
 8008b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b46:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b4c:	f043 0301 	orr.w	r3, r3, #1
 8008b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b52:	e00b      	b.n	8008b6c <HAL_RCC_OscConfig+0x324>
 8008b54:	4b58      	ldr	r3, [pc, #352]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b58:	4a57      	ldr	r2, [pc, #348]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b60:	4b55      	ldr	r3, [pc, #340]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b64:	4a54      	ldr	r2, [pc, #336]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b66:	f023 0304 	bic.w	r3, r3, #4
 8008b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d015      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b74:	f7f9 fda8 	bl	80026c8 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b7a:	e00a      	b.n	8008b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b7c:	f7f9 fda4 	bl	80026c8 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e0cb      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b92:	4b49      	ldr	r3, [pc, #292]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0ee      	beq.n	8008b7c <HAL_RCC_OscConfig+0x334>
 8008b9e:	e014      	b.n	8008bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ba0:	f7f9 fd92 	bl	80026c8 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ba6:	e00a      	b.n	8008bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba8:	f7f9 fd8e 	bl	80026c8 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0b5      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1ee      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d105      	bne.n	8008bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bd0:	4b39      	ldr	r3, [pc, #228]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	4a38      	ldr	r2, [pc, #224]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80a1 	beq.w	8008d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008be6:	4b34      	ldr	r3, [pc, #208]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 030c 	and.w	r3, r3, #12
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d05c      	beq.n	8008cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d141      	bne.n	8008c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bfa:	4b31      	ldr	r3, [pc, #196]	@ (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c00:	f7f9 fd62 	bl	80026c8 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c08:	f7f9 fd5e 	bl	80026c8 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e087      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c1a:	4b27      	ldr	r3, [pc, #156]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69da      	ldr	r2, [r3, #28]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	019b      	lsls	r3, r3, #6
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	061b      	lsls	r3, r3, #24
 8008c4a:	491b      	ldr	r1, [pc, #108]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c50:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c56:	f7f9 fd37 	bl	80026c8 <HAL_GetTick>
 8008c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c5c:	e008      	b.n	8008c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c5e:	f7f9 fd33 	bl	80026c8 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e05c      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c70:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0f0      	beq.n	8008c5e <HAL_RCC_OscConfig+0x416>
 8008c7c:	e054      	b.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c7e:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <HAL_RCC_OscConfig+0x478>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c84:	f7f9 fd20 	bl	80026c8 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8c:	f7f9 fd1c 	bl	80026c8 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e045      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c9e:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x444>
 8008caa:	e03d      	b.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e038      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	40007000 	.word	0x40007000
 8008cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d34 <HAL_RCC_OscConfig+0x4ec>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d028      	beq.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d121      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d11a      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d111      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d001      	beq.n	8008d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023800 	.word	0x40023800

08008d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0cc      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d4c:	4b68      	ldr	r3, [pc, #416]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d90c      	bls.n	8008d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5a:	4b65      	ldr	r3, [pc, #404]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d62:	4b63      	ldr	r3, [pc, #396]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d001      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0b8      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d8c:	4b59      	ldr	r3, [pc, #356]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	4a58      	ldr	r2, [pc, #352]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008da4:	4b53      	ldr	r3, [pc, #332]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	4a52      	ldr	r2, [pc, #328]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008db0:	4b50      	ldr	r3, [pc, #320]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	494d      	ldr	r1, [pc, #308]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d044      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d107      	bne.n	8008de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dd6:	4b47      	ldr	r3, [pc, #284]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d119      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e07f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d003      	beq.n	8008df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d107      	bne.n	8008e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008df6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e06f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e06:	4b3b      	ldr	r3, [pc, #236]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e067      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e16:	4b37      	ldr	r3, [pc, #220]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f023 0203 	bic.w	r2, r3, #3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4934      	ldr	r1, [pc, #208]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e28:	f7f9 fc4e 	bl	80026c8 <HAL_GetTick>
 8008e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e2e:	e00a      	b.n	8008e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e30:	f7f9 fc4a 	bl	80026c8 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e04f      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e46:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 020c 	and.w	r2, r3, #12
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d1eb      	bne.n	8008e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e58:	4b25      	ldr	r3, [pc, #148]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d20c      	bcs.n	8008e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b22      	ldr	r3, [pc, #136]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e6e:	4b20      	ldr	r3, [pc, #128]	@ (8008ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d001      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e032      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d008      	beq.n	8008e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e8c:	4b19      	ldr	r3, [pc, #100]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4916      	ldr	r1, [pc, #88]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008eaa:	4b12      	ldr	r3, [pc, #72]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	490e      	ldr	r1, [pc, #56]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ebe:	f000 f821 	bl	8008f04 <HAL_RCC_GetSysClockFreq>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	091b      	lsrs	r3, r3, #4
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	490a      	ldr	r1, [pc, #40]	@ (8008ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8008ed0:	5ccb      	ldrb	r3, [r1, r3]
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	4a09      	ldr	r2, [pc, #36]	@ (8008efc <HAL_RCC_ClockConfig+0x1c4>)
 8008ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008eda:	4b09      	ldr	r3, [pc, #36]	@ (8008f00 <HAL_RCC_ClockConfig+0x1c8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 fbae 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40023c00 	.word	0x40023c00
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	0800e12c 	.word	0x0800e12c
 8008efc:	20000004 	.word	0x20000004
 8008f00:	20000008 	.word	0x20000008

08008f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f08:	b090      	sub	sp, #64	@ 0x40
 8008f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f1c:	4b59      	ldr	r3, [pc, #356]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f003 030c 	and.w	r3, r3, #12
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d00d      	beq.n	8008f44 <HAL_RCC_GetSysClockFreq+0x40>
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	f200 80a1 	bhi.w	8009070 <HAL_RCC_GetSysClockFreq+0x16c>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x34>
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d003      	beq.n	8008f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8008f36:	e09b      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f38:	4b53      	ldr	r3, [pc, #332]	@ (8009088 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f3c:	e09b      	b.n	8009076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f3e:	4b53      	ldr	r3, [pc, #332]	@ (800908c <HAL_RCC_GetSysClockFreq+0x188>)
 8008f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f42:	e098      	b.n	8009076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f44:	4b4f      	ldr	r3, [pc, #316]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d028      	beq.n	8008fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	099b      	lsrs	r3, r3, #6
 8008f60:	2200      	movs	r2, #0
 8008f62:	623b      	str	r3, [r7, #32]
 8008f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4b47      	ldr	r3, [pc, #284]	@ (800908c <HAL_RCC_GetSysClockFreq+0x188>)
 8008f70:	fb03 f201 	mul.w	r2, r3, r1
 8008f74:	2300      	movs	r3, #0
 8008f76:	fb00 f303 	mul.w	r3, r0, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	4a43      	ldr	r2, [pc, #268]	@ (800908c <HAL_RCC_GetSysClockFreq+0x188>)
 8008f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8008f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f84:	460a      	mov	r2, r1
 8008f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f8a:	4413      	add	r3, r2
 8008f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f90:	2200      	movs	r2, #0
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	61fa      	str	r2, [r7, #28]
 8008f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008f9e:	f7f7 f91b 	bl	80001d8 <__aeabi_uldivmod>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008faa:	e053      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fac:	4b35      	ldr	r3, [pc, #212]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	099b      	lsrs	r3, r3, #6
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	617a      	str	r2, [r7, #20]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008fbe:	f04f 0b00 	mov.w	fp, #0
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	f04f 0000 	mov.w	r0, #0
 8008fca:	f04f 0100 	mov.w	r1, #0
 8008fce:	0159      	lsls	r1, r3, #5
 8008fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fd4:	0150      	lsls	r0, r2, #5
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	ebb2 080a 	subs.w	r8, r2, sl
 8008fde:	eb63 090b 	sbc.w	r9, r3, fp
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	f04f 0300 	mov.w	r3, #0
 8008fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8008ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	f04f 0300 	mov.w	r3, #0
 8009006:	00eb      	lsls	r3, r5, #3
 8009008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800900c:	00e2      	lsls	r2, r4, #3
 800900e:	4614      	mov	r4, r2
 8009010:	461d      	mov	r5, r3
 8009012:	eb14 030a 	adds.w	r3, r4, sl
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	eb45 030b 	adc.w	r3, r5, fp
 800901c:	607b      	str	r3, [r7, #4]
 800901e:	f04f 0200 	mov.w	r2, #0
 8009022:	f04f 0300 	mov.w	r3, #0
 8009026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800902a:	4629      	mov	r1, r5
 800902c:	028b      	lsls	r3, r1, #10
 800902e:	4621      	mov	r1, r4
 8009030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009034:	4621      	mov	r1, r4
 8009036:	028a      	lsls	r2, r1, #10
 8009038:	4610      	mov	r0, r2
 800903a:	4619      	mov	r1, r3
 800903c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903e:	2200      	movs	r2, #0
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	60fa      	str	r2, [r7, #12]
 8009044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009048:	f7f7 f8c6 	bl	80001d8 <__aeabi_uldivmod>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4613      	mov	r3, r2
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x180>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	0c1b      	lsrs	r3, r3, #16
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	3301      	adds	r3, #1
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	fbb2 f3f3 	udiv	r3, r2, r3
 800906c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800906e:	e002      	b.n	8009076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <HAL_RCC_GetSysClockFreq+0x184>)
 8009072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009078:	4618      	mov	r0, r3
 800907a:	3740      	adds	r7, #64	@ 0x40
 800907c:	46bd      	mov	sp, r7
 800907e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009082:	bf00      	nop
 8009084:	40023800 	.word	0x40023800
 8009088:	00f42400 	.word	0x00f42400
 800908c:	017d7840 	.word	0x017d7840

08009090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009094:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009096:	681b      	ldr	r3, [r3, #0]
}
 8009098:	4618      	mov	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000004 	.word	0x20000004

080090a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80090ac:	f7ff fff0 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 80090b0:	4602      	mov	r2, r0
 80090b2:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	0a9b      	lsrs	r3, r3, #10
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	4903      	ldr	r1, [pc, #12]	@ (80090cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80090be:	5ccb      	ldrb	r3, [r1, r3]
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	40023800 	.word	0x40023800
 80090cc:	0800e13c 	.word	0x0800e13c

080090d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e041      	b.n	8009166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7f9 f90a 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f000 fb8c 	bl	800982c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d001      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e044      	b.n	8009212 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0201 	orr.w	r2, r2, #1
 800919e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009220 <HAL_TIM_Base_Start_IT+0xb0>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d018      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x6c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b2:	d013      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x6c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009224 <HAL_TIM_Base_Start_IT+0xb4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00e      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x6c>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a19      	ldr	r2, [pc, #100]	@ (8009228 <HAL_TIM_Base_Start_IT+0xb8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d009      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x6c>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a17      	ldr	r2, [pc, #92]	@ (800922c <HAL_TIM_Base_Start_IT+0xbc>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d004      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x6c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a16      	ldr	r2, [pc, #88]	@ (8009230 <HAL_TIM_Base_Start_IT+0xc0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d111      	bne.n	8009200 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b06      	cmp	r3, #6
 80091ec:	d010      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fe:	e007      	b.n	8009210 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40014000 	.word	0x40014000

08009234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e041      	b.n	80092ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f839 	bl	80092d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f000 fada 	bl	800982c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d020      	beq.n	800934a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01b      	beq.n	800934a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f06f 0202 	mvn.w	r2, #2
 800931a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa5c 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 8009336:	e005      	b.n	8009344 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa4e 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa5f 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d020      	beq.n	8009396 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	d01b      	beq.n	8009396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f06f 0204 	mvn.w	r2, #4
 8009366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa36 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 8009382:	e005      	b.n	8009390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa28 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa39 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b00      	cmp	r3, #0
 800939e:	d020      	beq.n	80093e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01b      	beq.n	80093e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f06f 0208 	mvn.w	r2, #8
 80093b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2204      	movs	r2, #4
 80093b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa10 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 80093ce:	e005      	b.n	80093dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa02 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa13 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d020      	beq.n	800942e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01b      	beq.n	800942e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f06f 0210 	mvn.w	r2, #16
 80093fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2208      	movs	r2, #8
 8009404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9ea 	bl	80097ee <HAL_TIM_IC_CaptureCallback>
 800941a:	e005      	b.n	8009428 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f9dc 	bl	80097da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9ed 	bl	8009802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00c      	beq.n	8009452 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f06f 0201 	mvn.w	r2, #1
 800944a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7f7 f859 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800946e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fcff 	bl	8009e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f9be 	bl	8009816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00c      	beq.n	80094be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f06f 0220 	mvn.w	r2, #32
 80094b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fcd1 	bl	8009e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e0ae      	b.n	8009644 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	f200 809f 	bhi.w	8009634 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094f6:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009531 	.word	0x08009531
 8009500:	08009635 	.word	0x08009635
 8009504:	08009635 	.word	0x08009635
 8009508:	08009635 	.word	0x08009635
 800950c:	08009571 	.word	0x08009571
 8009510:	08009635 	.word	0x08009635
 8009514:	08009635 	.word	0x08009635
 8009518:	08009635 	.word	0x08009635
 800951c:	080095b3 	.word	0x080095b3
 8009520:	08009635 	.word	0x08009635
 8009524:	08009635 	.word	0x08009635
 8009528:	08009635 	.word	0x08009635
 800952c:	080095f3 	.word	0x080095f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f9fe 	bl	8009938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699a      	ldr	r2, [r3, #24]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0208 	orr.w	r2, r2, #8
 800954a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0204 	bic.w	r2, r2, #4
 800955a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6999      	ldr	r1, [r3, #24]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	691a      	ldr	r2, [r3, #16]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	619a      	str	r2, [r3, #24]
      break;
 800956e:	e064      	b.n	800963a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68b9      	ldr	r1, [r7, #8]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fa44 	bl	8009a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800958a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699a      	ldr	r2, [r3, #24]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800959a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6999      	ldr	r1, [r3, #24]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	021a      	lsls	r2, r3, #8
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	619a      	str	r2, [r3, #24]
      break;
 80095b0:	e043      	b.n	800963a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fa8f 	bl	8009adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0208 	orr.w	r2, r2, #8
 80095cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0204 	bic.w	r2, r2, #4
 80095dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69d9      	ldr	r1, [r3, #28]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	61da      	str	r2, [r3, #28]
      break;
 80095f0:	e023      	b.n	800963a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fad9 	bl	8009bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800960c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800961c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69d9      	ldr	r1, [r3, #28]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	021a      	lsls	r2, r3, #8
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	61da      	str	r2, [r3, #28]
      break;
 8009632:	e002      	b.n	800963a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	75fb      	strb	r3, [r7, #23]
      break;
 8009638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_TIM_ConfigClockSource+0x1c>
 8009664:	2302      	movs	r3, #2
 8009666:	e0b4      	b.n	80097d2 <HAL_TIM_ConfigClockSource+0x186>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800968e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a0:	d03e      	beq.n	8009720 <HAL_TIM_ConfigClockSource+0xd4>
 80096a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a6:	f200 8087 	bhi.w	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ae:	f000 8086 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x172>
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d87f      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096b8:	2b70      	cmp	r3, #112	@ 0x70
 80096ba:	d01a      	beq.n	80096f2 <HAL_TIM_ConfigClockSource+0xa6>
 80096bc:	2b70      	cmp	r3, #112	@ 0x70
 80096be:	d87b      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096c0:	2b60      	cmp	r3, #96	@ 0x60
 80096c2:	d050      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x11a>
 80096c4:	2b60      	cmp	r3, #96	@ 0x60
 80096c6:	d877      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096c8:	2b50      	cmp	r3, #80	@ 0x50
 80096ca:	d03c      	beq.n	8009746 <HAL_TIM_ConfigClockSource+0xfa>
 80096cc:	2b50      	cmp	r3, #80	@ 0x50
 80096ce:	d873      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096d0:	2b40      	cmp	r3, #64	@ 0x40
 80096d2:	d058      	beq.n	8009786 <HAL_TIM_ConfigClockSource+0x13a>
 80096d4:	2b40      	cmp	r3, #64	@ 0x40
 80096d6:	d86f      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096d8:	2b30      	cmp	r3, #48	@ 0x30
 80096da:	d064      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0x15a>
 80096dc:	2b30      	cmp	r3, #48	@ 0x30
 80096de:	d86b      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d060      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d867      	bhi.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d05c      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0x15a>
 80096ec:	2b10      	cmp	r3, #16
 80096ee:	d05a      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0x15a>
 80096f0:	e062      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009702:	f000 fb1f 	bl	8009d44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	609a      	str	r2, [r3, #8]
      break;
 800971e:	e04f      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009730:	f000 fb08 	bl	8009d44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009742:	609a      	str	r2, [r3, #8]
      break;
 8009744:	e03c      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009752:	461a      	mov	r2, r3
 8009754:	f000 fa7c 	bl	8009c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2150      	movs	r1, #80	@ 0x50
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fad5 	bl	8009d0e <TIM_ITRx_SetConfig>
      break;
 8009764:	e02c      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009772:	461a      	mov	r2, r3
 8009774:	f000 fa9b 	bl	8009cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2160      	movs	r1, #96	@ 0x60
 800977e:	4618      	mov	r0, r3
 8009780:	f000 fac5 	bl	8009d0e <TIM_ITRx_SetConfig>
      break;
 8009784:	e01c      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009792:	461a      	mov	r2, r3
 8009794:	f000 fa5c 	bl	8009c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2140      	movs	r1, #64	@ 0x40
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fab5 	bl	8009d0e <TIM_ITRx_SetConfig>
      break;
 80097a4:	e00c      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f000 faac 	bl	8009d0e <TIM_ITRx_SetConfig>
      break;
 80097b6:	e003      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	73fb      	strb	r3, [r7, #15]
      break;
 80097bc:	e000      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800981e:	bf00      	nop
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
	...

0800982c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a37      	ldr	r2, [pc, #220]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00f      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984a:	d00b      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a34      	ldr	r2, [pc, #208]	@ (8009920 <TIM_Base_SetConfig+0xf4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a33      	ldr	r2, [pc, #204]	@ (8009924 <TIM_Base_SetConfig+0xf8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_Base_SetConfig+0x38>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a32      	ldr	r2, [pc, #200]	@ (8009928 <TIM_Base_SetConfig+0xfc>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d108      	bne.n	8009876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a28      	ldr	r2, [pc, #160]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01b      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009884:	d017      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a25      	ldr	r2, [pc, #148]	@ (8009920 <TIM_Base_SetConfig+0xf4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d013      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a24      	ldr	r2, [pc, #144]	@ (8009924 <TIM_Base_SetConfig+0xf8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00f      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a23      	ldr	r2, [pc, #140]	@ (8009928 <TIM_Base_SetConfig+0xfc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d00b      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a22      	ldr	r2, [pc, #136]	@ (800992c <TIM_Base_SetConfig+0x100>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d007      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a21      	ldr	r2, [pc, #132]	@ (8009930 <TIM_Base_SetConfig+0x104>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d003      	beq.n	80098b6 <TIM_Base_SetConfig+0x8a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a20      	ldr	r2, [pc, #128]	@ (8009934 <TIM_Base_SetConfig+0x108>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d108      	bne.n	80098c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a0c      	ldr	r2, [pc, #48]	@ (800991c <TIM_Base_SetConfig+0xf0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d103      	bne.n	80098f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f043 0204 	orr.w	r2, r3, #4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	f023 0201 	bic.w	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f023 0302 	bic.w	r3, r3, #2
 8009980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a1c      	ldr	r2, [pc, #112]	@ (8009a00 <TIM_OC1_SetConfig+0xc8>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d10c      	bne.n	80099ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f023 0308 	bic.w	r3, r3, #8
 800999a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0304 	bic.w	r3, r3, #4
 80099ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a13      	ldr	r2, [pc, #76]	@ (8009a00 <TIM_OC1_SetConfig+0xc8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d111      	bne.n	80099da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	621a      	str	r2, [r3, #32]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	40010000 	.word	0x40010000

08009a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	f023 0210 	bic.w	r2, r3, #16
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f023 0320 	bic.w	r3, r3, #32
 8009a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad8 <TIM_OC2_SetConfig+0xd4>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d10d      	bne.n	8009a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a15      	ldr	r2, [pc, #84]	@ (8009ad8 <TIM_OC2_SetConfig+0xd4>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d113      	bne.n	8009ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	621a      	str	r2, [r3, #32]
}
 8009aca:	bf00      	nop
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000

08009adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0303 	bic.w	r3, r3, #3
 8009b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a1d      	ldr	r2, [pc, #116]	@ (8009bac <TIM_OC3_SetConfig+0xd0>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d10d      	bne.n	8009b56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a14      	ldr	r2, [pc, #80]	@ (8009bac <TIM_OC3_SetConfig+0xd0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d113      	bne.n	8009b86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	621a      	str	r2, [r3, #32]
}
 8009ba0:	bf00      	nop
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40010000 	.word	0x40010000

08009bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	021b      	lsls	r3, r3, #8
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	031b      	lsls	r3, r3, #12
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a10      	ldr	r2, [pc, #64]	@ (8009c4c <TIM_OC4_SetConfig+0x9c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d109      	bne.n	8009c24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000

08009c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f023 0201 	bic.w	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f023 030a 	bic.w	r3, r3, #10
 8009c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	621a      	str	r2, [r3, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b087      	sub	sp, #28
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	f023 0210 	bic.w	r2, r3, #16
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	031b      	lsls	r3, r3, #12
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	f043 0307 	orr.w	r3, r3, #7
 8009d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	609a      	str	r2, [r3, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	021a      	lsls	r2, r3, #8
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	609a      	str	r2, [r3, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e050      	b.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a1c      	ldr	r2, [pc, #112]	@ (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d018      	beq.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009de8:	d013      	beq.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00e      	beq.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a16      	ldr	r2, [pc, #88]	@ (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d009      	beq.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a15      	ldr	r2, [pc, #84]	@ (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d004      	beq.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a13      	ldr	r2, [pc, #76]	@ (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d10c      	bne.n	8009e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	40010000 	.word	0x40010000
 8009e50:	40000400 	.word	0x40000400
 8009e54:	40000800 	.word	0x40000800
 8009e58:	40000c00 	.word	0x40000c00
 8009e5c:	40014000 	.word	0x40014000

08009e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e88:	b084      	sub	sp, #16
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	f107 001c 	add.w	r0, r7, #28
 8009e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d123      	bne.n	8009eea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d105      	bne.n	8009ede <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 fae8 	bl	800b4b4 <USB_CoreReset>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]
 8009ee8:	e01b      	b.n	8009f22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f001 fadc 	bl	800b4b4 <USB_CoreReset>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f14:	e005      	b.n	8009f22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f22:	7fbb      	ldrb	r3, [r7, #30]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d10b      	bne.n	8009f40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f043 0206 	orr.w	r2, r3, #6
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f043 0220 	orr.w	r2, r3, #32
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f4c:	b004      	add	sp, #16
 8009f4e:	4770      	bx	lr

08009f50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d165      	bne.n	800a030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4a41      	ldr	r2, [pc, #260]	@ (800a06c <USB_SetTurnaroundTime+0x11c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d906      	bls.n	8009f7a <USB_SetTurnaroundTime+0x2a>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4a40      	ldr	r2, [pc, #256]	@ (800a070 <USB_SetTurnaroundTime+0x120>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d202      	bcs.n	8009f7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009f74:	230f      	movs	r3, #15
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	e062      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4a3c      	ldr	r2, [pc, #240]	@ (800a070 <USB_SetTurnaroundTime+0x120>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d306      	bcc.n	8009f90 <USB_SetTurnaroundTime+0x40>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	4a3b      	ldr	r2, [pc, #236]	@ (800a074 <USB_SetTurnaroundTime+0x124>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d202      	bcs.n	8009f90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009f8a:	230e      	movs	r3, #14
 8009f8c:	617b      	str	r3, [r7, #20]
 8009f8e:	e057      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	4a38      	ldr	r2, [pc, #224]	@ (800a074 <USB_SetTurnaroundTime+0x124>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d306      	bcc.n	8009fa6 <USB_SetTurnaroundTime+0x56>
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	4a37      	ldr	r2, [pc, #220]	@ (800a078 <USB_SetTurnaroundTime+0x128>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d202      	bcs.n	8009fa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009fa0:	230d      	movs	r3, #13
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e04c      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	4a33      	ldr	r2, [pc, #204]	@ (800a078 <USB_SetTurnaroundTime+0x128>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d306      	bcc.n	8009fbc <USB_SetTurnaroundTime+0x6c>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4a32      	ldr	r2, [pc, #200]	@ (800a07c <USB_SetTurnaroundTime+0x12c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d802      	bhi.n	8009fbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e041      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800a07c <USB_SetTurnaroundTime+0x12c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d906      	bls.n	8009fd2 <USB_SetTurnaroundTime+0x82>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a2e      	ldr	r2, [pc, #184]	@ (800a080 <USB_SetTurnaroundTime+0x130>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d802      	bhi.n	8009fd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009fcc:	230b      	movs	r3, #11
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e036      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	4a2a      	ldr	r2, [pc, #168]	@ (800a080 <USB_SetTurnaroundTime+0x130>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d906      	bls.n	8009fe8 <USB_SetTurnaroundTime+0x98>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4a29      	ldr	r2, [pc, #164]	@ (800a084 <USB_SetTurnaroundTime+0x134>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d802      	bhi.n	8009fe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009fe2:	230a      	movs	r3, #10
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e02b      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4a26      	ldr	r2, [pc, #152]	@ (800a084 <USB_SetTurnaroundTime+0x134>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d906      	bls.n	8009ffe <USB_SetTurnaroundTime+0xae>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4a25      	ldr	r2, [pc, #148]	@ (800a088 <USB_SetTurnaroundTime+0x138>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d202      	bcs.n	8009ffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ff8:	2309      	movs	r3, #9
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e020      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4a21      	ldr	r2, [pc, #132]	@ (800a088 <USB_SetTurnaroundTime+0x138>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d306      	bcc.n	800a014 <USB_SetTurnaroundTime+0xc4>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4a20      	ldr	r2, [pc, #128]	@ (800a08c <USB_SetTurnaroundTime+0x13c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d802      	bhi.n	800a014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a00e:	2308      	movs	r3, #8
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e015      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <USB_SetTurnaroundTime+0x13c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d906      	bls.n	800a02a <USB_SetTurnaroundTime+0xda>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <USB_SetTurnaroundTime+0x140>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d202      	bcs.n	800a02a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a024:	2307      	movs	r3, #7
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e00a      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a02a:	2306      	movs	r3, #6
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e007      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a036:	2309      	movs	r3, #9
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	e001      	b.n	800a040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a03c:	2309      	movs	r3, #9
 800a03e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	029b      	lsls	r3, r3, #10
 800a054:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a058:	431a      	orrs	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	00d8acbf 	.word	0x00d8acbf
 800a070:	00e4e1c0 	.word	0x00e4e1c0
 800a074:	00f42400 	.word	0x00f42400
 800a078:	01067380 	.word	0x01067380
 800a07c:	011a499f 	.word	0x011a499f
 800a080:	01312cff 	.word	0x01312cff
 800a084:	014ca43f 	.word	0x014ca43f
 800a088:	016e3600 	.word	0x016e3600
 800a08c:	01a6ab1f 	.word	0x01a6ab1f
 800a090:	01e84800 	.word	0x01e84800

0800a094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f043 0201 	orr.w	r2, r3, #1
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f023 0201 	bic.w	r2, r3, #1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d115      	bne.n	800a126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a106:	200a      	movs	r0, #10
 800a108:	f7f8 faea 	bl	80026e0 <HAL_Delay>
      ms += 10U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	330a      	adds	r3, #10
 800a110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 f93f 	bl	800b396 <USB_GetMode>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d01e      	beq.n	800a15c <USB_SetCurrentMode+0x84>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2bc7      	cmp	r3, #199	@ 0xc7
 800a122:	d9f0      	bls.n	800a106 <USB_SetCurrentMode+0x2e>
 800a124:	e01a      	b.n	800a15c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d115      	bne.n	800a158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a138:	200a      	movs	r0, #10
 800a13a:	f7f8 fad1 	bl	80026e0 <HAL_Delay>
      ms += 10U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	330a      	adds	r3, #10
 800a142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 f926 	bl	800b396 <USB_GetMode>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <USB_SetCurrentMode+0x84>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2bc7      	cmp	r3, #199	@ 0xc7
 800a154:	d9f0      	bls.n	800a138 <USB_SetCurrentMode+0x60>
 800a156:	e001      	b.n	800a15c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e005      	b.n	800a168 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a160:	d101      	bne.n	800a166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a170:	b084      	sub	sp, #16
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a17e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a18a:	2300      	movs	r3, #0
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	e009      	b.n	800a1a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3340      	adds	r3, #64	@ 0x40
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b0e      	cmp	r3, #14
 800a1a8:	d9f2      	bls.n	800a190 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d11c      	bne.n	800a1ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1c0:	f043 0302 	orr.w	r3, r3, #2
 800a1c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1ea:	e00b      	b.n	800a204 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a20a:	461a      	mov	r2, r3
 800a20c:	2300      	movs	r3, #0
 800a20e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a214:	2b01      	cmp	r3, #1
 800a216:	d10d      	bne.n	800a234 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a220:	2100      	movs	r1, #0
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f968 	bl	800a4f8 <USB_SetDevSpeed>
 800a228:	e008      	b.n	800a23c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a22a:	2101      	movs	r1, #1
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f963 	bl	800a4f8 <USB_SetDevSpeed>
 800a232:	e003      	b.n	800a23c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a234:	2103      	movs	r1, #3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f95e 	bl	800a4f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a23c:	2110      	movs	r1, #16
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f8fa 	bl	800a438 <USB_FlushTxFifo>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f924 	bl	800a49c <USB_FlushRxFifo>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a264:	461a      	mov	r2, r3
 800a266:	2300      	movs	r3, #0
 800a268:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a270:	461a      	mov	r2, r3
 800a272:	2300      	movs	r3, #0
 800a274:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27c:	461a      	mov	r2, r3
 800a27e:	2300      	movs	r3, #0
 800a280:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
 800a286:	e043      	b.n	800a310 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a29a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a29e:	d118      	bne.n	800a2d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	e013      	b.n	800a2e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	e008      	b.n	800a2e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2de:	461a      	mov	r2, r3
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a302:	461a      	mov	r2, r3
 800a304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3301      	adds	r3, #1
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a314:	461a      	mov	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	4293      	cmp	r3, r2
 800a31a:	d3b5      	bcc.n	800a288 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a31c:	2300      	movs	r3, #0
 800a31e:	613b      	str	r3, [r7, #16]
 800a320:	e043      	b.n	800a3aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a338:	d118      	bne.n	800a36c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10a      	bne.n	800a356 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a34c:	461a      	mov	r2, r3
 800a34e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	e013      	b.n	800a37e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	461a      	mov	r2, r3
 800a364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	e008      	b.n	800a37e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a378:	461a      	mov	r2, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38a:	461a      	mov	r2, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	461a      	mov	r2, r3
 800a39e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	613b      	str	r3, [r7, #16]
 800a3aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d3b5      	bcc.n	800a322 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a3d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d105      	bne.n	800a3ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	f043 0210 	orr.w	r2, r3, #16
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699a      	ldr	r2, [r3, #24]
 800a3f0:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <USB_DevInit+0x2c4>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a3f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f043 0208 	orr.w	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a40c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a410:	2b01      	cmp	r3, #1
 800a412:	d107      	bne.n	800a424 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a41c:	f043 0304 	orr.w	r3, r3, #4
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a430:	b004      	add	sp, #16
 800a432:	4770      	bx	lr
 800a434:	803c3800 	.word	0x803c3800

0800a438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a452:	d901      	bls.n	800a458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e01b      	b.n	800a490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	daf2      	bge.n	800a446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	019b      	lsls	r3, r3, #6
 800a468:	f043 0220 	orr.w	r2, r3, #32
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a47c:	d901      	bls.n	800a482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e006      	b.n	800a490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d0f0      	beq.n	800a470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4b4:	d901      	bls.n	800a4ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e018      	b.n	800a4ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	daf2      	bge.n	800a4a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2210      	movs	r2, #16
 800a4ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4d8:	d901      	bls.n	800a4de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e006      	b.n	800a4ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0310 	and.w	r3, r3, #16
 800a4e6:	2b10      	cmp	r3, #16
 800a4e8:	d0f0      	beq.n	800a4cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	68f9      	ldr	r1, [r7, #12]
 800a514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a518:	4313      	orrs	r3, r2
 800a51a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f003 0306 	and.w	r3, r3, #6
 800a542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]
 800a54e:	e00a      	b.n	800a566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d002      	beq.n	800a55c <USB_GetDevSpeed+0x32>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b06      	cmp	r3, #6
 800a55a:	d102      	bne.n	800a562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a55c:	2302      	movs	r3, #2
 800a55e:	75fb      	strb	r3, [r7, #23]
 800a560:	e001      	b.n	800a566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a562:	230f      	movs	r3, #15
 800a564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a566:	7dfb      	ldrb	r3, [r7, #23]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	371c      	adds	r7, #28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d13a      	bne.n	800a606 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a596:	69da      	ldr	r2, [r3, #28]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d155      	bne.n	800a674 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	791b      	ldrb	r3, [r3, #4]
 800a5e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	059b      	lsls	r3, r3, #22
 800a5ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	e036      	b.n	800a674 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a60c:	69da      	ldr	r2, [r3, #28]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	2101      	movs	r1, #1
 800a618:	fa01 f303 	lsl.w	r3, r1, r3
 800a61c:	041b      	lsls	r3, r3, #16
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a624:	4313      	orrs	r3, r2
 800a626:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d11a      	bne.n	800a674 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	791b      	ldrb	r3, [r3, #4]
 800a658:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a65a:	430b      	orrs	r3, r1
 800a65c:	4313      	orrs	r3, r2
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a66e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a672:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d161      	bne.n	800a764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b6:	d11f      	bne.n	800a6f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 030f 	and.w	r3, r3, #15
 800a708:	2101      	movs	r1, #1
 800a70a:	fa01 f303 	lsl.w	r3, r1, r3
 800a70e:	b29b      	uxth	r3, r3
 800a710:	43db      	mvns	r3, r3
 800a712:	68f9      	ldr	r1, [r7, #12]
 800a714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a718:	4013      	ands	r3, r2
 800a71a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a722:	69da      	ldr	r2, [r3, #28]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f003 030f 	and.w	r3, r3, #15
 800a72c:	2101      	movs	r1, #1
 800a72e:	fa01 f303 	lsl.w	r3, r1, r3
 800a732:	b29b      	uxth	r3, r3
 800a734:	43db      	mvns	r3, r3
 800a736:	68f9      	ldr	r1, [r7, #12]
 800a738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a73c:	4013      	ands	r3, r2
 800a73e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	0159      	lsls	r1, r3, #5
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	440b      	add	r3, r1
 800a756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75a:	4619      	mov	r1, r3
 800a75c:	4b35      	ldr	r3, [pc, #212]	@ (800a834 <USB_DeactivateEndpoint+0x1b0>)
 800a75e:	4013      	ands	r3, r2
 800a760:	600b      	str	r3, [r1, #0]
 800a762:	e060      	b.n	800a826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a77a:	d11f      	bne.n	800a7bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	0151      	lsls	r1, r2, #5
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	440a      	add	r2, r1
 800a792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a79a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d2:	041b      	lsls	r3, r3, #16
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7dc:	4013      	ands	r3, r2
 800a7de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a800:	4013      	ands	r3, r2
 800a802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	0159      	lsls	r1, r3, #5
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	440b      	add	r3, r1
 800a81a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a81e:	4619      	mov	r1, r3
 800a820:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <USB_DeactivateEndpoint+0x1b4>)
 800a822:	4013      	ands	r3, r2
 800a824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	ec337800 	.word	0xec337800
 800a838:	eff37800 	.word	0xeff37800

0800a83c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08a      	sub	sp, #40	@ 0x28
 800a840:	af02      	add	r7, sp, #8
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f040 817f 	bne.w	800ab5c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d132      	bne.n	800a8cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	0151      	lsls	r1, r2, #5
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	440a      	add	r2, r1
 800a87c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a880:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a884:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	0151      	lsls	r1, r2, #5
 800a89c:	69fa      	ldr	r2, [r7, #28]
 800a89e:	440a      	add	r2, r1
 800a8a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	69fa      	ldr	r2, [r7, #28]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c4:	0cdb      	lsrs	r3, r3, #19
 800a8c6:	04db      	lsls	r3, r3, #19
 800a8c8:	6113      	str	r3, [r2, #16]
 800a8ca:	e097      	b.n	800a9fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	0151      	lsls	r1, r2, #5
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	440a      	add	r2, r1
 800a8e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8e6:	0cdb      	lsrs	r3, r3, #19
 800a8e8:	04db      	lsls	r3, r3, #19
 800a8ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a906:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a90a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a90e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d11a      	bne.n	800a94c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d903      	bls.n	800a92a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	0151      	lsls	r1, r2, #5
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	440a      	add	r2, r1
 800a940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a948:	6113      	str	r3, [r2, #16]
 800a94a:	e044      	b.n	800a9d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	4413      	add	r3, r2
 800a956:	1e5a      	subs	r2, r3, #1
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a960:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a96e:	691a      	ldr	r2, [r3, #16]
 800a970:	8afb      	ldrh	r3, [r7, #22]
 800a972:	04d9      	lsls	r1, r3, #19
 800a974:	4ba4      	ldr	r3, [pc, #656]	@ (800ac08 <USB_EPStartXfer+0x3cc>)
 800a976:	400b      	ands	r3, r1
 800a978:	69b9      	ldr	r1, [r7, #24]
 800a97a:	0148      	lsls	r0, r1, #5
 800a97c:	69f9      	ldr	r1, [r7, #28]
 800a97e:	4401      	add	r1, r0
 800a980:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a984:	4313      	orrs	r3, r2
 800a986:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	791b      	ldrb	r3, [r3, #4]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d122      	bne.n	800a9d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	0151      	lsls	r1, r2, #5
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a9ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	8afb      	ldrh	r3, [r7, #22]
 800a9c0:	075b      	lsls	r3, r3, #29
 800a9c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a9c6:	69b9      	ldr	r1, [r7, #24]
 800a9c8:	0148      	lsls	r0, r1, #5
 800a9ca:	69f9      	ldr	r1, [r7, #28]
 800a9cc:	4401      	add	r1, r0
 800a9ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e2:	691a      	ldr	r2, [r3, #16]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9ec:	69b9      	ldr	r1, [r7, #24]
 800a9ee:	0148      	lsls	r0, r1, #5
 800a9f0:	69f9      	ldr	r1, [r7, #28]
 800a9f2:	4401      	add	r1, r0
 800a9f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d14b      	bne.n	800aa9a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa16:	461a      	mov	r2, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	791b      	ldrb	r3, [r3, #4]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d128      	bne.n	800aa78 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	015a      	lsls	r2, r3, #5
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	0151      	lsls	r1, r2, #5
 800aa48:	69fa      	ldr	r2, [r7, #28]
 800aa4a:	440a      	add	r2, r1
 800aa4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	e00f      	b.n	800aa78 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	0151      	lsls	r1, r2, #5
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa76:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	e166      	b.n	800ad68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	0151      	lsls	r1, r2, #5
 800aaac:	69fa      	ldr	r2, [r7, #28]
 800aaae:	440a      	add	r2, r1
 800aab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aab8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	791b      	ldrb	r3, [r3, #4]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d015      	beq.n	800aaee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 814e 	beq.w	800ad68 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 030f 	and.w	r3, r3, #15
 800aadc:	2101      	movs	r1, #1
 800aade:	fa01 f303 	lsl.w	r3, r1, r3
 800aae2:	69f9      	ldr	r1, [r7, #28]
 800aae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aae8:	4313      	orrs	r3, r2
 800aaea:	634b      	str	r3, [r1, #52]	@ 0x34
 800aaec:	e13c      	b.n	800ad68 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d110      	bne.n	800ab20 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	e00f      	b.n	800ab40 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab3e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	68d9      	ldr	r1, [r3, #12]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	b298      	uxth	r0, r3
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4603      	mov	r3, r0
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f9b9 	bl	800aecc <USB_WritePacket>
 800ab5a:	e105      	b.n	800ad68 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab76:	0cdb      	lsrs	r3, r3, #19
 800ab78:	04db      	lsls	r3, r3, #19
 800ab7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab9e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d132      	bne.n	800ac0c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abd4:	69b9      	ldr	r1, [r7, #24]
 800abd6:	0148      	lsls	r0, r1, #5
 800abd8:	69f9      	ldr	r1, [r7, #28]
 800abda:	4401      	add	r1, r0
 800abdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abe0:	4313      	orrs	r3, r2
 800abe2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	69fa      	ldr	r2, [r7, #28]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac02:	6113      	str	r3, [r2, #16]
 800ac04:	e062      	b.n	800accc <USB_EPStartXfer+0x490>
 800ac06:	bf00      	nop
 800ac08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d123      	bne.n	800ac5c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac2a:	69b9      	ldr	r1, [r7, #24]
 800ac2c:	0148      	lsls	r0, r1, #5
 800ac2e:	69f9      	ldr	r1, [r7, #28]
 800ac30:	4401      	add	r1, r0
 800ac32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac36:	4313      	orrs	r3, r2
 800ac38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	0151      	lsls	r1, r2, #5
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	440a      	add	r2, r1
 800ac50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac58:	6113      	str	r3, [r2, #16]
 800ac5a:	e037      	b.n	800accc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	691a      	ldr	r2, [r3, #16]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	4413      	add	r3, r2
 800ac66:	1e5a      	subs	r2, r3, #1
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	8afa      	ldrh	r2, [r7, #22]
 800ac78:	fb03 f202 	mul.w	r2, r3, r2
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	8afb      	ldrh	r3, [r7, #22]
 800ac90:	04d9      	lsls	r1, r3, #19
 800ac92:	4b38      	ldr	r3, [pc, #224]	@ (800ad74 <USB_EPStartXfer+0x538>)
 800ac94:	400b      	ands	r3, r1
 800ac96:	69b9      	ldr	r1, [r7, #24]
 800ac98:	0148      	lsls	r0, r1, #5
 800ac9a:	69f9      	ldr	r1, [r7, #28]
 800ac9c:	4401      	add	r1, r0
 800ac9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aca2:	4313      	orrs	r3, r2
 800aca4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb2:	691a      	ldr	r2, [r3, #16]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acbc:	69b9      	ldr	r1, [r7, #24]
 800acbe:	0148      	lsls	r0, r1, #5
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	4401      	add	r1, r0
 800acc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800acc8:	4313      	orrs	r3, r2
 800acca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d10d      	bne.n	800acee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d009      	beq.n	800acee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	68d9      	ldr	r1, [r3, #12]
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acea:	460a      	mov	r2, r1
 800acec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	791b      	ldrb	r3, [r3, #4]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d128      	bne.n	800ad48 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d110      	bne.n	800ad28 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	e00f      	b.n	800ad48 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	0151      	lsls	r1, r2, #5
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	0151      	lsls	r1, r2, #5
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	440a      	add	r2, r1
 800ad5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	1ff80000 	.word	0x1ff80000

0800ad78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d14a      	bne.n	800ae2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adae:	f040 8086 	bne.w	800aebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	7812      	ldrb	r2, [r2, #0]
 800adc6:	0151      	lsls	r1, r2, #5
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	440a      	add	r2, r1
 800adcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800add0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800add4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	0151      	lsls	r1, r2, #5
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	440a      	add	r2, r1
 800adf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3301      	adds	r3, #1
 800adfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d902      	bls.n	800ae10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae0e:	e056      	b.n	800aebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae28:	d0e7      	beq.n	800adfa <USB_EPStopXfer+0x82>
 800ae2a:	e048      	b.n	800aebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae44:	d13b      	bne.n	800aebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	7812      	ldrb	r2, [r2, #0]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	7812      	ldrb	r2, [r2, #0]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d902      	bls.n	800aea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	75fb      	strb	r3, [r7, #23]
          break;
 800aea2:	e00c      	b.n	800aebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aeb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aebc:	d0e7      	beq.n	800ae8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aecc:	b480      	push	{r7}
 800aece:	b089      	sub	sp, #36	@ 0x24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	4611      	mov	r1, r2
 800aed8:	461a      	mov	r2, r3
 800aeda:	460b      	mov	r3, r1
 800aedc:	71fb      	strb	r3, [r7, #7]
 800aede:	4613      	mov	r3, r2
 800aee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aeea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d123      	bne.n	800af3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aef2:	88bb      	ldrh	r3, [r7, #4]
 800aef4:	3303      	adds	r3, #3
 800aef6:	089b      	lsrs	r3, r3, #2
 800aef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aefa:	2300      	movs	r3, #0
 800aefc:	61bb      	str	r3, [r7, #24]
 800aefe:	e018      	b.n	800af32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	031a      	lsls	r2, r3, #12
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	4413      	add	r3, r2
 800af08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af0c:	461a      	mov	r2, r3
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	3301      	adds	r3, #1
 800af18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	3301      	adds	r3, #1
 800af1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	3301      	adds	r3, #1
 800af24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	3301      	adds	r3, #1
 800af2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	3301      	adds	r3, #1
 800af30:	61bb      	str	r3, [r7, #24]
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	429a      	cmp	r2, r3
 800af38:	d3e2      	bcc.n	800af00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3724      	adds	r7, #36	@ 0x24
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af48:	b480      	push	{r7}
 800af4a:	b08b      	sub	sp, #44	@ 0x2c
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af5e:	88fb      	ldrh	r3, [r7, #6]
 800af60:	089b      	lsrs	r3, r3, #2
 800af62:	b29b      	uxth	r3, r3
 800af64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af66:	88fb      	ldrh	r3, [r7, #6]
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
 800af72:	e014      	b.n	800af9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	3301      	adds	r3, #1
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	3301      	adds	r3, #1
 800af8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	3301      	adds	r3, #1
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	3301      	adds	r3, #1
 800af96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	3301      	adds	r3, #1
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	6a3a      	ldr	r2, [r7, #32]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d3e6      	bcc.n	800af74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afa6:	8bfb      	ldrh	r3, [r7, #30]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01e      	beq.n	800afea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afb6:	461a      	mov	r2, r3
 800afb8:	f107 0310 	add.w	r3, r7, #16
 800afbc:	6812      	ldr	r2, [r2, #0]
 800afbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	00db      	lsls	r3, r3, #3
 800afc8:	fa22 f303 	lsr.w	r3, r2, r3
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd0:	701a      	strb	r2, [r3, #0]
      i++;
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	3301      	adds	r3, #1
 800afd6:	623b      	str	r3, [r7, #32]
      pDest++;
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	3301      	adds	r3, #1
 800afdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800afde:	8bfb      	ldrh	r3, [r7, #30]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800afe4:	8bfb      	ldrh	r3, [r7, #30]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1ea      	bne.n	800afc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800afec:	4618      	mov	r0, r3
 800afee:	372c      	adds	r7, #44	@ 0x2c
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d12c      	bne.n	800b06e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	db12      	blt.n	800b04c <USB_EPSetStall+0x54>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00f      	beq.n	800b04c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	0151      	lsls	r1, r2, #5
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	440a      	add	r2, r1
 800b042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b046:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b04a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	0151      	lsls	r1, r2, #5
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	440a      	add	r2, r1
 800b062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	e02b      	b.n	800b0c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	db12      	blt.n	800b0a6 <USB_EPSetStall+0xae>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00f      	beq.n	800b0a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	0151      	lsls	r1, r2, #5
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	440a      	add	r2, r1
 800b09c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b0a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	0151      	lsls	r1, r2, #5
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	440a      	add	r2, r1
 800b0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b0c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d128      	bne.n	800b142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	0151      	lsls	r1, r2, #5
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	440a      	add	r2, r1
 800b106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b10a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b10e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	791b      	ldrb	r3, [r3, #4]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d003      	beq.n	800b120 <USB_EPClearStall+0x4c>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	791b      	ldrb	r3, [r3, #4]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d138      	bne.n	800b192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	440a      	add	r2, r1
 800b136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	e027      	b.n	800b192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	0151      	lsls	r1, r2, #5
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	440a      	add	r2, r1
 800b158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b15c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	791b      	ldrb	r3, [r3, #4]
 800b166:	2b03      	cmp	r3, #3
 800b168:	d003      	beq.n	800b172 <USB_EPClearStall+0x9e>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	791b      	ldrb	r3, [r3, #4]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d10f      	bne.n	800b192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	0151      	lsls	r1, r2, #5
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	440a      	add	r2, r1
 800b188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b18c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b1c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	011b      	lsls	r3, r3, #4
 800b1d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b1d4:	68f9      	ldr	r1, [r7, #12]
 800b1d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b206:	f023 0303 	bic.w	r3, r3, #3
 800b20a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b21a:	f023 0302 	bic.w	r3, r3, #2
 800b21e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b248:	f023 0303 	bic.w	r3, r3, #3
 800b24c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b25c:	f043 0302 	orr.w	r3, r3, #2
 800b260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4013      	ands	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b288:	68fb      	ldr	r3, [r7, #12]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	0c1b      	lsrs	r3, r3, #16
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	b29b      	uxth	r3, r3
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	4013      	ands	r3, r2
 800b32a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b32c:	68bb      	ldr	r3, [r7, #8]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b087      	sub	sp, #28
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	460b      	mov	r3, r1
 800b344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b35c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b35e:	78fb      	ldrb	r3, [r7, #3]
 800b360:	f003 030f 	and.w	r3, r3, #15
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	fa22 f303 	lsr.w	r3, r2, r3
 800b36a:	01db      	lsls	r3, r3, #7
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b374:	78fb      	ldrb	r3, [r7, #3]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4013      	ands	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b388:	68bb      	ldr	r3, [r7, #8]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b3d0:	f023 0307 	bic.w	r3, r3, #7
 800b3d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	460b      	mov	r3, r1
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	333c      	adds	r3, #60	@ 0x3c
 800b40e:	3304      	adds	r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	4a26      	ldr	r2, [pc, #152]	@ (800b4b0 <USB_EP0_OutStart+0xb8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d90a      	bls.n	800b432 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b42c:	d101      	bne.n	800b432 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	e037      	b.n	800b4a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b438:	461a      	mov	r2, r3
 800b43a:	2300      	movs	r3, #0
 800b43c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b44c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b460:	f043 0318 	orr.w	r3, r3, #24
 800b464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b474:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b478:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d10f      	bne.n	800b4a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b49a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b49e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	4f54300a 	.word	0x4f54300a

0800b4b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4cc:	d901      	bls.n	800b4d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e022      	b.n	800b518 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	daf2      	bge.n	800b4c0 <USB_CoreReset+0xc>

  count = 10U;
 800b4da:	230a      	movs	r3, #10
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b4de:	e002      	b.n	800b4e6 <USB_CoreReset+0x32>
  {
    count--;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f9      	bne.n	800b4e0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	f043 0201 	orr.w	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b504:	d901      	bls.n	800b50a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e006      	b.n	800b518 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	2b01      	cmp	r3, #1
 800b514:	d0f0      	beq.n	800b4f8 <USB_CoreReset+0x44>

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b530:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b534:	f002 fd1e 	bl	800df74 <USBD_static_malloc>
 800b538:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d109      	bne.n	800b554 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	32b0      	adds	r2, #176	@ 0xb0
 800b54a:	2100      	movs	r1, #0
 800b54c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b550:	2302      	movs	r3, #2
 800b552:	e0d4      	b.n	800b6fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b554:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b558:	2100      	movs	r1, #0
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f002 fd4e 	bl	800dffc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32b0      	adds	r2, #176	@ 0xb0
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	32b0      	adds	r2, #176	@ 0xb0
 800b57a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7c1b      	ldrb	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d138      	bne.n	800b5fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b58c:	4b5e      	ldr	r3, [pc, #376]	@ (800b708 <USBD_CDC_Init+0x1e4>)
 800b58e:	7819      	ldrb	r1, [r3, #0]
 800b590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b594:	2202      	movs	r2, #2
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f002 fbc9 	bl	800dd2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b59c:	4b5a      	ldr	r3, [pc, #360]	@ (800b708 <USBD_CDC_Init+0x1e4>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	f003 020f 	and.w	r2, r3, #15
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	3323      	adds	r3, #35	@ 0x23
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b5b6:	4b55      	ldr	r3, [pc, #340]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b5b8:	7819      	ldrb	r1, [r3, #0]
 800b5ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5be:	2202      	movs	r2, #2
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f002 fbb4 	bl	800dd2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b5c6:	4b51      	ldr	r3, [pc, #324]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 020f 	and.w	r2, r3, #15
 800b5ce:	6879      	ldr	r1, [r7, #4]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b5de:	2201      	movs	r2, #1
 800b5e0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b5e2:	4b4b      	ldr	r3, [pc, #300]	@ (800b710 <USBD_CDC_Init+0x1ec>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 020f 	and.w	r2, r3, #15
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	331c      	adds	r3, #28
 800b5f8:	2210      	movs	r2, #16
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	e035      	b.n	800b66a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b5fe:	4b42      	ldr	r3, [pc, #264]	@ (800b708 <USBD_CDC_Init+0x1e4>)
 800b600:	7819      	ldrb	r1, [r3, #0]
 800b602:	2340      	movs	r3, #64	@ 0x40
 800b604:	2202      	movs	r2, #2
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f002 fb91 	bl	800dd2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b60c:	4b3e      	ldr	r3, [pc, #248]	@ (800b708 <USBD_CDC_Init+0x1e4>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	f003 020f 	and.w	r2, r3, #15
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	3323      	adds	r3, #35	@ 0x23
 800b622:	2201      	movs	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b626:	4b39      	ldr	r3, [pc, #228]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b628:	7819      	ldrb	r1, [r3, #0]
 800b62a:	2340      	movs	r3, #64	@ 0x40
 800b62c:	2202      	movs	r2, #2
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f002 fb7d 	bl	800dd2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b634:	4b35      	ldr	r3, [pc, #212]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	f003 020f 	and.w	r2, r3, #15
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	440b      	add	r3, r1
 800b648:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b64c:	2201      	movs	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b650:	4b2f      	ldr	r3, [pc, #188]	@ (800b710 <USBD_CDC_Init+0x1ec>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f003 020f 	and.w	r2, r3, #15
 800b658:	6879      	ldr	r1, [r7, #4]
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	440b      	add	r3, r1
 800b664:	331c      	adds	r3, #28
 800b666:	2210      	movs	r2, #16
 800b668:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b66a:	4b29      	ldr	r3, [pc, #164]	@ (800b710 <USBD_CDC_Init+0x1ec>)
 800b66c:	7819      	ldrb	r1, [r3, #0]
 800b66e:	2308      	movs	r3, #8
 800b670:	2203      	movs	r2, #3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f002 fb5b 	bl	800dd2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b678:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <USBD_CDC_Init+0x1ec>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 020f 	and.w	r2, r3, #15
 800b680:	6879      	ldr	r1, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	440b      	add	r3, r1
 800b68c:	3323      	adds	r3, #35	@ 0x23
 800b68e:	2201      	movs	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	33b0      	adds	r3, #176	@ 0xb0
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e018      	b.n	800b6fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7c1b      	ldrb	r3, [r3, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b6d6:	7819      	ldrb	r1, [r3, #0]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f002 fc12 	bl	800df0c <USBD_LL_PrepareReceive>
 800b6e8:	e008      	b.n	800b6fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6ea:	4b08      	ldr	r3, [pc, #32]	@ (800b70c <USBD_CDC_Init+0x1e8>)
 800b6ec:	7819      	ldrb	r1, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6f4:	2340      	movs	r3, #64	@ 0x40
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f002 fc08 	bl	800df0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000097 	.word	0x20000097
 800b70c:	20000098 	.word	0x20000098
 800b710:	20000099 	.word	0x20000099

0800b714 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b720:	4b3a      	ldr	r3, [pc, #232]	@ (800b80c <USBD_CDC_DeInit+0xf8>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f002 fb27 	bl	800dd7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b72c:	4b37      	ldr	r3, [pc, #220]	@ (800b80c <USBD_CDC_DeInit+0xf8>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	3323      	adds	r3, #35	@ 0x23
 800b742:	2200      	movs	r2, #0
 800b744:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b746:	4b32      	ldr	r3, [pc, #200]	@ (800b810 <USBD_CDC_DeInit+0xfc>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f002 fb14 	bl	800dd7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b752:	4b2f      	ldr	r3, [pc, #188]	@ (800b810 <USBD_CDC_DeInit+0xfc>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	f003 020f 	and.w	r2, r3, #15
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	440b      	add	r3, r1
 800b766:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b76e:	4b29      	ldr	r3, [pc, #164]	@ (800b814 <USBD_CDC_DeInit+0x100>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f002 fb00 	bl	800dd7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b77a:	4b26      	ldr	r3, [pc, #152]	@ (800b814 <USBD_CDC_DeInit+0x100>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 020f 	and.w	r2, r3, #15
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	3323      	adds	r3, #35	@ 0x23
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b794:	4b1f      	ldr	r3, [pc, #124]	@ (800b814 <USBD_CDC_DeInit+0x100>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 020f 	and.w	r2, r3, #15
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	331c      	adds	r3, #28
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	32b0      	adds	r2, #176	@ 0xb0
 800b7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01f      	beq.n	800b800 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	33b0      	adds	r3, #176	@ 0xb0
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	32b0      	adds	r2, #176	@ 0xb0
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f002 fbd4 	bl	800df90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	32b0      	adds	r2, #176	@ 0xb0
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000097 	.word	0x20000097
 800b810:	20000098 	.word	0x20000098
 800b814:	20000099 	.word	0x20000099

0800b818 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	32b0      	adds	r2, #176	@ 0xb0
 800b82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b830:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b844:	2303      	movs	r3, #3
 800b846:	e0bf      	b.n	800b9c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b850:	2b00      	cmp	r3, #0
 800b852:	d050      	beq.n	800b8f6 <USBD_CDC_Setup+0xde>
 800b854:	2b20      	cmp	r3, #32
 800b856:	f040 80af 	bne.w	800b9b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	88db      	ldrh	r3, [r3, #6]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d03a      	beq.n	800b8d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b25b      	sxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	da1b      	bge.n	800b8a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	33b0      	adds	r3, #176	@ 0xb0
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b882:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	88d2      	ldrh	r2, [r2, #6]
 800b888:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	88db      	ldrh	r3, [r3, #6]
 800b88e:	2b07      	cmp	r3, #7
 800b890:	bf28      	it	cs
 800b892:	2307      	movcs	r3, #7
 800b894:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	89fa      	ldrh	r2, [r7, #14]
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 fda9 	bl	800d3f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b8a2:	e090      	b.n	800b9c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	785a      	ldrb	r2, [r3, #1]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	88db      	ldrh	r3, [r3, #6]
 800b8b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b8b4:	d803      	bhi.n	800b8be <USBD_CDC_Setup+0xa6>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	88db      	ldrh	r3, [r3, #6]
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	e000      	b.n	800b8c0 <USBD_CDC_Setup+0xa8>
 800b8be:	2240      	movs	r2, #64	@ 0x40
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b8c6:	6939      	ldr	r1, [r7, #16]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 fdbe 	bl	800d452 <USBD_CtlPrepareRx>
      break;
 800b8d6:	e076      	b.n	800b9c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	33b0      	adds	r3, #176	@ 0xb0
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	7850      	ldrb	r0, [r2, #1]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	4798      	blx	r3
      break;
 800b8f4:	e067      	b.n	800b9c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	785b      	ldrb	r3, [r3, #1]
 800b8fa:	2b0b      	cmp	r3, #11
 800b8fc:	d851      	bhi.n	800b9a2 <USBD_CDC_Setup+0x18a>
 800b8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b904 <USBD_CDC_Setup+0xec>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b935 	.word	0x0800b935
 800b908:	0800b9b1 	.word	0x0800b9b1
 800b90c:	0800b9a3 	.word	0x0800b9a3
 800b910:	0800b9a3 	.word	0x0800b9a3
 800b914:	0800b9a3 	.word	0x0800b9a3
 800b918:	0800b9a3 	.word	0x0800b9a3
 800b91c:	0800b9a3 	.word	0x0800b9a3
 800b920:	0800b9a3 	.word	0x0800b9a3
 800b924:	0800b9a3 	.word	0x0800b9a3
 800b928:	0800b9a3 	.word	0x0800b9a3
 800b92c:	0800b95f 	.word	0x0800b95f
 800b930:	0800b989 	.word	0x0800b989
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d107      	bne.n	800b950 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b940:	f107 030a 	add.w	r3, r7, #10
 800b944:	2202      	movs	r2, #2
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fd53 	bl	800d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b94e:	e032      	b.n	800b9b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 fcd1 	bl	800d2fa <USBD_CtlError>
            ret = USBD_FAIL;
 800b958:	2303      	movs	r3, #3
 800b95a:	75fb      	strb	r3, [r7, #23]
          break;
 800b95c:	e02b      	b.n	800b9b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b03      	cmp	r3, #3
 800b968:	d107      	bne.n	800b97a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b96a:	f107 030d 	add.w	r3, r7, #13
 800b96e:	2201      	movs	r2, #1
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 fd3e 	bl	800d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b978:	e01d      	b.n	800b9b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fcbc 	bl	800d2fa <USBD_CtlError>
            ret = USBD_FAIL;
 800b982:	2303      	movs	r3, #3
 800b984:	75fb      	strb	r3, [r7, #23]
          break;
 800b986:	e016      	b.n	800b9b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b03      	cmp	r3, #3
 800b992:	d00f      	beq.n	800b9b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 fcaf 	bl	800d2fa <USBD_CtlError>
            ret = USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b9a0:	e008      	b.n	800b9b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 fca8 	bl	800d2fa <USBD_CtlError>
          ret = USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b9ae:	e002      	b.n	800b9b6 <USBD_CDC_Setup+0x19e>
          break;
 800b9b0:	bf00      	nop
 800b9b2:	e008      	b.n	800b9c6 <USBD_CDC_Setup+0x1ae>
          break;
 800b9b4:	bf00      	nop
      }
      break;
 800b9b6:	e006      	b.n	800b9c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 fc9d 	bl	800d2fa <USBD_CtlError>
      ret = USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	32b0      	adds	r2, #176	@ 0xb0
 800b9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e065      	b.n	800bac6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	32b0      	adds	r2, #176	@ 0xb0
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	f003 020f 	and.w	r2, r3, #15
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	4613      	mov	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	3314      	adds	r3, #20
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d02f      	beq.n	800ba84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	f003 020f 	and.w	r2, r3, #15
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	440b      	add	r3, r1
 800ba36:	3314      	adds	r3, #20
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	f003 010f 	and.w	r1, r3, #15
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	460b      	mov	r3, r1
 800ba44:	00db      	lsls	r3, r3, #3
 800ba46:	440b      	add	r3, r1
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4403      	add	r3, r0
 800ba4c:	331c      	adds	r3, #28
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba54:	fb01 f303 	mul.w	r3, r1, r3
 800ba58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d112      	bne.n	800ba84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	f003 020f 	and.w	r2, r3, #15
 800ba64:	6879      	ldr	r1, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	440b      	add	r3, r1
 800ba70:	3314      	adds	r3, #20
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba76:	78f9      	ldrb	r1, [r7, #3]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 fa24 	bl	800deca <USBD_LL_Transmit>
 800ba82:	e01f      	b.n	800bac4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	33b0      	adds	r3, #176	@ 0xb0
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d010      	beq.n	800bac4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	33b0      	adds	r3, #176	@ 0xb0
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bac0:	78fa      	ldrb	r2, [r7, #3]
 800bac2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	460b      	mov	r3, r1
 800bad8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	32b0      	adds	r2, #176	@ 0xb0
 800bae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	32b0      	adds	r2, #176	@ 0xb0
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e01a      	b.n	800bb36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f002 fa22 	bl	800df4e <USBD_LL_GetRxDataSize>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	33b0      	adds	r3, #176	@ 0xb0
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bb30:	4611      	mov	r1, r2
 800bb32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	32b0      	adds	r2, #176	@ 0xb0
 800bb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e024      	b.n	800bbaa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	33b0      	adds	r3, #176	@ 0xb0
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d019      	beq.n	800bba8 <USBD_CDC_EP0_RxReady+0x6a>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bb7a:	2bff      	cmp	r3, #255	@ 0xff
 800bb7c:	d014      	beq.n	800bba8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	33b0      	adds	r3, #176	@ 0xb0
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bb96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bb9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	22ff      	movs	r2, #255	@ 0xff
 800bba4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bbbc:	2182      	movs	r1, #130	@ 0x82
 800bbbe:	4818      	ldr	r0, [pc, #96]	@ (800bc20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbc0:	f000 fd62 	bl	800c688 <USBD_GetEpDesc>
 800bbc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	4815      	ldr	r0, [pc, #84]	@ (800bc20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbca:	f000 fd5d 	bl	800c688 <USBD_GetEpDesc>
 800bbce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bbd0:	2181      	movs	r1, #129	@ 0x81
 800bbd2:	4813      	ldr	r0, [pc, #76]	@ (800bc20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bbd4:	f000 fd58 	bl	800c688 <USBD_GetEpDesc>
 800bbd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	2210      	movs	r2, #16
 800bbe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d006      	beq.n	800bbfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbf4:	711a      	strb	r2, [r3, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d006      	beq.n	800bc0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc08:	711a      	strb	r2, [r3, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2243      	movs	r2, #67	@ 0x43
 800bc12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc14:	4b02      	ldr	r3, [pc, #8]	@ (800bc20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20000054 	.word	0x20000054

0800bc24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc2c:	2182      	movs	r1, #130	@ 0x82
 800bc2e:	4818      	ldr	r0, [pc, #96]	@ (800bc90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc30:	f000 fd2a 	bl	800c688 <USBD_GetEpDesc>
 800bc34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc36:	2101      	movs	r1, #1
 800bc38:	4815      	ldr	r0, [pc, #84]	@ (800bc90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc3a:	f000 fd25 	bl	800c688 <USBD_GetEpDesc>
 800bc3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc40:	2181      	movs	r1, #129	@ 0x81
 800bc42:	4813      	ldr	r0, [pc, #76]	@ (800bc90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc44:	f000 fd20 	bl	800c688 <USBD_GetEpDesc>
 800bc48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2210      	movs	r2, #16
 800bc54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	711a      	strb	r2, [r3, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f042 0202 	orr.w	r2, r2, #2
 800bc68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d006      	beq.n	800bc7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	711a      	strb	r2, [r3, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f042 0202 	orr.w	r2, r2, #2
 800bc7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2243      	movs	r2, #67	@ 0x43
 800bc82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc84:	4b02      	ldr	r3, [pc, #8]	@ (800bc90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000054 	.word	0x20000054

0800bc94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc9c:	2182      	movs	r1, #130	@ 0x82
 800bc9e:	4818      	ldr	r0, [pc, #96]	@ (800bd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bca0:	f000 fcf2 	bl	800c688 <USBD_GetEpDesc>
 800bca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bca6:	2101      	movs	r1, #1
 800bca8:	4815      	ldr	r0, [pc, #84]	@ (800bd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcaa:	f000 fced 	bl	800c688 <USBD_GetEpDesc>
 800bcae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcb0:	2181      	movs	r1, #129	@ 0x81
 800bcb2:	4813      	ldr	r0, [pc, #76]	@ (800bd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcb4:	f000 fce8 	bl	800c688 <USBD_GetEpDesc>
 800bcb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2210      	movs	r2, #16
 800bcc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcd4:	711a      	strb	r2, [r3, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d006      	beq.n	800bcee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bce8:	711a      	strb	r2, [r3, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2243      	movs	r2, #67	@ 0x43
 800bcf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bcf4:	4b02      	ldr	r3, [pc, #8]	@ (800bd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000054 	.word	0x20000054

0800bd04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	220a      	movs	r2, #10
 800bd10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd12:	4b03      	ldr	r3, [pc, #12]	@ (800bd20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20000010 	.word	0x20000010

0800bd24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e009      	b.n	800bd4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	33b0      	adds	r3, #176	@ 0xb0
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	32b0      	adds	r2, #176	@ 0xb0
 800bd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e008      	b.n	800bd90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	371c      	adds	r7, #28
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	32b0      	adds	r2, #176	@ 0xb0
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e004      	b.n	800bdca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
	...

0800bdd8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	32b0      	adds	r2, #176	@ 0xb0
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e025      	b.n	800be4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be04:	2b00      	cmp	r3, #0
 800be06:	d11f      	bne.n	800be48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800be10:	4b10      	ldr	r3, [pc, #64]	@ (800be54 <USBD_CDC_TransmitPacket+0x7c>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f003 020f 	and.w	r2, r3, #15
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4403      	add	r3, r0
 800be2a:	3314      	adds	r3, #20
 800be2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800be2e:	4b09      	ldr	r3, [pc, #36]	@ (800be54 <USBD_CDC_TransmitPacket+0x7c>)
 800be30:	7819      	ldrb	r1, [r3, #0]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f002 f843 	bl	800deca <USBD_LL_Transmit>

    ret = USBD_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000097 	.word	0x20000097

0800be58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	32b0      	adds	r2, #176	@ 0xb0
 800be6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	32b0      	adds	r2, #176	@ 0xb0
 800be7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800be82:	2303      	movs	r3, #3
 800be84:	e018      	b.n	800beb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	7c1b      	ldrb	r3, [r3, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be8e:	4b0c      	ldr	r3, [pc, #48]	@ (800bec0 <USBD_CDC_ReceivePacket+0x68>)
 800be90:	7819      	ldrb	r1, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f002 f835 	bl	800df0c <USBD_LL_PrepareReceive>
 800bea2:	e008      	b.n	800beb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bea4:	4b06      	ldr	r3, [pc, #24]	@ (800bec0 <USBD_CDC_ReceivePacket+0x68>)
 800bea6:	7819      	ldrb	r1, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800beae:	2340      	movs	r3, #64	@ 0x40
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f002 f82b 	bl	800df0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20000098 	.word	0x20000098

0800bec4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	4613      	mov	r3, r2
 800bed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	e01f      	b.n	800bf1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	79fa      	ldrb	r2, [r7, #7]
 800bf0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f001 fea5 	bl	800dc60 <USBD_LL_Init>
 800bf16:	4603      	mov	r3, r0
 800bf18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3718      	adds	r7, #24
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e025      	b.n	800bf88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	32ae      	adds	r2, #174	@ 0xae
 800bf4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00f      	beq.n	800bf78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32ae      	adds	r2, #174	@ 0xae
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf68:	f107 020e 	add.w	r2, r7, #14
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4798      	blx	r3
 800bf70:	4602      	mov	r2, r0
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 fead 	bl	800dcf8 <USBD_LL_Start>
 800bf9e:	4603      	mov	r3, r0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	78fa      	ldrb	r2, [r7, #3]
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	4798      	blx	r3
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	78fa      	ldrb	r2, [r7, #3]
 800c010:	4611      	mov	r1, r2
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c01c:	2303      	movs	r3, #3
 800c01e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c020:	7bfb      	ldrb	r3, [r7, #15]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f001 f922 	bl	800d286 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c050:	461a      	mov	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c05e:	f003 031f 	and.w	r3, r3, #31
 800c062:	2b02      	cmp	r3, #2
 800c064:	d01a      	beq.n	800c09c <USBD_LL_SetupStage+0x72>
 800c066:	2b02      	cmp	r3, #2
 800c068:	d822      	bhi.n	800c0b0 <USBD_LL_SetupStage+0x86>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <USBD_LL_SetupStage+0x4a>
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d00a      	beq.n	800c088 <USBD_LL_SetupStage+0x5e>
 800c072:	e01d      	b.n	800c0b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fb77 	bl	800c770 <USBD_StdDevReq>
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]
      break;
 800c086:	e020      	b.n	800c0ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fbdf 	bl	800c854 <USBD_StdItfReq>
 800c096:	4603      	mov	r3, r0
 800c098:	73fb      	strb	r3, [r7, #15]
      break;
 800c09a:	e016      	b.n	800c0ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fc41 	bl	800c92c <USBD_StdEPReq>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ae:	e00c      	b.n	800c0ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c0b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 fe7a 	bl	800ddb8 <USBD_LL_StallEP>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c8:	bf00      	nop
  }

  return ret;
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c0e6:	7afb      	ldrb	r3, [r7, #11]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d177      	bne.n	800c1dc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c0f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	f040 80a1 	bne.w	800c242 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	8992      	ldrh	r2, [r2, #12]
 800c108:	4293      	cmp	r3, r2
 800c10a:	d91c      	bls.n	800c146 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	8992      	ldrh	r2, [r2, #12]
 800c114:	1a9a      	subs	r2, r3, r2
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	8992      	ldrh	r2, [r2, #12]
 800c122:	441a      	add	r2, r3
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6919      	ldr	r1, [r3, #16]
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	899b      	ldrh	r3, [r3, #12]
 800c130:	461a      	mov	r2, r3
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	4293      	cmp	r3, r2
 800c138:	bf38      	it	cc
 800c13a:	4613      	movcc	r3, r2
 800c13c:	461a      	mov	r2, r3
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f001 f9a8 	bl	800d494 <USBD_CtlContinueRx>
 800c144:	e07d      	b.n	800c242 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c14c:	f003 031f 	and.w	r3, r3, #31
 800c150:	2b02      	cmp	r3, #2
 800c152:	d014      	beq.n	800c17e <USBD_LL_DataOutStage+0xaa>
 800c154:	2b02      	cmp	r3, #2
 800c156:	d81d      	bhi.n	800c194 <USBD_LL_DataOutStage+0xc0>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <USBD_LL_DataOutStage+0x8e>
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d003      	beq.n	800c168 <USBD_LL_DataOutStage+0x94>
 800c160:	e018      	b.n	800c194 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	75bb      	strb	r3, [r7, #22]
            break;
 800c166:	e018      	b.n	800c19a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	4619      	mov	r1, r3
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fa6e 	bl	800c654 <USBD_CoreFindIF>
 800c178:	4603      	mov	r3, r0
 800c17a:	75bb      	strb	r3, [r7, #22]
            break;
 800c17c:	e00d      	b.n	800c19a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c184:	b2db      	uxtb	r3, r3
 800c186:	4619      	mov	r1, r3
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f000 fa70 	bl	800c66e <USBD_CoreFindEP>
 800c18e:	4603      	mov	r3, r0
 800c190:	75bb      	strb	r3, [r7, #22]
            break;
 800c192:	e002      	b.n	800c19a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	75bb      	strb	r3, [r7, #22]
            break;
 800c198:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c19a:	7dbb      	ldrb	r3, [r7, #22]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d119      	bne.n	800c1d4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d113      	bne.n	800c1d4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c1ac:	7dba      	ldrb	r2, [r7, #22]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	32ae      	adds	r2, #174	@ 0xae
 800c1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c1bc:	7dba      	ldrb	r2, [r7, #22]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c1c4:	7dba      	ldrb	r2, [r7, #22]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	32ae      	adds	r2, #174	@ 0xae
 800c1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f001 f96e 	bl	800d4b6 <USBD_CtlSendStatus>
 800c1da:	e032      	b.n	800c242 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c1dc:	7afb      	ldrb	r3, [r7, #11]
 800c1de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 fa41 	bl	800c66e <USBD_CoreFindEP>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1f0:	7dbb      	ldrb	r3, [r7, #22]
 800c1f2:	2bff      	cmp	r3, #255	@ 0xff
 800c1f4:	d025      	beq.n	800c242 <USBD_LL_DataOutStage+0x16e>
 800c1f6:	7dbb      	ldrb	r3, [r7, #22]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d122      	bne.n	800c242 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b03      	cmp	r3, #3
 800c206:	d117      	bne.n	800c238 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c208:	7dba      	ldrb	r2, [r7, #22]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	32ae      	adds	r2, #174	@ 0xae
 800c20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00f      	beq.n	800c238 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c218:	7dba      	ldrb	r2, [r7, #22]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c220:	7dba      	ldrb	r2, [r7, #22]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	32ae      	adds	r2, #174	@ 0xae
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	7afa      	ldrb	r2, [r7, #11]
 800c22e:	4611      	mov	r1, r2
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	4798      	blx	r3
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	e000      	b.n	800c244 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	460b      	mov	r3, r1
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c25a:	7afb      	ldrb	r3, [r7, #11]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d178      	bne.n	800c352 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3314      	adds	r3, #20
 800c264:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d163      	bne.n	800c338 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	8992      	ldrh	r2, [r2, #12]
 800c278:	4293      	cmp	r3, r2
 800c27a:	d91c      	bls.n	800c2b6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	8992      	ldrh	r2, [r2, #12]
 800c284:	1a9a      	subs	r2, r3, r2
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	8992      	ldrh	r2, [r2, #12]
 800c292:	441a      	add	r2, r3
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6919      	ldr	r1, [r3, #16]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f001 f8c4 	bl	800d430 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f001 fe2c 	bl	800df0c <USBD_LL_PrepareReceive>
 800c2b4:	e040      	b.n	800c338 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	899b      	ldrh	r3, [r3, #12]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d11c      	bne.n	800c2fe <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d316      	bcc.n	800c2fe <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d20f      	bcs.n	800c2fe <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f001 f8a4 	bl	800d430 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f001 fe08 	bl	800df0c <USBD_LL_PrepareReceive>
 800c2fc:	e01c      	b.n	800c338 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b03      	cmp	r3, #3
 800c308:	d10f      	bne.n	800c32a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32a:	2180      	movs	r1, #128	@ 0x80
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f001 fd43 	bl	800ddb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f001 f8d2 	bl	800d4dc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d03a      	beq.n	800c3b8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fe30 	bl	800bfa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c350:	e032      	b.n	800c3b8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f986 	bl	800c66e <USBD_CoreFindEP>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2bff      	cmp	r3, #255	@ 0xff
 800c36a:	d025      	beq.n	800c3b8 <USBD_LL_DataInStage+0x16c>
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d122      	bne.n	800c3b8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d11c      	bne.n	800c3b8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c37e:	7dfa      	ldrb	r2, [r7, #23]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	32ae      	adds	r2, #174	@ 0xae
 800c384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d014      	beq.n	800c3b8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c38e:	7dfa      	ldrb	r2, [r7, #23]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c396:	7dfa      	ldrb	r2, [r7, #23]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	32ae      	adds	r2, #174	@ 0xae
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	7afa      	ldrb	r2, [r7, #11]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c3ae:	7dbb      	ldrb	r3, [r7, #22]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c3b4:	7dbb      	ldrb	r3, [r7, #22]
 800c3b6:	e000      	b.n	800c3ba <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3718      	adds	r7, #24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d014      	beq.n	800c428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00e      	beq.n	800c428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6852      	ldr	r2, [r2, #4]
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	4611      	mov	r1, r2
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c424:	2303      	movs	r3, #3
 800c426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c428:	2340      	movs	r3, #64	@ 0x40
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f001 fc7d 	bl	800dd2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2240      	movs	r2, #64	@ 0x40
 800c440:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c444:	2340      	movs	r3, #64	@ 0x40
 800c446:	2200      	movs	r2, #0
 800c448:	2180      	movs	r1, #128	@ 0x80
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fc6f 	bl	800dd2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2240      	movs	r2, #64	@ 0x40
 800c45c:	841a      	strh	r2, [r3, #32]

  return ret;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d006      	beq.n	800c4aa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2204      	movs	r2, #4
 800c4ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d106      	bne.n	800c4e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b03      	cmp	r3, #3
 800c502:	d110      	bne.n	800c526 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c514:	69db      	ldr	r3, [r3, #28]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d005      	beq.n	800c526 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	460b      	mov	r3, r1
 800c53a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	32ae      	adds	r2, #174	@ 0xae
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c54e:	2303      	movs	r3, #3
 800c550:	e01c      	b.n	800c58c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d115      	bne.n	800c58a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	32ae      	adds	r2, #174	@ 0xae
 800c568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	32ae      	adds	r2, #174	@ 0xae
 800c57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	78fa      	ldrb	r2, [r7, #3]
 800c584:	4611      	mov	r1, r2
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	32ae      	adds	r2, #174	@ 0xae
 800c5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e01c      	b.n	800c5f0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d115      	bne.n	800c5ee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	32ae      	adds	r2, #174	@ 0xae
 800c5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00b      	beq.n	800c5ee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	32ae      	adds	r2, #174	@ 0xae
 800c5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00e      	beq.n	800c64a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	6852      	ldr	r2, [r2, #4]
 800c638:	b2d2      	uxtb	r2, r2
 800c63a:	4611      	mov	r1, r2
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	4798      	blx	r3
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c646:	2303      	movs	r3, #3
 800c648:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c660:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c67a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	885b      	ldrh	r3, [r3, #2]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	7812      	ldrb	r2, [r2, #0]
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d91f      	bls.n	800c6ee <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c6b4:	e013      	b.n	800c6de <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c6b6:	f107 030a 	add.w	r3, r7, #10
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6978      	ldr	r0, [r7, #20]
 800c6be:	f000 f81b 	bl	800c6f8 <USBD_GetNextDesc>
 800c6c2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b05      	cmp	r3, #5
 800c6ca:	d108      	bne.n	800c6de <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	789b      	ldrb	r3, [r3, #2]
 800c6d4:	78fa      	ldrb	r2, [r7, #3]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d008      	beq.n	800c6ec <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	885b      	ldrh	r3, [r3, #2]
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	897b      	ldrh	r3, [r7, #10]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d8e5      	bhi.n	800c6b6 <USBD_GetEpDesc+0x2e>
 800c6ea:	e000      	b.n	800c6ee <USBD_GetEpDesc+0x66>
          break;
 800c6ec:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c6ee:	693b      	ldr	r3, [r7, #16]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	7812      	ldrb	r2, [r2, #0]
 800c70e:	4413      	add	r3, r2
 800c710:	b29a      	uxth	r2, r3
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4413      	add	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c722:	68fb      	ldr	r3, [r7, #12]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	3301      	adds	r3, #1
 800c746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c74e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c752:	021b      	lsls	r3, r3, #8
 800c754:	b21a      	sxth	r2, r3
 800c756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	b21b      	sxth	r3, r3
 800c75e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c760:	89fb      	ldrh	r3, [r7, #14]
}
 800c762:	4618      	mov	r0, r3
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
	...

0800c770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c786:	2b40      	cmp	r3, #64	@ 0x40
 800c788:	d005      	beq.n	800c796 <USBD_StdDevReq+0x26>
 800c78a:	2b40      	cmp	r3, #64	@ 0x40
 800c78c:	d857      	bhi.n	800c83e <USBD_StdDevReq+0xce>
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00f      	beq.n	800c7b2 <USBD_StdDevReq+0x42>
 800c792:	2b20      	cmp	r3, #32
 800c794:	d153      	bne.n	800c83e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	32ae      	adds	r2, #174	@ 0xae
 800c7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	4798      	blx	r3
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b0:	e04a      	b.n	800c848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	785b      	ldrb	r3, [r3, #1]
 800c7b6:	2b09      	cmp	r3, #9
 800c7b8:	d83b      	bhi.n	800c832 <USBD_StdDevReq+0xc2>
 800c7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c0 <USBD_StdDevReq+0x50>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c815 	.word	0x0800c815
 800c7c4:	0800c829 	.word	0x0800c829
 800c7c8:	0800c833 	.word	0x0800c833
 800c7cc:	0800c81f 	.word	0x0800c81f
 800c7d0:	0800c833 	.word	0x0800c833
 800c7d4:	0800c7f3 	.word	0x0800c7f3
 800c7d8:	0800c7e9 	.word	0x0800c7e9
 800c7dc:	0800c833 	.word	0x0800c833
 800c7e0:	0800c80b 	.word	0x0800c80b
 800c7e4:	0800c7fd 	.word	0x0800c7fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa3e 	bl	800cc6c <USBD_GetDescriptor>
          break;
 800c7f0:	e024      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fba3 	bl	800cf40 <USBD_SetAddress>
          break;
 800c7fa:	e01f      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fbe2 	bl	800cfc8 <USBD_SetConfig>
 800c804:	4603      	mov	r3, r0
 800c806:	73fb      	strb	r3, [r7, #15]
          break;
 800c808:	e018      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fc85 	bl	800d11c <USBD_GetConfig>
          break;
 800c812:	e013      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fcb6 	bl	800d188 <USBD_GetStatus>
          break;
 800c81c:	e00e      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fce5 	bl	800d1f0 <USBD_SetFeature>
          break;
 800c826:	e009      	b.n	800c83c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fd09 	bl	800d242 <USBD_ClrFeature>
          break;
 800c830:	e004      	b.n	800c83c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fd60 	bl	800d2fa <USBD_CtlError>
          break;
 800c83a:	bf00      	nop
      }
      break;
 800c83c:	e004      	b.n	800c848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fd5a 	bl	800d2fa <USBD_CtlError>
      break;
 800c846:	bf00      	nop
  }

  return ret;
 800c848:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop

0800c854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c86a:	2b40      	cmp	r3, #64	@ 0x40
 800c86c:	d005      	beq.n	800c87a <USBD_StdItfReq+0x26>
 800c86e:	2b40      	cmp	r3, #64	@ 0x40
 800c870:	d852      	bhi.n	800c918 <USBD_StdItfReq+0xc4>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <USBD_StdItfReq+0x26>
 800c876:	2b20      	cmp	r3, #32
 800c878:	d14e      	bne.n	800c918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c880:	b2db      	uxtb	r3, r3
 800c882:	3b01      	subs	r3, #1
 800c884:	2b02      	cmp	r3, #2
 800c886:	d840      	bhi.n	800c90a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	889b      	ldrh	r3, [r3, #4]
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d836      	bhi.n	800c900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	889b      	ldrh	r3, [r3, #4]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff feda 	bl	800c654 <USBD_CoreFindIF>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	2bff      	cmp	r3, #255	@ 0xff
 800c8a8:	d01d      	beq.n	800c8e6 <USBD_StdItfReq+0x92>
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d11a      	bne.n	800c8e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8b0:	7bba      	ldrb	r2, [r7, #14]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	32ae      	adds	r2, #174	@ 0xae
 800c8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00f      	beq.n	800c8e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c8c0:	7bba      	ldrb	r2, [r7, #14]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8c8:	7bba      	ldrb	r2, [r7, #14]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	32ae      	adds	r2, #174	@ 0xae
 800c8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	4798      	blx	r3
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8de:	e004      	b.n	800c8ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8e4:	e001      	b.n	800c8ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	88db      	ldrh	r3, [r3, #6]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d110      	bne.n	800c914 <USBD_StdItfReq+0xc0>
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10d      	bne.n	800c914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fddc 	bl	800d4b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8fe:	e009      	b.n	800c914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fcf9 	bl	800d2fa <USBD_CtlError>
          break;
 800c908:	e004      	b.n	800c914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fcf4 	bl	800d2fa <USBD_CtlError>
          break;
 800c912:	e000      	b.n	800c916 <USBD_StdItfReq+0xc2>
          break;
 800c914:	bf00      	nop
      }
      break;
 800c916:	e004      	b.n	800c922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fced 	bl	800d2fa <USBD_CtlError>
      break;
 800c920:	bf00      	nop
  }

  return ret;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	889b      	ldrh	r3, [r3, #4]
 800c93e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c948:	2b40      	cmp	r3, #64	@ 0x40
 800c94a:	d007      	beq.n	800c95c <USBD_StdEPReq+0x30>
 800c94c:	2b40      	cmp	r3, #64	@ 0x40
 800c94e:	f200 8181 	bhi.w	800cc54 <USBD_StdEPReq+0x328>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d02a      	beq.n	800c9ac <USBD_StdEPReq+0x80>
 800c956:	2b20      	cmp	r3, #32
 800c958:	f040 817c 	bne.w	800cc54 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff fe84 	bl	800c66e <USBD_CoreFindEP>
 800c966:	4603      	mov	r3, r0
 800c968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c96a:	7b7b      	ldrb	r3, [r7, #13]
 800c96c:	2bff      	cmp	r3, #255	@ 0xff
 800c96e:	f000 8176 	beq.w	800cc5e <USBD_StdEPReq+0x332>
 800c972:	7b7b      	ldrb	r3, [r7, #13]
 800c974:	2b00      	cmp	r3, #0
 800c976:	f040 8172 	bne.w	800cc5e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c97a:	7b7a      	ldrb	r2, [r7, #13]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c982:	7b7a      	ldrb	r2, [r7, #13]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	32ae      	adds	r2, #174	@ 0xae
 800c988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 8165 	beq.w	800cc5e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c994:	7b7a      	ldrb	r2, [r7, #13]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	32ae      	adds	r2, #174	@ 0xae
 800c99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	4798      	blx	r3
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9aa:	e158      	b.n	800cc5e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	785b      	ldrb	r3, [r3, #1]
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d008      	beq.n	800c9c6 <USBD_StdEPReq+0x9a>
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	f300 8147 	bgt.w	800cc48 <USBD_StdEPReq+0x31c>
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 809b 	beq.w	800caf6 <USBD_StdEPReq+0x1ca>
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d03c      	beq.n	800ca3e <USBD_StdEPReq+0x112>
 800c9c4:	e140      	b.n	800cc48 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d002      	beq.n	800c9d8 <USBD_StdEPReq+0xac>
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d016      	beq.n	800ca04 <USBD_StdEPReq+0xd8>
 800c9d6:	e02c      	b.n	800ca32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00d      	beq.n	800c9fa <USBD_StdEPReq+0xce>
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	2b80      	cmp	r3, #128	@ 0x80
 800c9e2:	d00a      	beq.n	800c9fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9e4:	7bbb      	ldrb	r3, [r7, #14]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 f9e5 	bl	800ddb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ee:	2180      	movs	r1, #128	@ 0x80
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f001 f9e1 	bl	800ddb8 <USBD_LL_StallEP>
 800c9f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9f8:	e020      	b.n	800ca3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fc7c 	bl	800d2fa <USBD_CtlError>
              break;
 800ca02:	e01b      	b.n	800ca3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	885b      	ldrh	r3, [r3, #2]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10e      	bne.n	800ca2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <USBD_StdEPReq+0xfe>
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
 800ca14:	2b80      	cmp	r3, #128	@ 0x80
 800ca16:	d008      	beq.n	800ca2a <USBD_StdEPReq+0xfe>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88db      	ldrh	r3, [r3, #6]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d104      	bne.n	800ca2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 f9c7 	bl	800ddb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fd43 	bl	800d4b6 <USBD_CtlSendStatus>

              break;
 800ca30:	e004      	b.n	800ca3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fc60 	bl	800d2fa <USBD_CtlError>
              break;
 800ca3a:	bf00      	nop
          }
          break;
 800ca3c:	e109      	b.n	800cc52 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d002      	beq.n	800ca50 <USBD_StdEPReq+0x124>
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d016      	beq.n	800ca7c <USBD_StdEPReq+0x150>
 800ca4e:	e04b      	b.n	800cae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00d      	beq.n	800ca72 <USBD_StdEPReq+0x146>
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
 800ca58:	2b80      	cmp	r3, #128	@ 0x80
 800ca5a:	d00a      	beq.n	800ca72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f001 f9a9 	bl	800ddb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca66:	2180      	movs	r1, #128	@ 0x80
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 f9a5 	bl	800ddb8 <USBD_LL_StallEP>
 800ca6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca70:	e040      	b.n	800caf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fc40 	bl	800d2fa <USBD_CtlError>
              break;
 800ca7a:	e03b      	b.n	800caf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	885b      	ldrh	r3, [r3, #2]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d136      	bne.n	800caf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca84:	7bbb      	ldrb	r3, [r7, #14]
 800ca86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d004      	beq.n	800ca98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f001 f9af 	bl	800ddf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fd0c 	bl	800d4b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff fde3 	bl	800c66e <USBD_CoreFindEP>
 800caa8:	4603      	mov	r3, r0
 800caaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caac:	7b7b      	ldrb	r3, [r7, #13]
 800caae:	2bff      	cmp	r3, #255	@ 0xff
 800cab0:	d01f      	beq.n	800caf2 <USBD_StdEPReq+0x1c6>
 800cab2:	7b7b      	ldrb	r3, [r7, #13]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d11c      	bne.n	800caf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cab8:	7b7a      	ldrb	r2, [r7, #13]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cac0:	7b7a      	ldrb	r2, [r7, #13]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	32ae      	adds	r2, #174	@ 0xae
 800cac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d010      	beq.n	800caf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cad0:	7b7a      	ldrb	r2, [r7, #13]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	32ae      	adds	r2, #174	@ 0xae
 800cad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	4798      	blx	r3
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cae6:	e004      	b.n	800caf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fc05 	bl	800d2fa <USBD_CtlError>
              break;
 800caf0:	e000      	b.n	800caf4 <USBD_StdEPReq+0x1c8>
              break;
 800caf2:	bf00      	nop
          }
          break;
 800caf4:	e0ad      	b.n	800cc52 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d002      	beq.n	800cb08 <USBD_StdEPReq+0x1dc>
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d033      	beq.n	800cb6e <USBD_StdEPReq+0x242>
 800cb06:	e099      	b.n	800cc3c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d007      	beq.n	800cb1e <USBD_StdEPReq+0x1f2>
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	2b80      	cmp	r3, #128	@ 0x80
 800cb12:	d004      	beq.n	800cb1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fbef 	bl	800d2fa <USBD_CtlError>
                break;
 800cb1c:	e093      	b.n	800cc46 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	da0b      	bge.n	800cb3e <USBD_StdEPReq+0x212>
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	3310      	adds	r3, #16
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	4413      	add	r3, r2
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	e00b      	b.n	800cb56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb3e:	7bbb      	ldrb	r3, [r7, #14]
 800cb40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb44:	4613      	mov	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4413      	add	r3, r2
 800cb54:	3304      	adds	r3, #4
 800cb56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	330e      	adds	r3, #14
 800cb62:	2202      	movs	r2, #2
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fc44 	bl	800d3f4 <USBD_CtlSendData>
              break;
 800cb6c:	e06b      	b.n	800cc46 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da11      	bge.n	800cb9a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	f003 020f 	and.w	r2, r3, #15
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	440b      	add	r3, r1
 800cb88:	3323      	adds	r3, #35	@ 0x23
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d117      	bne.n	800cbc0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fbb1 	bl	800d2fa <USBD_CtlError>
                  break;
 800cb98:	e055      	b.n	800cc46 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
 800cb9c:	f003 020f 	and.w	r2, r3, #15
 800cba0:	6879      	ldr	r1, [r7, #4]
 800cba2:	4613      	mov	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	440b      	add	r3, r1
 800cbac:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d104      	bne.n	800cbc0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fb9e 	bl	800d2fa <USBD_CtlError>
                  break;
 800cbbe:	e042      	b.n	800cc46 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	da0b      	bge.n	800cbe0 <USBD_StdEPReq+0x2b4>
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
 800cbca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbce:	4613      	mov	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	3310      	adds	r3, #16
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	4413      	add	r3, r2
 800cbdc:	3304      	adds	r3, #4
 800cbde:	e00b      	b.n	800cbf8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbfa:	7bbb      	ldrb	r3, [r7, #14]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <USBD_StdEPReq+0x2da>
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
 800cc02:	2b80      	cmp	r3, #128	@ 0x80
 800cc04:	d103      	bne.n	800cc0e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	739a      	strb	r2, [r3, #14]
 800cc0c:	e00e      	b.n	800cc2c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f001 f90e 	bl	800de34 <USBD_LL_IsStallEP>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2201      	movs	r2, #1
 800cc22:	739a      	strb	r2, [r3, #14]
 800cc24:	e002      	b.n	800cc2c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	330e      	adds	r3, #14
 800cc30:	2202      	movs	r2, #2
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fbdd 	bl	800d3f4 <USBD_CtlSendData>
              break;
 800cc3a:	e004      	b.n	800cc46 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fb5b 	bl	800d2fa <USBD_CtlError>
              break;
 800cc44:	bf00      	nop
          }
          break;
 800cc46:	e004      	b.n	800cc52 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fb55 	bl	800d2fa <USBD_CtlError>
          break;
 800cc50:	bf00      	nop
      }
      break;
 800cc52:	e005      	b.n	800cc60 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fb4f 	bl	800d2fa <USBD_CtlError>
      break;
 800cc5c:	e000      	b.n	800cc60 <USBD_StdEPReq+0x334>
      break;
 800cc5e:	bf00      	nop
  }

  return ret;
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc76:	2300      	movs	r3, #0
 800cc78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	885b      	ldrh	r3, [r3, #2]
 800cc86:	0a1b      	lsrs	r3, r3, #8
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	2b06      	cmp	r3, #6
 800cc8e:	f200 8128 	bhi.w	800cee2 <USBD_GetDescriptor+0x276>
 800cc92:	a201      	add	r2, pc, #4	@ (adr r2, 800cc98 <USBD_GetDescriptor+0x2c>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800ccb5 	.word	0x0800ccb5
 800cc9c:	0800cccd 	.word	0x0800cccd
 800cca0:	0800cd0d 	.word	0x0800cd0d
 800cca4:	0800cee3 	.word	0x0800cee3
 800cca8:	0800cee3 	.word	0x0800cee3
 800ccac:	0800ce83 	.word	0x0800ce83
 800ccb0:	0800ceaf 	.word	0x0800ceaf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	7c12      	ldrb	r2, [r2, #16]
 800ccc0:	f107 0108 	add.w	r1, r7, #8
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4798      	blx	r3
 800ccc8:	60f8      	str	r0, [r7, #12]
      break;
 800ccca:	e112      	b.n	800cef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	7c1b      	ldrb	r3, [r3, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10d      	bne.n	800ccf0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccdc:	f107 0208 	add.w	r2, r7, #8
 800cce0:	4610      	mov	r0, r2
 800cce2:	4798      	blx	r3
 800cce4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3301      	adds	r3, #1
 800ccea:	2202      	movs	r2, #2
 800ccec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ccee:	e100      	b.n	800cef2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf8:	f107 0208 	add.w	r2, r7, #8
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3301      	adds	r3, #1
 800cd06:	2202      	movs	r2, #2
 800cd08:	701a      	strb	r2, [r3, #0]
      break;
 800cd0a:	e0f2      	b.n	800cef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	885b      	ldrh	r3, [r3, #2]
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b05      	cmp	r3, #5
 800cd14:	f200 80ac 	bhi.w	800ce70 <USBD_GetDescriptor+0x204>
 800cd18:	a201      	add	r2, pc, #4	@ (adr r2, 800cd20 <USBD_GetDescriptor+0xb4>)
 800cd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1e:	bf00      	nop
 800cd20:	0800cd39 	.word	0x0800cd39
 800cd24:	0800cd6d 	.word	0x0800cd6d
 800cd28:	0800cda1 	.word	0x0800cda1
 800cd2c:	0800cdd5 	.word	0x0800cdd5
 800cd30:	0800ce09 	.word	0x0800ce09
 800cd34:	0800ce3d 	.word	0x0800ce3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00b      	beq.n	800cd5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	7c12      	ldrb	r2, [r2, #16]
 800cd50:	f107 0108 	add.w	r1, r7, #8
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
 800cd58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd5a:	e091      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 facb 	bl	800d2fa <USBD_CtlError>
            err++;
 800cd64:	7afb      	ldrb	r3, [r7, #11]
 800cd66:	3301      	adds	r3, #1
 800cd68:	72fb      	strb	r3, [r7, #11]
          break;
 800cd6a:	e089      	b.n	800ce80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00b      	beq.n	800cd90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	7c12      	ldrb	r2, [r2, #16]
 800cd84:	f107 0108 	add.w	r1, r7, #8
 800cd88:	4610      	mov	r0, r2
 800cd8a:	4798      	blx	r3
 800cd8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd8e:	e077      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fab1 	bl	800d2fa <USBD_CtlError>
            err++;
 800cd98:	7afb      	ldrb	r3, [r7, #11]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd9e:	e06f      	b.n	800ce80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	7c12      	ldrb	r2, [r2, #16]
 800cdb8:	f107 0108 	add.w	r1, r7, #8
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	4798      	blx	r3
 800cdc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdc2:	e05d      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fa97 	bl	800d2fa <USBD_CtlError>
            err++;
 800cdcc:	7afb      	ldrb	r3, [r7, #11]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cdd2:	e055      	b.n	800ce80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	7c12      	ldrb	r2, [r2, #16]
 800cdec:	f107 0108 	add.w	r1, r7, #8
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdf6:	e043      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fa7d 	bl	800d2fa <USBD_CtlError>
            err++;
 800ce00:	7afb      	ldrb	r3, [r7, #11]
 800ce02:	3301      	adds	r3, #1
 800ce04:	72fb      	strb	r3, [r7, #11]
          break;
 800ce06:	e03b      	b.n	800ce80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7c12      	ldrb	r2, [r2, #16]
 800ce20:	f107 0108 	add.w	r1, r7, #8
 800ce24:	4610      	mov	r0, r2
 800ce26:	4798      	blx	r3
 800ce28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce2a:	e029      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fa63 	bl	800d2fa <USBD_CtlError>
            err++;
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	3301      	adds	r3, #1
 800ce38:	72fb      	strb	r3, [r7, #11]
          break;
 800ce3a:	e021      	b.n	800ce80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	7c12      	ldrb	r2, [r2, #16]
 800ce54:	f107 0108 	add.w	r1, r7, #8
 800ce58:	4610      	mov	r0, r2
 800ce5a:	4798      	blx	r3
 800ce5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5e:	e00f      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fa49 	bl	800d2fa <USBD_CtlError>
            err++;
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6e:	e007      	b.n	800ce80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fa41 	bl	800d2fa <USBD_CtlError>
          err++;
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce7e:	bf00      	nop
      }
      break;
 800ce80:	e037      	b.n	800cef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	7c1b      	ldrb	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d109      	bne.n	800ce9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce92:	f107 0208 	add.w	r2, r7, #8
 800ce96:	4610      	mov	r0, r2
 800ce98:	4798      	blx	r3
 800ce9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce9c:	e029      	b.n	800cef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fa2a 	bl	800d2fa <USBD_CtlError>
        err++;
 800cea6:	7afb      	ldrb	r3, [r7, #11]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	72fb      	strb	r3, [r7, #11]
      break;
 800ceac:	e021      	b.n	800cef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7c1b      	ldrb	r3, [r3, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10d      	bne.n	800ced2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cebe:	f107 0208 	add.w	r2, r7, #8
 800cec2:	4610      	mov	r0, r2
 800cec4:	4798      	blx	r3
 800cec6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3301      	adds	r3, #1
 800cecc:	2207      	movs	r2, #7
 800cece:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ced0:	e00f      	b.n	800cef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fa10 	bl	800d2fa <USBD_CtlError>
        err++;
 800ceda:	7afb      	ldrb	r3, [r7, #11]
 800cedc:	3301      	adds	r3, #1
 800cede:	72fb      	strb	r3, [r7, #11]
      break;
 800cee0:	e007      	b.n	800cef2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fa08 	bl	800d2fa <USBD_CtlError>
      err++;
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	3301      	adds	r3, #1
 800ceee:	72fb      	strb	r3, [r7, #11]
      break;
 800cef0:	bf00      	nop
  }

  if (err != 0U)
 800cef2:	7afb      	ldrb	r3, [r7, #11]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d11e      	bne.n	800cf36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	88db      	ldrh	r3, [r3, #6]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d016      	beq.n	800cf2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf00:	893b      	ldrh	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00e      	beq.n	800cf24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	88da      	ldrh	r2, [r3, #6]
 800cf0a:	893b      	ldrh	r3, [r7, #8]
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	bf28      	it	cs
 800cf10:	4613      	movcs	r3, r2
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf16:	893b      	ldrh	r3, [r7, #8]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	68f9      	ldr	r1, [r7, #12]
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 fa69 	bl	800d3f4 <USBD_CtlSendData>
 800cf22:	e009      	b.n	800cf38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f9e7 	bl	800d2fa <USBD_CtlError>
 800cf2c:	e004      	b.n	800cf38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fac1 	bl	800d4b6 <USBD_CtlSendStatus>
 800cf34:	e000      	b.n	800cf38 <USBD_GetDescriptor+0x2cc>
    return;
 800cf36:	bf00      	nop
  }
}
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop

0800cf40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	889b      	ldrh	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d131      	bne.n	800cfb6 <USBD_SetAddress+0x76>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	88db      	ldrh	r3, [r3, #6]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d12d      	bne.n	800cfb6 <USBD_SetAddress+0x76>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	885b      	ldrh	r3, [r3, #2]
 800cf5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf60:	d829      	bhi.n	800cfb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	885b      	ldrh	r3, [r3, #2]
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d104      	bne.n	800cf84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f9bc 	bl	800d2fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf82:	e01d      	b.n	800cfc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7bfa      	ldrb	r2, [r7, #15]
 800cf88:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 ff7b 	bl	800de8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa8d 	bl	800d4b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d004      	beq.n	800cfac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfaa:	e009      	b.n	800cfc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb4:	e004      	b.n	800cfc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f99e 	bl	800d2fa <USBD_CtlError>
  }
}
 800cfbe:	bf00      	nop
 800cfc0:	bf00      	nop
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	885b      	ldrh	r3, [r3, #2]
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b4e      	ldr	r3, [pc, #312]	@ (800d118 <USBD_SetConfig+0x150>)
 800cfde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfe0:	4b4d      	ldr	r3, [pc, #308]	@ (800d118 <USBD_SetConfig+0x150>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d905      	bls.n	800cff4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f985 	bl	800d2fa <USBD_CtlError>
    return USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e08c      	b.n	800d10e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d002      	beq.n	800d006 <USBD_SetConfig+0x3e>
 800d000:	2b03      	cmp	r3, #3
 800d002:	d029      	beq.n	800d058 <USBD_SetConfig+0x90>
 800d004:	e075      	b.n	800d0f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d006:	4b44      	ldr	r3, [pc, #272]	@ (800d118 <USBD_SetConfig+0x150>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d020      	beq.n	800d050 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d00e:	4b42      	ldr	r3, [pc, #264]	@ (800d118 <USBD_SetConfig+0x150>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d018:	4b3f      	ldr	r3, [pc, #252]	@ (800d118 <USBD_SetConfig+0x150>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7fe ffcd 	bl	800bfbe <USBD_SetClassConfig>
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d008      	beq.n	800d040 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f962 	bl	800d2fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2202      	movs	r2, #2
 800d03a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d03e:	e065      	b.n	800d10c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fa38 	bl	800d4b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2203      	movs	r2, #3
 800d04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d04e:	e05d      	b.n	800d10c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fa30 	bl	800d4b6 <USBD_CtlSendStatus>
      break;
 800d056:	e059      	b.n	800d10c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d058:	4b2f      	ldr	r3, [pc, #188]	@ (800d118 <USBD_SetConfig+0x150>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d112      	bne.n	800d086 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2202      	movs	r2, #2
 800d064:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d068:	4b2b      	ldr	r3, [pc, #172]	@ (800d118 <USBD_SetConfig+0x150>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d072:	4b29      	ldr	r3, [pc, #164]	@ (800d118 <USBD_SetConfig+0x150>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7fe ffbc 	bl	800bff6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fa19 	bl	800d4b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d084:	e042      	b.n	800d10c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d086:	4b24      	ldr	r3, [pc, #144]	@ (800d118 <USBD_SetConfig+0x150>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d02a      	beq.n	800d0ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7fe ffaa 	bl	800bff6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d118 <USBD_SetConfig+0x150>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <USBD_SetConfig+0x150>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fe ff83 	bl	800bfbe <USBD_SetClassConfig>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00f      	beq.n	800d0e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f918 	bl	800d2fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7fe ff8f 	bl	800bff6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d0e0:	e014      	b.n	800d10c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f9e7 	bl	800d4b6 <USBD_CtlSendStatus>
      break;
 800d0e8:	e010      	b.n	800d10c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f9e3 	bl	800d4b6 <USBD_CtlSendStatus>
      break;
 800d0f0:	e00c      	b.n	800d10c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f900 	bl	800d2fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0fa:	4b07      	ldr	r3, [pc, #28]	@ (800d118 <USBD_SetConfig+0x150>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	4619      	mov	r1, r3
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7fe ff78 	bl	800bff6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	73fb      	strb	r3, [r7, #15]
      break;
 800d10a:	bf00      	nop
  }

  return ret;
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20000b08 	.word	0x20000b08

0800d11c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d004      	beq.n	800d138 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f8e2 	bl	800d2fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d136:	e023      	b.n	800d180 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b02      	cmp	r3, #2
 800d142:	dc02      	bgt.n	800d14a <USBD_GetConfig+0x2e>
 800d144:	2b00      	cmp	r3, #0
 800d146:	dc03      	bgt.n	800d150 <USBD_GetConfig+0x34>
 800d148:	e015      	b.n	800d176 <USBD_GetConfig+0x5a>
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d00b      	beq.n	800d166 <USBD_GetConfig+0x4a>
 800d14e:	e012      	b.n	800d176 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3308      	adds	r3, #8
 800d15a:	2201      	movs	r2, #1
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f948 	bl	800d3f4 <USBD_CtlSendData>
        break;
 800d164:	e00c      	b.n	800d180 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3304      	adds	r3, #4
 800d16a:	2201      	movs	r2, #1
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f940 	bl	800d3f4 <USBD_CtlSendData>
        break;
 800d174:	e004      	b.n	800d180 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f8be 	bl	800d2fa <USBD_CtlError>
        break;
 800d17e:	bf00      	nop
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	3b01      	subs	r3, #1
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d81e      	bhi.n	800d1de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	88db      	ldrh	r3, [r3, #6]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d004      	beq.n	800d1b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f8a5 	bl	800d2fa <USBD_CtlError>
        break;
 800d1b0:	e01a      	b.n	800d1e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d005      	beq.n	800d1ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f043 0202 	orr.w	r2, r3, #2
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	330c      	adds	r3, #12
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f90c 	bl	800d3f4 <USBD_CtlSendData>
      break;
 800d1dc:	e004      	b.n	800d1e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f88a 	bl	800d2fa <USBD_CtlError>
      break;
 800d1e6:	bf00      	nop
  }
}
 800d1e8:	bf00      	nop
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	885b      	ldrh	r3, [r3, #2]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d107      	bne.n	800d212 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f953 	bl	800d4b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d210:	e013      	b.n	800d23a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	885b      	ldrh	r3, [r3, #2]
 800d216:	2b02      	cmp	r3, #2
 800d218:	d10b      	bne.n	800d232 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	889b      	ldrh	r3, [r3, #4]
 800d21e:	0a1b      	lsrs	r3, r3, #8
 800d220:	b29b      	uxth	r3, r3
 800d222:	b2da      	uxtb	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f943 	bl	800d4b6 <USBD_CtlSendStatus>
}
 800d230:	e003      	b.n	800d23a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f860 	bl	800d2fa <USBD_CtlError>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b082      	sub	sp, #8
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d252:	b2db      	uxtb	r3, r3
 800d254:	3b01      	subs	r3, #1
 800d256:	2b02      	cmp	r3, #2
 800d258:	d80b      	bhi.n	800d272 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	885b      	ldrh	r3, [r3, #2]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d10c      	bne.n	800d27c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f923 	bl	800d4b6 <USBD_CtlSendStatus>
      }
      break;
 800d270:	e004      	b.n	800d27c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f840 	bl	800d2fa <USBD_CtlError>
      break;
 800d27a:	e000      	b.n	800d27e <USBD_ClrFeature+0x3c>
      break;
 800d27c:	bf00      	nop
  }
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	781a      	ldrb	r2, [r3, #0]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	781a      	ldrb	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fa3d 	bl	800c730 <SWAPBYTE>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff fa30 	bl	800c730 <SWAPBYTE>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff fa23 	bl	800c730 <SWAPBYTE>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	80da      	strh	r2, [r3, #6]
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b082      	sub	sp, #8
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d304:	2180      	movs	r1, #128	@ 0x80
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fd56 	bl	800ddb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d30c:	2100      	movs	r1, #0
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fd52 	bl	800ddb8 <USBD_LL_StallEP>
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d042      	beq.n	800d3b8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d336:	6938      	ldr	r0, [r7, #16]
 800d338:	f000 f842 	bl	800d3c0 <USBD_GetLen>
 800d33c:	4603      	mov	r3, r0
 800d33e:	3301      	adds	r3, #1
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d346:	d808      	bhi.n	800d35a <USBD_GetString+0x3e>
 800d348:	6938      	ldr	r0, [r7, #16]
 800d34a:	f000 f839 	bl	800d3c0 <USBD_GetLen>
 800d34e:	4603      	mov	r3, r0
 800d350:	3301      	adds	r3, #1
 800d352:	b29b      	uxth	r3, r3
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	b29a      	uxth	r2, r3
 800d358:	e001      	b.n	800d35e <USBD_GetString+0x42>
 800d35a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	4413      	add	r3, r2
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7812      	ldrb	r2, [r2, #0]
 800d36c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	3301      	adds	r3, #1
 800d372:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	4413      	add	r3, r2
 800d37a:	2203      	movs	r2, #3
 800d37c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	3301      	adds	r3, #1
 800d382:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d384:	e013      	b.n	800d3ae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d386:	7dfb      	ldrb	r3, [r7, #23]
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	4413      	add	r3, r2
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	7812      	ldrb	r2, [r2, #0]
 800d390:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	3301      	adds	r3, #1
 800d396:	613b      	str	r3, [r7, #16]
    idx++;
 800d398:	7dfb      	ldrb	r3, [r7, #23]
 800d39a:	3301      	adds	r3, #1
 800d39c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e7      	bne.n	800d386 <USBD_GetString+0x6a>
 800d3b6:	e000      	b.n	800d3ba <USBD_GetString+0x9e>
    return;
 800d3b8:	bf00      	nop
  }
}
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3d0:	e005      	b.n	800d3de <USBD_GetLen+0x1e>
  {
    len++;
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1f5      	bne.n	800d3d2 <USBD_GetLen+0x12>
  }

  return len;
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2202      	movs	r2, #2
 800d404:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	2100      	movs	r1, #0
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 fd52 	bl	800deca <USBD_LL_Transmit>

  return USBD_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	2100      	movs	r1, #0
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f000 fd41 	bl	800deca <USBD_LL_Transmit>

  return USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2203      	movs	r2, #3
 800d462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	2100      	movs	r1, #0
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fd41 	bl	800df0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f000 fd30 	bl	800df0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2204      	movs	r2, #4
 800d4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fcfc 	bl	800deca <USBD_LL_Transmit>

  return USBD_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2205      	movs	r2, #5
 800d4e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fd0a 	bl	800df0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
	...

0800d504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d508:	2200      	movs	r2, #0
 800d50a:	4912      	ldr	r1, [pc, #72]	@ (800d554 <MX_USB_DEVICE_Init+0x50>)
 800d50c:	4812      	ldr	r0, [pc, #72]	@ (800d558 <MX_USB_DEVICE_Init+0x54>)
 800d50e:	f7fe fcd9 	bl	800bec4 <USBD_Init>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d001      	beq.n	800d51c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d518:	f7f4 f9a0 	bl	800185c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d51c:	490f      	ldr	r1, [pc, #60]	@ (800d55c <MX_USB_DEVICE_Init+0x58>)
 800d51e:	480e      	ldr	r0, [pc, #56]	@ (800d558 <MX_USB_DEVICE_Init+0x54>)
 800d520:	f7fe fd00 	bl	800bf24 <USBD_RegisterClass>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d001      	beq.n	800d52e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d52a:	f7f4 f997 	bl	800185c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d52e:	490c      	ldr	r1, [pc, #48]	@ (800d560 <MX_USB_DEVICE_Init+0x5c>)
 800d530:	4809      	ldr	r0, [pc, #36]	@ (800d558 <MX_USB_DEVICE_Init+0x54>)
 800d532:	f7fe fbf7 	bl	800bd24 <USBD_CDC_RegisterInterface>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d53c:	f7f4 f98e 	bl	800185c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d540:	4805      	ldr	r0, [pc, #20]	@ (800d558 <MX_USB_DEVICE_Init+0x54>)
 800d542:	f7fe fd25 	bl	800bf90 <USBD_Start>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d54c:	f7f4 f986 	bl	800185c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d550:	bf00      	nop
 800d552:	bd80      	pop	{r7, pc}
 800d554:	200000b8 	.word	0x200000b8
 800d558:	20000b0c 	.word	0x20000b0c
 800d55c:	2000001c 	.word	0x2000001c
 800d560:	200000a4 	.word	0x200000a4

0800d564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d568:	2200      	movs	r2, #0
 800d56a:	4905      	ldr	r1, [pc, #20]	@ (800d580 <CDC_Init_FS+0x1c>)
 800d56c:	4805      	ldr	r0, [pc, #20]	@ (800d584 <CDC_Init_FS+0x20>)
 800d56e:	f7fe fbf3 	bl	800bd58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d572:	4905      	ldr	r1, [pc, #20]	@ (800d588 <CDC_Init_FS+0x24>)
 800d574:	4803      	ldr	r0, [pc, #12]	@ (800d584 <CDC_Init_FS+0x20>)
 800d576:	f7fe fc11 	bl	800bd9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d57a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20000fe8 	.word	0x20000fe8
 800d584:	20000b0c 	.word	0x20000b0c
 800d588:	20000de8 	.word	0x20000de8

0800d58c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d592:	4618      	mov	r0, r3
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	6039      	str	r1, [r7, #0]
 800d5a6:	71fb      	strb	r3, [r7, #7]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b23      	cmp	r3, #35	@ 0x23
 800d5b0:	f200 8098 	bhi.w	800d6e4 <CDC_Control_FS+0x148>
 800d5b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d5bc <CDC_Control_FS+0x20>)
 800d5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ba:	bf00      	nop
 800d5bc:	0800d6e5 	.word	0x0800d6e5
 800d5c0:	0800d6e5 	.word	0x0800d6e5
 800d5c4:	0800d6e5 	.word	0x0800d6e5
 800d5c8:	0800d6e5 	.word	0x0800d6e5
 800d5cc:	0800d6e5 	.word	0x0800d6e5
 800d5d0:	0800d6e5 	.word	0x0800d6e5
 800d5d4:	0800d6e5 	.word	0x0800d6e5
 800d5d8:	0800d6e5 	.word	0x0800d6e5
 800d5dc:	0800d6e5 	.word	0x0800d6e5
 800d5e0:	0800d6e5 	.word	0x0800d6e5
 800d5e4:	0800d6e5 	.word	0x0800d6e5
 800d5e8:	0800d6e5 	.word	0x0800d6e5
 800d5ec:	0800d6e5 	.word	0x0800d6e5
 800d5f0:	0800d6e5 	.word	0x0800d6e5
 800d5f4:	0800d6e5 	.word	0x0800d6e5
 800d5f8:	0800d6e5 	.word	0x0800d6e5
 800d5fc:	0800d6e5 	.word	0x0800d6e5
 800d600:	0800d6e5 	.word	0x0800d6e5
 800d604:	0800d6e5 	.word	0x0800d6e5
 800d608:	0800d6e5 	.word	0x0800d6e5
 800d60c:	0800d6e5 	.word	0x0800d6e5
 800d610:	0800d6e5 	.word	0x0800d6e5
 800d614:	0800d6e5 	.word	0x0800d6e5
 800d618:	0800d6e5 	.word	0x0800d6e5
 800d61c:	0800d6e5 	.word	0x0800d6e5
 800d620:	0800d6e5 	.word	0x0800d6e5
 800d624:	0800d6e5 	.word	0x0800d6e5
 800d628:	0800d6e5 	.word	0x0800d6e5
 800d62c:	0800d6e5 	.word	0x0800d6e5
 800d630:	0800d6e5 	.word	0x0800d6e5
 800d634:	0800d6e5 	.word	0x0800d6e5
 800d638:	0800d6e5 	.word	0x0800d6e5
 800d63c:	0800d64d 	.word	0x0800d64d
 800d640:	0800d691 	.word	0x0800d691
 800d644:	0800d6e5 	.word	0x0800d6e5
 800d648:	0800d6e5 	.word	0x0800d6e5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8 ) | (pbuf[2] << 16) | pbuf[3] << 24);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	461a      	mov	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	021b      	lsls	r3, r3, #8
 800d65a:	431a      	orrs	r2, r3
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	3302      	adds	r3, #2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	041b      	lsls	r3, r3, #16
 800d664:	431a      	orrs	r2, r3
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	3303      	adds	r3, #3
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	061b      	lsls	r3, r3, #24
 800d66e:	4313      	orrs	r3, r2
 800d670:	461a      	mov	r2, r3
 800d672:	4b20      	ldr	r3, [pc, #128]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d674:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	791a      	ldrb	r2, [r3, #4]
 800d67a:	4b1e      	ldr	r3, [pc, #120]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d67c:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	795a      	ldrb	r2, [r3, #5]
 800d682:	4b1c      	ldr	r3, [pc, #112]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d684:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	799a      	ldrb	r2, [r3, #6]
 800d68a:	4b1a      	ldr	r3, [pc, #104]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d68c:	719a      	strb	r2, [r3, #6]

    break;
 800d68e:	e02a      	b.n	800d6e6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d690:	4b18      	ldr	r3, [pc, #96]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	b2da      	uxtb	r2, r3
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d69a:	4b16      	ldr	r3, [pc, #88]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	0a1a      	lsrs	r2, r3, #8
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	b2d2      	uxtb	r2, r2
 800d6a6:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d6a8:	4b12      	ldr	r3, [pc, #72]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	0c1a      	lsrs	r2, r3, #16
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	3302      	adds	r3, #2
 800d6b2:	b2d2      	uxtb	r2, r2
 800d6b4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	0e1a      	lsrs	r2, r3, #24
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	3303      	adds	r3, #3
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d6ca:	7912      	ldrb	r2, [r2, #4]
 800d6cc:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	3305      	adds	r3, #5
 800d6d2:	4a08      	ldr	r2, [pc, #32]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d6d4:	7952      	ldrb	r2, [r2, #5]
 800d6d6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	3306      	adds	r3, #6
 800d6dc:	4a05      	ldr	r2, [pc, #20]	@ (800d6f4 <CDC_Control_FS+0x158>)
 800d6de:	7992      	ldrb	r2, [r2, #6]
 800d6e0:	701a      	strb	r2, [r3, #0]
    break;
 800d6e2:	e000      	b.n	800d6e6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6e4:	bf00      	nop
  }

  return (USBD_OK);
 800d6e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	2000009c 	.word	0x2000009c

0800d6f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(MyPtrRx != NULL)
 800d702:	4b0b      	ldr	r3, [pc, #44]	@ (800d730 <CDC_Receive_FS+0x38>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d006      	beq.n	800d718 <CDC_Receive_FS+0x20>
	  MyPtrRx(Buf, *Len);
 800d70a:	4b09      	ldr	r3, [pc, #36]	@ (800d730 <CDC_Receive_FS+0x38>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	6812      	ldr	r2, [r2, #0]
 800d712:	4611      	mov	r1, r2
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	4806      	ldr	r0, [pc, #24]	@ (800d734 <CDC_Receive_FS+0x3c>)
 800d71c:	f7fe fb3e 	bl	800bd9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d720:	4804      	ldr	r0, [pc, #16]	@ (800d734 <CDC_Receive_FS+0x3c>)
 800d722:	f7fe fb99 	bl	800be58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d726:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	200011e8 	.word	0x200011e8
 800d734:	20000b0c 	.word	0x20000b0c

0800d738 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d748:	4b0d      	ldr	r3, [pc, #52]	@ (800d780 <CDC_Transmit_FS+0x48>)
 800d74a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d74e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e00b      	b.n	800d776 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d75e:	887b      	ldrh	r3, [r7, #2]
 800d760:	461a      	mov	r2, r3
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	4806      	ldr	r0, [pc, #24]	@ (800d780 <CDC_Transmit_FS+0x48>)
 800d766:	f7fe faf7 	bl	800bd58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d76a:	4805      	ldr	r0, [pc, #20]	@ (800d780 <CDC_Transmit_FS+0x48>)
 800d76c:	f7fe fb34 	bl	800bdd8 <USBD_CDC_TransmitPacket>
 800d770:	4603      	mov	r3, r0
 800d772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20000b0c 	.word	0x20000b0c

0800d784 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
	...

0800d7a8 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d7b0:	4a04      	ldr	r2, [pc, #16]	@ (800d7c4 <CDC_Attach_Rx+0x1c>)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6013      	str	r3, [r2, #0]
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	200011e8 	.word	0x200011e8

0800d7c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2212      	movs	r2, #18
 800d7d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d7da:	4b03      	ldr	r3, [pc, #12]	@ (800d7e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	200000d4 	.word	0x200000d4

0800d7ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6039      	str	r1, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2204      	movs	r2, #4
 800d7fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7fe:	4b03      	ldr	r3, [pc, #12]	@ (800d80c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	200000e8 	.word	0x200000e8

0800d810 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d105      	bne.n	800d82e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	4907      	ldr	r1, [pc, #28]	@ (800d844 <USBD_FS_ProductStrDescriptor+0x34>)
 800d826:	4808      	ldr	r0, [pc, #32]	@ (800d848 <USBD_FS_ProductStrDescriptor+0x38>)
 800d828:	f7ff fd78 	bl	800d31c <USBD_GetString>
 800d82c:	e004      	b.n	800d838 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	4904      	ldr	r1, [pc, #16]	@ (800d844 <USBD_FS_ProductStrDescriptor+0x34>)
 800d832:	4805      	ldr	r0, [pc, #20]	@ (800d848 <USBD_FS_ProductStrDescriptor+0x38>)
 800d834:	f7ff fd72 	bl	800d31c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d838:	4b02      	ldr	r3, [pc, #8]	@ (800d844 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	200011ec 	.word	0x200011ec
 800d848:	0800e06c 	.word	0x0800e06c

0800d84c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	4904      	ldr	r1, [pc, #16]	@ (800d86c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d85c:	4804      	ldr	r0, [pc, #16]	@ (800d870 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d85e:	f7ff fd5d 	bl	800d31c <USBD_GetString>
  return USBD_StrDesc;
 800d862:	4b02      	ldr	r3, [pc, #8]	@ (800d86c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	200011ec 	.word	0x200011ec
 800d870:	0800e084 	.word	0x0800e084

0800d874 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	6039      	str	r1, [r7, #0]
 800d87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	221a      	movs	r2, #26
 800d884:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d886:	f000 f843 	bl	800d910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d88a:	4b02      	ldr	r3, [pc, #8]	@ (800d894 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	200000ec 	.word	0x200000ec

0800d898 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4907      	ldr	r1, [pc, #28]	@ (800d8cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8ae:	4808      	ldr	r0, [pc, #32]	@ (800d8d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8b0:	f7ff fd34 	bl	800d31c <USBD_GetString>
 800d8b4:	e004      	b.n	800d8c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	4904      	ldr	r1, [pc, #16]	@ (800d8cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8ba:	4805      	ldr	r0, [pc, #20]	@ (800d8d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8bc:	f7ff fd2e 	bl	800d31c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8c0:	4b02      	ldr	r3, [pc, #8]	@ (800d8cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	200011ec 	.word	0x200011ec
 800d8d0:	0800e098 	.word	0x0800e098

0800d8d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	4603      	mov	r3, r0
 800d8dc:	6039      	str	r1, [r7, #0]
 800d8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d105      	bne.n	800d8f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	4907      	ldr	r1, [pc, #28]	@ (800d908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8ea:	4808      	ldr	r0, [pc, #32]	@ (800d90c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8ec:	f7ff fd16 	bl	800d31c <USBD_GetString>
 800d8f0:	e004      	b.n	800d8fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	4904      	ldr	r1, [pc, #16]	@ (800d908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8f6:	4805      	ldr	r0, [pc, #20]	@ (800d90c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8f8:	f7ff fd10 	bl	800d31c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8fc:	4b02      	ldr	r3, [pc, #8]	@ (800d908 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	200011ec 	.word	0x200011ec
 800d90c:	0800e0a4 	.word	0x0800e0a4

0800d910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d916:	4b0f      	ldr	r3, [pc, #60]	@ (800d954 <Get_SerialNum+0x44>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d91c:	4b0e      	ldr	r3, [pc, #56]	@ (800d958 <Get_SerialNum+0x48>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d922:	4b0e      	ldr	r3, [pc, #56]	@ (800d95c <Get_SerialNum+0x4c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4413      	add	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d936:	2208      	movs	r2, #8
 800d938:	4909      	ldr	r1, [pc, #36]	@ (800d960 <Get_SerialNum+0x50>)
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 f814 	bl	800d968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d940:	2204      	movs	r2, #4
 800d942:	4908      	ldr	r1, [pc, #32]	@ (800d964 <Get_SerialNum+0x54>)
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f000 f80f 	bl	800d968 <IntToUnicode>
  }
}
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	1fff7a10 	.word	0x1fff7a10
 800d958:	1fff7a14 	.word	0x1fff7a14
 800d95c:	1fff7a18 	.word	0x1fff7a18
 800d960:	200000ee 	.word	0x200000ee
 800d964:	200000fe 	.word	0x200000fe

0800d968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4613      	mov	r3, r2
 800d974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d97a:	2300      	movs	r3, #0
 800d97c:	75fb      	strb	r3, [r7, #23]
 800d97e:	e027      	b.n	800d9d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	0f1b      	lsrs	r3, r3, #28
 800d984:	2b09      	cmp	r3, #9
 800d986:	d80b      	bhi.n	800d9a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	0f1b      	lsrs	r3, r3, #28
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4619      	mov	r1, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	440b      	add	r3, r1
 800d998:	3230      	adds	r2, #48	@ 0x30
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e00a      	b.n	800d9b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	0f1b      	lsrs	r3, r3, #28
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	7dfb      	ldrb	r3, [r7, #23]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	440b      	add	r3, r1
 800d9b0:	3237      	adds	r2, #55	@ 0x37
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9ca:	7dfb      	ldrb	r3, [r7, #23]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	75fb      	strb	r3, [r7, #23]
 800d9d0:	7dfa      	ldrb	r2, [r7, #23]
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d3d3      	bcc.n	800d980 <IntToUnicode+0x18>
  }
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	@ 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9f0:	f107 0314 	add.w	r3, r7, #20
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	605a      	str	r2, [r3, #4]
 800d9fa:	609a      	str	r2, [r3, #8]
 800d9fc:	60da      	str	r2, [r3, #12]
 800d9fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800da08:	d13a      	bne.n	800da80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da0a:	2300      	movs	r3, #0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	4b1e      	ldr	r3, [pc, #120]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da12:	4a1d      	ldr	r2, [pc, #116]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da14:	f043 0301 	orr.w	r3, r3, #1
 800da18:	6313      	str	r3, [r2, #48]	@ 0x30
 800da1a:	4b1b      	ldr	r3, [pc, #108]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	613b      	str	r3, [r7, #16]
 800da24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800da2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da2c:	2302      	movs	r3, #2
 800da2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da30:	2300      	movs	r3, #0
 800da32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da34:	2303      	movs	r3, #3
 800da36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da38:	230a      	movs	r3, #10
 800da3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da3c:	f107 0314 	add.w	r3, r7, #20
 800da40:	4619      	mov	r1, r3
 800da42:	4812      	ldr	r0, [pc, #72]	@ (800da8c <HAL_PCD_MspInit+0xa4>)
 800da44:	f7f6 f84e 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da48:	4b0f      	ldr	r3, [pc, #60]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da4c:	4a0e      	ldr	r2, [pc, #56]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da52:	6353      	str	r3, [r2, #52]	@ 0x34
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5c:	4a0a      	ldr	r2, [pc, #40]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da62:	6453      	str	r3, [r2, #68]	@ 0x44
 800da64:	4b08      	ldr	r3, [pc, #32]	@ (800da88 <HAL_PCD_MspInit+0xa0>)
 800da66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da70:	2200      	movs	r2, #0
 800da72:	2100      	movs	r1, #0
 800da74:	2043      	movs	r0, #67	@ 0x43
 800da76:	f7f5 fc52 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da7a:	2043      	movs	r0, #67	@ 0x43
 800da7c:	f7f5 fc6b 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da80:	bf00      	nop
 800da82:	3728      	adds	r7, #40	@ 0x28
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	40023800 	.word	0x40023800
 800da8c:	40020000 	.word	0x40020000

0800da90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800daa4:	4619      	mov	r1, r3
 800daa6:	4610      	mov	r0, r2
 800daa8:	f7fe fabf 	bl	800c02a <USBD_LL_SetupStage>
}
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dac6:	78fa      	ldrb	r2, [r7, #3]
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	4613      	mov	r3, r2
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	4413      	add	r3, r2
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	440b      	add	r3, r1
 800dad4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	78fb      	ldrb	r3, [r7, #3]
 800dadc:	4619      	mov	r1, r3
 800dade:	f7fe faf9 	bl	800c0d4 <USBD_LL_DataOutStage>
}
 800dae2:	bf00      	nop
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b082      	sub	sp, #8
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	460b      	mov	r3, r1
 800daf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dafc:	78fa      	ldrb	r2, [r7, #3]
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4613      	mov	r3, r2
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	4413      	add	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	440b      	add	r3, r1
 800db0a:	3320      	adds	r3, #32
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	78fb      	ldrb	r3, [r7, #3]
 800db10:	4619      	mov	r1, r3
 800db12:	f7fe fb9b 	bl	800c24c <USBD_LL_DataInStage>
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fcdf 	bl	800c4f0 <USBD_LL_SOF>
}
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db42:	2301      	movs	r3, #1
 800db44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	79db      	ldrb	r3, [r3, #7]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d001      	beq.n	800db52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db4e:	f7f3 fe85 	bl	800185c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db58:	7bfa      	ldrb	r2, [r7, #15]
 800db5a:	4611      	mov	r1, r2
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fc83 	bl	800c468 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe fc2a 	bl	800c3c2 <USBD_LL_Reset>
}
 800db6e:	bf00      	nop
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
	...

0800db78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fc7e 	bl	800c488 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	6812      	ldr	r2, [r2, #0]
 800db9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db9e:	f043 0301 	orr.w	r3, r3, #1
 800dba2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7adb      	ldrb	r3, [r3, #11]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d005      	beq.n	800dbb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbac:	4b04      	ldr	r3, [pc, #16]	@ (800dbc0 <HAL_PCD_SuspendCallback+0x48>)
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	4a03      	ldr	r2, [pc, #12]	@ (800dbc0 <HAL_PCD_SuspendCallback+0x48>)
 800dbb2:	f043 0306 	orr.w	r3, r3, #6
 800dbb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	e000ed00 	.word	0xe000ed00

0800dbc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe fc74 	bl	800c4c0 <USBD_LL_Resume>
}
 800dbd8:	bf00      	nop
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbf2:	78fa      	ldrb	r2, [r7, #3]
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe fccc 	bl	800c594 <USBD_LL_IsoOUTIncomplete>
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc16:	78fa      	ldrb	r2, [r7, #3]
 800dc18:	4611      	mov	r1, r2
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fc88 	bl	800c530 <USBD_LL_IsoINIncomplete>
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe fcde 	bl	800c5f8 <USBD_LL_DevConnected>
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fcdb 	bl	800c60e <USBD_LL_DevDisconnected>
}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d13c      	bne.n	800dcea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc70:	4a20      	ldr	r2, [pc, #128]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4a1e      	ldr	r2, [pc, #120]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc80:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dc88:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc8e:	4b19      	ldr	r3, [pc, #100]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc90:	2202      	movs	r2, #2
 800dc92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc94:	4b17      	ldr	r3, [pc, #92]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc9a:	4b16      	ldr	r3, [pc, #88]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dca0:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dca6:	4b13      	ldr	r3, [pc, #76]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dcac:	4b11      	ldr	r3, [pc, #68]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dcb2:	4b10      	ldr	r3, [pc, #64]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dcb8:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dcbe:	480d      	ldr	r0, [pc, #52]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcc0:	f7f9 fb6f 	bl	80073a2 <HAL_PCD_Init>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dcca:	f7f3 fdc7 	bl	800185c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcce:	2180      	movs	r1, #128	@ 0x80
 800dcd0:	4808      	ldr	r0, [pc, #32]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcd2:	f7fa fd9c 	bl	800880e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dcd6:	2240      	movs	r2, #64	@ 0x40
 800dcd8:	2100      	movs	r1, #0
 800dcda:	4806      	ldr	r0, [pc, #24]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dcdc:	f7fa fd50 	bl	8008780 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dce0:	2280      	movs	r2, #128	@ 0x80
 800dce2:	2101      	movs	r1, #1
 800dce4:	4803      	ldr	r0, [pc, #12]	@ (800dcf4 <USBD_LL_Init+0x94>)
 800dce6:	f7fa fd4b 	bl	8008780 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	200013ec 	.word	0x200013ec

0800dcf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f9 fc56 	bl	80075c0 <HAL_PCD_Start>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f000 f942 	bl	800dfa4 <USBD_Get_USB_Status>
 800dd20:	4603      	mov	r3, r0
 800dd22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	4608      	mov	r0, r1
 800dd38:	4611      	mov	r1, r2
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	70fb      	strb	r3, [r7, #3]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70bb      	strb	r3, [r7, #2]
 800dd44:	4613      	mov	r3, r2
 800dd46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd56:	78bb      	ldrb	r3, [r7, #2]
 800dd58:	883a      	ldrh	r2, [r7, #0]
 800dd5a:	78f9      	ldrb	r1, [r7, #3]
 800dd5c:	f7fa f92a 	bl	8007fb4 <HAL_PCD_EP_Open>
 800dd60:	4603      	mov	r3, r0
 800dd62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 f91c 	bl	800dfa4 <USBD_Get_USB_Status>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	460b      	mov	r3, r1
 800dd84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd94:	78fa      	ldrb	r2, [r7, #3]
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fa f975 	bl	8008088 <HAL_PCD_EP_Close>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 f8fd 	bl	800dfa4 <USBD_Get_USB_Status>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddd2:	78fa      	ldrb	r2, [r7, #3]
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fa fa2d 	bl	8008236 <HAL_PCD_EP_SetStall>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 f8de 	bl	800dfa4 <USBD_Get_USB_Status>
 800dde8:	4603      	mov	r3, r0
 800ddea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	460b      	mov	r3, r1
 800de00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de10:	78fa      	ldrb	r2, [r7, #3]
 800de12:	4611      	mov	r1, r2
 800de14:	4618      	mov	r0, r3
 800de16:	f7fa fa71 	bl	80082fc <HAL_PCD_EP_ClrStall>
 800de1a:	4603      	mov	r3, r0
 800de1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f8bf 	bl	800dfa4 <USBD_Get_USB_Status>
 800de26:	4603      	mov	r3, r0
 800de28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	da0b      	bge.n	800de68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de56:	68f9      	ldr	r1, [r7, #12]
 800de58:	4613      	mov	r3, r2
 800de5a:	00db      	lsls	r3, r3, #3
 800de5c:	4413      	add	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	440b      	add	r3, r1
 800de62:	3316      	adds	r3, #22
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	e00b      	b.n	800de80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de68:	78fb      	ldrb	r3, [r7, #3]
 800de6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de6e:	68f9      	ldr	r1, [r7, #12]
 800de70:	4613      	mov	r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	440b      	add	r3, r1
 800de7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de80:	4618      	mov	r0, r3
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dea6:	78fa      	ldrb	r2, [r7, #3]
 800dea8:	4611      	mov	r1, r2
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fa f85e 	bl	8007f6c <HAL_PCD_SetAddress>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 f874 	bl	800dfa4 <USBD_Get_USB_Status>
 800debc:	4603      	mov	r3, r0
 800debe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b086      	sub	sp, #24
 800dece:	af00      	add	r7, sp, #0
 800ded0:	60f8      	str	r0, [r7, #12]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
 800ded6:	460b      	mov	r3, r1
 800ded8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dee8:	7af9      	ldrb	r1, [r7, #11]
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	f7fa f968 	bl	80081c2 <HAL_PCD_EP_Transmit>
 800def2:	4603      	mov	r3, r0
 800def4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800def6:	7dfb      	ldrb	r3, [r7, #23]
 800def8:	4618      	mov	r0, r3
 800defa:	f000 f853 	bl	800dfa4 <USBD_Get_USB_Status>
 800defe:	4603      	mov	r3, r0
 800df00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df02:	7dbb      	ldrb	r3, [r7, #22]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	607a      	str	r2, [r7, #4]
 800df16:	603b      	str	r3, [r7, #0]
 800df18:	460b      	mov	r3, r1
 800df1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df2a:	7af9      	ldrb	r1, [r7, #11]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	f7fa f8f4 	bl	800811c <HAL_PCD_EP_Receive>
 800df34:	4603      	mov	r3, r0
 800df36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f832 	bl	800dfa4 <USBD_Get_USB_Status>
 800df40:	4603      	mov	r3, r0
 800df42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df44:	7dbb      	ldrb	r3, [r7, #22]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b082      	sub	sp, #8
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	460b      	mov	r3, r1
 800df58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df60:	78fa      	ldrb	r2, [r7, #3]
 800df62:	4611      	mov	r1, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f7fa f914 	bl	8008192 <HAL_PCD_EP_GetRxCount>
 800df6a:	4603      	mov	r3, r0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df7c:	4b03      	ldr	r3, [pc, #12]	@ (800df8c <USBD_static_malloc+0x18>)
}
 800df7e:	4618      	mov	r0, r3
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	200018d0 	.word	0x200018d0

0800df90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]

}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	d817      	bhi.n	800dfe8 <USBD_Get_USB_Status+0x44>
 800dfb8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc0 <USBD_Get_USB_Status+0x1c>)
 800dfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfbe:	bf00      	nop
 800dfc0:	0800dfd1 	.word	0x0800dfd1
 800dfc4:	0800dfd7 	.word	0x0800dfd7
 800dfc8:	0800dfdd 	.word	0x0800dfdd
 800dfcc:	0800dfe3 	.word	0x0800dfe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd4:	e00b      	b.n	800dfee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfda:	e008      	b.n	800dfee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe0:	e005      	b.n	800dfee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe6:	e002      	b.n	800dfee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	73fb      	strb	r3, [r7, #15]
    break;
 800dfec:	bf00      	nop
  }
  return usb_status;
 800dfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <memset>:
 800dffc:	4402      	add	r2, r0
 800dffe:	4603      	mov	r3, r0
 800e000:	4293      	cmp	r3, r2
 800e002:	d100      	bne.n	800e006 <memset+0xa>
 800e004:	4770      	bx	lr
 800e006:	f803 1b01 	strb.w	r1, [r3], #1
 800e00a:	e7f9      	b.n	800e000 <memset+0x4>

0800e00c <__libc_init_array>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	4d0d      	ldr	r5, [pc, #52]	@ (800e044 <__libc_init_array+0x38>)
 800e010:	4c0d      	ldr	r4, [pc, #52]	@ (800e048 <__libc_init_array+0x3c>)
 800e012:	1b64      	subs	r4, r4, r5
 800e014:	10a4      	asrs	r4, r4, #2
 800e016:	2600      	movs	r6, #0
 800e018:	42a6      	cmp	r6, r4
 800e01a:	d109      	bne.n	800e030 <__libc_init_array+0x24>
 800e01c:	4d0b      	ldr	r5, [pc, #44]	@ (800e04c <__libc_init_array+0x40>)
 800e01e:	4c0c      	ldr	r4, [pc, #48]	@ (800e050 <__libc_init_array+0x44>)
 800e020:	f000 f818 	bl	800e054 <_init>
 800e024:	1b64      	subs	r4, r4, r5
 800e026:	10a4      	asrs	r4, r4, #2
 800e028:	2600      	movs	r6, #0
 800e02a:	42a6      	cmp	r6, r4
 800e02c:	d105      	bne.n	800e03a <__libc_init_array+0x2e>
 800e02e:	bd70      	pop	{r4, r5, r6, pc}
 800e030:	f855 3b04 	ldr.w	r3, [r5], #4
 800e034:	4798      	blx	r3
 800e036:	3601      	adds	r6, #1
 800e038:	e7ee      	b.n	800e018 <__libc_init_array+0xc>
 800e03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e03e:	4798      	blx	r3
 800e040:	3601      	adds	r6, #1
 800e042:	e7f2      	b.n	800e02a <__libc_init_array+0x1e>
 800e044:	0800e154 	.word	0x0800e154
 800e048:	0800e154 	.word	0x0800e154
 800e04c:	0800e154 	.word	0x0800e154
 800e050:	0800e158 	.word	0x0800e158

0800e054 <_init>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	bf00      	nop
 800e058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05a:	bc08      	pop	{r3}
 800e05c:	469e      	mov	lr, r3
 800e05e:	4770      	bx	lr

0800e060 <_fini>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	bf00      	nop
 800e064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e066:	bc08      	pop	{r3}
 800e068:	469e      	mov	lr, r3
 800e06a:	4770      	bx	lr
