
testESPap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c0  080041c0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041c0  080041c0  000051c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c8  080041c8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041cc  080041cc  000051cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080041d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  0800422c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800422c  00006210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083cf  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001703  00000000  00000000  0000e45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053d  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015844  00000000  00000000  0001077d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d87  00000000  00000000  00025fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e84  00000000  00000000  0002ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002070  00000000  00000000  000b4c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b6c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c8c 	.word	0x08003c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003c8c 	.word	0x08003c8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	f5ad 6de7 	sub.w	sp, sp, #1848	@ 0x738
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fdc0 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 fbb0 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fc40 	bl	8000e50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 fc14 	bl	8000dfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rxBuffer[512] = {0};
 80005d4:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 80005d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80005dc:	4618      	mov	r0, r3
 80005de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f002 feaf 	bl	8003348 <memset>
    uint8_t ATisOK;
    int channel;
    int onoff;
    int led = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
    char ATcommand[64];
    char ATcommandB[1024];
    char ATcommandN[100];
    char ATcommandF[100];
    char ATcommandT[16];
    sprintf(ATcommandB,"<!DOCTYPE html><html>\n<head>\n\
 80005f0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80005f4:	49db      	ldr	r1, [pc, #876]	@ (8000964 <main+0x3a8>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe84 	bl	8003304 <siprintf>
    .button-on {background-color: #008000;}\n.button-on:active\
    {background-color: #008000;}\n.button-off {background-color: #808080;}\n\
    .button-off:active {background-color: #808080;}\n\
    p {font-size: 14px;color: #808080;margin-bottom: 20px;}\n\
    </style>\n</head>\n<body>\n<h1>STM32 - ESP8266</h1>");
    sprintf(ATcommandN,"<p>Light is currently on\
 80005fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000600:	49d9      	ldr	r1, [pc, #868]	@ (8000968 <main+0x3ac>)
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe7e 	bl	8003304 <siprintf>
    </p><a class=\"button button-off\" href=\"/lightoff\">OFF</a>");
    sprintf(ATcommandF,"<p>Light is currently off\
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	49d7      	ldr	r1, [pc, #860]	@ (800096c <main+0x3b0>)
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fe78 	bl	8003304 <siprintf>
    </p><a class=\"button button-on\" href=\"/lighton\">ON</a>");
    sprintf(ATcommandT,"</body></html>");
 8000614:	463b      	mov	r3, r7
 8000616:	49d6      	ldr	r1, [pc, #856]	@ (8000970 <main+0x3b4>)
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe73 	bl	8003304 <siprintf>
    int countB = strlen(ATcommandB);
 800061e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fddc 	bl	80001e0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
    int countN = strlen(ATcommandN);
 800062e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdd4 	bl	80001e0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
    int countF = strlen(ATcommandF);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fdcc 	bl	80001e0 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
    int countT = strlen(ATcommandT);
 800064e:	463b      	mov	r3, r7
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdc5 	bl	80001e0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	f8c7 3718 	str.w	r3, [r7, #1816]	@ 0x718

    sprintf(ATcommand,"AT+RST\r\n");
 800065c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000660:	49c4      	ldr	r1, [pc, #784]	@ (8000974 <main+0x3b8>)
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fe4e 	bl	8003304 <siprintf>
    memset(rxBuffer,0,sizeof(rxBuffer));
 8000668:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fe68 	bl	8003348 <memset>
    HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000678:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fdaf 	bl	80001e0 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	48ba      	ldr	r0, [pc, #744]	@ (8000978 <main+0x3bc>)
 8000690:	f001 fdda 	bl	8002248 <HAL_UART_Transmit>
    HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000694:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000698:	2364      	movs	r3, #100	@ 0x64
 800069a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069e:	48b6      	ldr	r0, [pc, #728]	@ (8000978 <main+0x3bc>)
 80006a0:	f001 fe5d 	bl	800235e <HAL_UART_Receive>
    HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a8:	f000 fdc0 	bl	800122c <HAL_Delay>

    ATisOK = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    while(!ATisOK){
 80006b2:	e034      	b.n	800071e <main+0x162>
      sprintf(ATcommand,"AT+CWMODE_CUR=2\r\n");
 80006b4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80006b8:	49b0      	ldr	r1, [pc, #704]	@ (800097c <main+0x3c0>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fe22 	bl	8003304 <siprintf>
        memset(rxBuffer,0,sizeof(rxBuffer));
 80006c0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80006c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fe3c 	bl	8003348 <memset>
        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80006d0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fd83 	bl	80001e0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	48a4      	ldr	r0, [pc, #656]	@ (8000978 <main+0x3bc>)
 80006e8:	f001 fdae 	bl	8002248 <HAL_UART_Transmit>
        HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80006ec:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 80006f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f8:	489f      	ldr	r0, [pc, #636]	@ (8000978 <main+0x3bc>)
 80006fa:	f001 fe30 	bl	800235e <HAL_UART_Receive>
      if(strstr((char *)rxBuffer,"OK")){
 80006fe:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000702:	499f      	ldr	r1, [pc, #636]	@ (8000980 <main+0x3c4>)
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fe34 	bl	8003372 <strstr>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <main+0x15a>
        ATisOK = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
      }
      HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071a:	f000 fd87 	bl	800122c <HAL_Delay>
    while(!ATisOK){
 800071e:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0c6      	beq.n	80006b4 <main+0xf8>
    }

    ATisOK = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    while(!ATisOK){
 800072c:	e034      	b.n	8000798 <main+0x1dc>
      sprintf(ATcommand,"AT+CWSAP_CUR=\"STM32\",\"12345678\",1,3,4,0\r\n");
 800072e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000732:	4994      	ldr	r1, [pc, #592]	@ (8000984 <main+0x3c8>)
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fde5 	bl	8003304 <siprintf>
        memset(rxBuffer,0,sizeof(rxBuffer));
 800073a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800073e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fdff 	bl	8003348 <memset>
        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800074a:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd46 	bl	80001e0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 800075c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000760:	4885      	ldr	r0, [pc, #532]	@ (8000978 <main+0x3bc>)
 8000762:	f001 fd71 	bl	8002248 <HAL_UART_Transmit>
        HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000766:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000772:	4881      	ldr	r0, [pc, #516]	@ (8000978 <main+0x3bc>)
 8000774:	f001 fdf3 	bl	800235e <HAL_UART_Receive>
      if(strstr((char *)rxBuffer,"OK")){
 8000778:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800077c:	4980      	ldr	r1, [pc, #512]	@ (8000980 <main+0x3c4>)
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fdf7 	bl	8003372 <strstr>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <main+0x1d4>
        ATisOK = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
      }
      HAL_Delay(500);
 8000790:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000794:	f000 fd4a 	bl	800122c <HAL_Delay>
    while(!ATisOK){
 8000798:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0c6      	beq.n	800072e <main+0x172>
    }

    ATisOK = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    while(!ATisOK){
 80007a6:	e034      	b.n	8000812 <main+0x256>
      sprintf(ATcommand,"AT+CIPAP_CUR=\"192.168.51.1\"\r\n");
 80007a8:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007ac:	4976      	ldr	r1, [pc, #472]	@ (8000988 <main+0x3cc>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fda8 	bl	8003304 <siprintf>
      memset(rxBuffer,0,sizeof(rxBuffer));
 80007b4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fdc2 	bl	8003348 <memset>
      HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80007c4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd09 	bl	80001e0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 80007d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007da:	4867      	ldr	r0, [pc, #412]	@ (8000978 <main+0x3bc>)
 80007dc:	f001 fd34 	bl	8002248 <HAL_UART_Transmit>
      HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80007e0:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 80007e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ec:	4862      	ldr	r0, [pc, #392]	@ (8000978 <main+0x3bc>)
 80007ee:	f001 fdb6 	bl	800235e <HAL_UART_Receive>
      if(strstr((char *)rxBuffer,"OK")){
 80007f2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80007f6:	4962      	ldr	r1, [pc, #392]	@ (8000980 <main+0x3c4>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fdba 	bl	8003372 <strstr>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <main+0x24e>
        ATisOK = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
      }
      HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080e:	f000 fd0d 	bl	800122c <HAL_Delay>
    while(!ATisOK){
 8000812:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0c6      	beq.n	80007a8 <main+0x1ec>
    }

    ATisOK = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    while(!ATisOK){
 8000820:	e034      	b.n	800088c <main+0x2d0>
      sprintf(ATcommand,"AT+CIPMUX=1\r\n");
 8000822:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000826:	4959      	ldr	r1, [pc, #356]	@ (800098c <main+0x3d0>)
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fd6b 	bl	8003304 <siprintf>
        memset(rxBuffer,0,sizeof(rxBuffer));
 800082e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fd85 	bl	8003348 <memset>
        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800083e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fccc 	bl	80001e0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8000850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000854:	4848      	ldr	r0, [pc, #288]	@ (8000978 <main+0x3bc>)
 8000856:	f001 fcf7 	bl	8002248 <HAL_UART_Transmit>
        HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800085a:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 800085e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000866:	4844      	ldr	r0, [pc, #272]	@ (8000978 <main+0x3bc>)
 8000868:	f001 fd79 	bl	800235e <HAL_UART_Receive>
        if(strstr((char *)rxBuffer,"OK")){
 800086c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000870:	4943      	ldr	r1, [pc, #268]	@ (8000980 <main+0x3c4>)
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fd7d 	bl	8003372 <strstr>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <main+0x2c8>
          ATisOK = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
        }
        HAL_Delay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000888:	f000 fcd0 	bl	800122c <HAL_Delay>
    while(!ATisOK){
 800088c:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0c6      	beq.n	8000822 <main+0x266>
    }

    ATisOK = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
    while(!ATisOK){
 800089a:	e034      	b.n	8000906 <main+0x34a>
      sprintf(ATcommand,"AT+CIPSERVER=1,80\r\n");
 800089c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80008a0:	493b      	ldr	r1, [pc, #236]	@ (8000990 <main+0x3d4>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fd2e 	bl	8003304 <siprintf>
      memset(rxBuffer,0,sizeof(rxBuffer));
 80008a8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80008ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fd48 	bl	8003348 <memset>
      HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80008b8:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fc8f 	bl	80001e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	482a      	ldr	r0, [pc, #168]	@ (8000978 <main+0x3bc>)
 80008d0:	f001 fcba 	bl	8002248 <HAL_UART_Transmit>
      HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80008d4:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 80008d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	4825      	ldr	r0, [pc, #148]	@ (8000978 <main+0x3bc>)
 80008e2:	f001 fd3c 	bl	800235e <HAL_UART_Receive>
      if(strstr((char *)rxBuffer,"OK")){
 80008e6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80008ea:	4925      	ldr	r1, [pc, #148]	@ (8000980 <main+0x3c4>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fd40 	bl	8003372 <strstr>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <main+0x342>
          ATisOK = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	f887 3737 	strb.w	r3, [r7, #1847]	@ 0x737
      }
      HAL_Delay(500);
 80008fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000902:	f000 fc93 	bl	800122c <HAL_Delay>
    while(!ATisOK){
 8000906:	f897 3737 	ldrb.w	r3, [r7, #1847]	@ 0x737
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0c6      	beq.n	800089c <main+0x2e0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  memset(rxBuffer,0,sizeof(rxBuffer));
 800090e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fd15 	bl	8003348 <memset>
	      HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800091e:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <main+0x3bc>)
 800092c:	f001 fd17 	bl	800235e <HAL_UART_Receive>
	      if(strstr((char *)rxBuffer,"+IPD,0")) channel = 0;
 8000930:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000934:	4917      	ldr	r1, [pc, #92]	@ (8000994 <main+0x3d8>)
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fd1b 	bl	8003372 <strstr>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <main+0x38e>
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000948:	e079      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,1")) channel = 1;
 800094a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800094e:	4912      	ldr	r1, [pc, #72]	@ (8000998 <main+0x3dc>)
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fd0e 	bl	8003372 <strstr>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d01f      	beq.n	800099c <main+0x3e0>
 800095c:	2301      	movs	r3, #1
 800095e:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000962:	e06c      	b.n	8000a3e <main+0x482>
 8000964:	08003ca4 	.word	0x08003ca4
 8000968:	08003f9c 	.word	0x08003f9c
 800096c:	08003ff4 	.word	0x08003ff4
 8000970:	08004048 	.word	0x08004048
 8000974:	08004058 	.word	0x08004058
 8000978:	20000078 	.word	0x20000078
 800097c:	08004064 	.word	0x08004064
 8000980:	08004078 	.word	0x08004078
 8000984:	0800407c 	.word	0x0800407c
 8000988:	080040a8 	.word	0x080040a8
 800098c:	080040c8 	.word	0x080040c8
 8000990:	080040d8 	.word	0x080040d8
 8000994:	080040ec 	.word	0x080040ec
 8000998:	080040f4 	.word	0x080040f4
	      else if(strstr((char *)rxBuffer,"+IPD,2")) channel = 2;
 800099c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80009a0:	49d6      	ldr	r1, [pc, #856]	@ (8000cfc <main+0x740>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fce5 	bl	8003372 <strstr>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <main+0x3fa>
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 80009b4:	e043      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,3")) channel = 3;
 80009b6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80009ba:	49d1      	ldr	r1, [pc, #836]	@ (8000d00 <main+0x744>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fcd8 	bl	8003372 <strstr>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <main+0x414>
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 80009ce:	e036      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,4")) channel = 4;
 80009d0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80009d4:	49cb      	ldr	r1, [pc, #812]	@ (8000d04 <main+0x748>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fccb 	bl	8003372 <strstr>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <main+0x42e>
 80009e2:	2304      	movs	r3, #4
 80009e4:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 80009e8:	e029      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,5")) channel = 5;
 80009ea:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80009ee:	49c6      	ldr	r1, [pc, #792]	@ (8000d08 <main+0x74c>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fcbe 	bl	8003372 <strstr>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <main+0x448>
 80009fc:	2305      	movs	r3, #5
 80009fe:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000a02:	e01c      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,6")) channel = 6;
 8000a04:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000a08:	49c0      	ldr	r1, [pc, #768]	@ (8000d0c <main+0x750>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fcb1 	bl	8003372 <strstr>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <main+0x462>
 8000a16:	2306      	movs	r3, #6
 8000a18:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000a1c:	e00f      	b.n	8000a3e <main+0x482>
	      else if(strstr((char *)rxBuffer,"+IPD,7")) channel = 7;
 8000a1e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000a22:	49bb      	ldr	r1, [pc, #748]	@ (8000d10 <main+0x754>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fca4 	bl	8003372 <strstr>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <main+0x47c>
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000a36:	e002      	b.n	8000a3e <main+0x482>
	      else channel = 100;
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730

	      if(strstr((char *)rxBuffer,"GET /lighton")) onoff = 0;
 8000a3e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000a42:	49b4      	ldr	r1, [pc, #720]	@ (8000d14 <main+0x758>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fc94 	bl	8003372 <strstr>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <main+0x49c>
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8000a56:	e010      	b.n	8000a7a <main+0x4be>
	      else if(strstr((char *)rxBuffer,"GET /lightoff")) onoff = 1;
 8000a58:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000a5c:	49ae      	ldr	r1, [pc, #696]	@ (8000d18 <main+0x75c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fc87 	bl	8003372 <strstr>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <main+0x4b6>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8000a70:	e003      	b.n	8000a7a <main+0x4be>
	      else onoff = led;
 8000a72:	f8d7 3728 	ldr.w	r3, [r7, #1832]	@ 0x728
 8000a76:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c

	      if(channel<8 && onoff == 1)
 8000a7a:	f8d7 3730 	ldr.w	r3, [r7, #1840]	@ 0x730
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	f300 809b 	bgt.w	8000bba <main+0x5fe>
 8000a84:	f8d7 372c 	ldr.w	r3, [r7, #1836]	@ 0x72c
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f040 8096 	bne.w	8000bba <main+0x5fe>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	48a1      	ldr	r0, [pc, #644]	@ (8000d1c <main+0x760>)
 8000a96:	f000 ff15 	bl	80018c4 <HAL_GPIO_WritePin>
	        led = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countF+countT);
 8000aa0:	f8d7 2724 	ldr.w	r2, [r7, #1828]	@ 0x724
 8000aa4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8000aa8:	441a      	add	r2, r3
 8000aaa:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8000aae:	4413      	add	r3, r2
 8000ab0:	f507 609b 	add.w	r0, r7, #1240	@ 0x4d8
 8000ab4:	f8d7 2730 	ldr.w	r2, [r7, #1840]	@ 0x730
 8000ab8:	4999      	ldr	r1, [pc, #612]	@ (8000d20 <main+0x764>)
 8000aba:	f002 fc23 	bl	8003304 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000abe:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fc3d 	bl	8003348 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000ace:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb84 	bl	80001e0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8000ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae4:	488f      	ldr	r0, [pc, #572]	@ (8000d24 <main+0x768>)
 8000ae6:	f001 fbaf 	bl	8002248 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000aea:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af4:	488b      	ldr	r0, [pc, #556]	@ (8000d24 <main+0x768>)
 8000af6:	f001 fc32 	bl	800235e <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 8000afa:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000afe:	213e      	movs	r1, #62	@ 0x3e
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fc29 	bl	8003358 <strchr>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d02c      	beq.n	8000b66 <main+0x5aa>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 8000b0c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fc16 	bl	8003348 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 8000b1c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	487e      	ldr	r0, [pc, #504]	@ (8000d24 <main+0x768>)
 8000b2c:	f001 fb8c 	bl	8002248 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandF,countF,1000);
 8000b30:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f107 0110 	add.w	r1, r7, #16
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	4879      	ldr	r0, [pc, #484]	@ (8000d24 <main+0x768>)
 8000b40:	f001 fb82 	bl	8002248 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000b44:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4639      	mov	r1, r7
 8000b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b50:	4874      	ldr	r0, [pc, #464]	@ (8000d24 <main+0x768>)
 8000b52:	f001 fb79 	bl	8002248 <HAL_UART_Transmit>
	           HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000b56:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000b5a:	2364      	movs	r3, #100	@ 0x64
 8000b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b60:	4870      	ldr	r0, [pc, #448]	@ (8000d24 <main+0x768>)
 8000b62:	f001 fbfc 	bl	800235e <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000b66:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000b6a:	f8d7 2730 	ldr.w	r2, [r7, #1840]	@ 0x730
 8000b6e:	496e      	ldr	r1, [pc, #440]	@ (8000d28 <main+0x76c>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fbc7 	bl	8003304 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000b76:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fbe1 	bl	8003348 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000b86:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fb28 	bl	80001e0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8000b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9c:	4861      	ldr	r0, [pc, #388]	@ (8000d24 <main+0x768>)
 8000b9e:	f001 fb53 	bl	8002248 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000ba2:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	485d      	ldr	r0, [pc, #372]	@ (8000d24 <main+0x768>)
 8000bae:	f001 fbd6 	bl	800235e <HAL_UART_Receive>
	        channel=100;
 8000bb2:	2364      	movs	r3, #100	@ 0x64
 8000bb4:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 8000bb8:	e09e      	b.n	8000cf8 <main+0x73c>
	      }
	      else if(channel<8 && onoff == 0)
 8000bba:	f8d7 3730 	ldr.w	r3, [r7, #1840]	@ 0x730
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	f73f aea5 	bgt.w	800090e <main+0x352>
 8000bc4:	f8d7 372c 	ldr.w	r3, [r7, #1836]	@ 0x72c
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f47f aea0 	bne.w	800090e <main+0x352>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd4:	4851      	ldr	r0, [pc, #324]	@ (8000d1c <main+0x760>)
 8000bd6:	f000 fe75 	bl	80018c4 <HAL_GPIO_WritePin>
	        led = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countN+countT);
 8000be0:	f8d7 2724 	ldr.w	r2, [r7, #1828]	@ 0x724
 8000be4:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 8000be8:	441a      	add	r2, r3
 8000bea:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8000bee:	4413      	add	r3, r2
 8000bf0:	f507 609b 	add.w	r0, r7, #1240	@ 0x4d8
 8000bf4:	f8d7 2730 	ldr.w	r2, [r7, #1840]	@ 0x730
 8000bf8:	4949      	ldr	r1, [pc, #292]	@ (8000d20 <main+0x764>)
 8000bfa:	f002 fb83 	bl	8003304 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000bfe:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fb9d 	bl	8003348 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000c0e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fae4 	bl	80001e0 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8000c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c24:	483f      	ldr	r0, [pc, #252]	@ (8000d24 <main+0x768>)
 8000c26:	f001 fb0f 	bl	8002248 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000c2a:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000c2e:	2364      	movs	r3, #100	@ 0x64
 8000c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c34:	483b      	ldr	r0, [pc, #236]	@ (8000d24 <main+0x768>)
 8000c36:	f001 fb92 	bl	800235e <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 8000c3a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000c3e:	213e      	movs	r1, #62	@ 0x3e
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fb89 	bl	8003358 <strchr>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d02c      	beq.n	8000ca6 <main+0x6ea>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 8000c4c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fb76 	bl	8003348 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 8000c5c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <main+0x768>)
 8000c6c:	f001 faec 	bl	8002248 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandN,countN,1000);
 8000c70:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	4829      	ldr	r0, [pc, #164]	@ (8000d24 <main+0x768>)
 8000c80:	f001 fae2 	bl	8002248 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000c84:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4639      	mov	r1, r7
 8000c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <main+0x768>)
 8000c92:	f001 fad9 	bl	8002248 <HAL_UART_Transmit>
	            HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000c96:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000c9a:	2364      	movs	r3, #100	@ 0x64
 8000c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca0:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <main+0x768>)
 8000ca2:	f001 fb5c 	bl	800235e <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000ca6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000caa:	f8d7 2730 	ldr.w	r2, [r7, #1840]	@ 0x730
 8000cae:	491e      	ldr	r1, [pc, #120]	@ (8000d28 <main+0x76c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fb27 	bl	8003304 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000cb6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fb41 	bl	8003348 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000cc6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa88 	bl	80001e0 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8000cd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <main+0x768>)
 8000cde:	f001 fab3 	bl	8002248 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000ce2:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8000ce6:	2364      	movs	r3, #100	@ 0x64
 8000ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cec:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <main+0x768>)
 8000cee:	f001 fb36 	bl	800235e <HAL_UART_Receive>
	        channel=100;
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
	  memset(rxBuffer,0,sizeof(rxBuffer));
 8000cf8:	e609      	b.n	800090e <main+0x352>
 8000cfa:	bf00      	nop
 8000cfc:	080040fc 	.word	0x080040fc
 8000d00:	08004104 	.word	0x08004104
 8000d04:	0800410c 	.word	0x0800410c
 8000d08:	08004114 	.word	0x08004114
 8000d0c:	0800411c 	.word	0x0800411c
 8000d10:	08004124 	.word	0x08004124
 8000d14:	0800412c 	.word	0x0800412c
 8000d18:	0800413c 	.word	0x0800413c
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	0800414c 	.word	0x0800414c
 8000d24:	20000078 	.word	0x20000078
 8000d28:	08004160 	.word	0x08004160

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	@ 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	2230      	movs	r2, #48	@ 0x30
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fb04 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <SystemClock_Config+0xc8>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <SystemClock_Config+0xc8>)
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <SystemClock_Config+0xc8>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <SystemClock_Config+0xcc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a20      	ldr	r2, [pc, #128]	@ (8000df8 <SystemClock_Config+0xcc>)
 8000d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <SystemClock_Config+0xcc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000da0:	2364      	movs	r3, #100	@ 0x64
 8000da2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fda1 	bl	80018f8 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dbc:	f000 f89a 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f803 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000de8:	f000 f884 	bl	8000ef4 <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3750      	adds	r7, #80	@ 0x50
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <MX_USART1_UART_Init+0x50>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f001 f9b8 	bl	80021a8 <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3e:	f000 f859 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000078 	.word	0x20000078
 8000e4c:	40011000 	.word	0x40011000

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_GPIO_Init+0x9c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec0:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <MX_GPIO_Init+0xa0>)
 8000ec2:	f000 fcff 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_GPIO_Init+0xa0>)
 8000ee0:	f000 fb6c 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_UART_MspInit+0x94>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d134      	bne.n	8000fdc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000faa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4809      	ldr	r0, [pc, #36]	@ (8000fec <HAL_UART_MspInit+0x9c>)
 8000fc8:	f000 faf8 	bl	80015bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2025      	movs	r0, #37	@ 0x25
 8000fd2:	f000 fa2a 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd6:	2025      	movs	r0, #37	@ 0x25
 8000fd8:	f000 fa43 	bl	8001462 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <MemManage_Handler+0x4>

08001008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <UsageFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001046:	f000 f8d1 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <USART1_IRQHandler+0x10>)
 8001056:	f001 fa19 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000078 	.word	0x20000078

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f002 f984 	bl	80033a0 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20020000 	.word	0x20020000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	200000c0 	.word	0x200000c0
 80010cc:	20000210 	.word	0x20000210

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f8:	f7ff ffea 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	@ (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f002 f943 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fa49 	bl	80005bc <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001138:	080041d0 	.word	0x080041d0
  ldr r2, =_sbss
 800113c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001140:	20000210 	.word	0x20000210

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f94f 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	200f      	movs	r0, #15
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fec0 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f967 	bl	800147e <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f92f 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	200000c4 	.word	0x200000c4

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200000c4 	.word	0x200000c4

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	@ (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff feb6 	bl	8001214 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e052      	b.n	800156e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0216 	bic.w	r2, r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <HAL_DMA_Abort+0x62>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0208 	bic.w	r2, r2, #8
 8001506:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001518:	e013      	b.n	8001542 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151a:	f7ff fe7b 	bl	8001214 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b05      	cmp	r3, #5
 8001526:	d90c      	bls.n	8001542 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2220      	movs	r2, #32
 800152c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2203      	movs	r2, #3
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e015      	b.n	800156e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e4      	bne.n	800151a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	223f      	movs	r2, #63	@ 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d004      	beq.n	8001594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e00c      	b.n	80015ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2205      	movs	r2, #5
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e159      	b.n	800188c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8148 	bne.w	8001886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	2b02      	cmp	r3, #2
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a2 	beq.w	8001886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b57      	ldr	r3, [pc, #348]	@ (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a56      	ldr	r2, [pc, #344]	@ (80018a4 <HAL_GPIO_Init+0x2e8>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b54      	ldr	r3, [pc, #336]	@ (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a52      	ldr	r2, [pc, #328]	@ (80018a8 <HAL_GPIO_Init+0x2ec>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a49      	ldr	r2, [pc, #292]	@ (80018ac <HAL_GPIO_Init+0x2f0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d019      	beq.n	80017be <HAL_GPIO_Init+0x202>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a48      	ldr	r2, [pc, #288]	@ (80018b0 <HAL_GPIO_Init+0x2f4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x1fe>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a47      	ldr	r2, [pc, #284]	@ (80018b4 <HAL_GPIO_Init+0x2f8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x1fa>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a46      	ldr	r2, [pc, #280]	@ (80018b8 <HAL_GPIO_Init+0x2fc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a45      	ldr	r2, [pc, #276]	@ (80018bc <HAL_GPIO_Init+0x300>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x1f2>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	@ (80018a8 <HAL_GPIO_Init+0x2ec>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a2f      	ldr	r2, [pc, #188]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f aea2 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e267      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d075      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001916:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b85      	ldr	r3, [pc, #532]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800192a:	2b08      	cmp	r3, #8
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d05b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x108>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d157      	bne.n	8001a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e242      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x74>
 800195e:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b70      	ldr	r3, [pc, #448]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6d      	ldr	r3, [pc, #436]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6c      	ldr	r2, [pc, #432]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 8001990:	4b69      	ldr	r3, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a68      	ldr	r2, [pc, #416]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a65      	ldr	r2, [pc, #404]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc30 	bl	8001214 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fc2c 	bl	8001214 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e207      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xc0>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc1c 	bl	8001214 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fc18 	bl	8001214 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1f3      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b51      	ldr	r3, [pc, #324]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe8>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a26:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1c7      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4937      	ldr	r1, [pc, #220]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fbd1 	bl	8001214 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fbcd 	bl	8001214 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1a8      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4925      	ldr	r1, [pc, #148]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fbb0 	bl	8001214 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbac 	bl	8001214 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e187      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d036      	beq.n	8001b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fb90 	bl	8001214 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fb8c 	bl	8001214 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e167      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x200>
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fb79 	bl	8001214 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	e00e      	b.n	8001b44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff fb75 	bl	8001214 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d907      	bls.n	8001b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e150      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	42470000 	.word	0x42470000
 8001b40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b88      	ldr	r3, [pc, #544]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ea      	bne.n	8001b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8097 	beq.w	8001c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b81      	ldr	r3, [pc, #516]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b7d      	ldr	r3, [pc, #500]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a7c      	ldr	r2, [pc, #496]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b77      	ldr	r3, [pc, #476]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b74      	ldr	r3, [pc, #464]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a73      	ldr	r2, [pc, #460]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb35 	bl	8001214 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fb31 	bl	8001214 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e10c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2ea>
 8001bd4:	4b64      	ldr	r3, [pc, #400]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a63      	ldr	r2, [pc, #396]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x30c>
 8001bea:	4b5f      	ldr	r3, [pc, #380]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a5e      	ldr	r2, [pc, #376]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001c04:	4b58      	ldr	r3, [pc, #352]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a57      	ldr	r2, [pc, #348]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b55      	ldr	r3, [pc, #340]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a54      	ldr	r2, [pc, #336]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff faf6 	bl	8001214 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff faf2 	bl	8001214 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0cb      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	4b49      	ldr	r3, [pc, #292]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fae0 	bl	8001214 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff fadc 	bl	8001214 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0b5      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	4a38      	ldr	r2, [pc, #224]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a1 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c96:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d05c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d141      	bne.n	8001d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fab0 	bl	8001214 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff faac 	bl	8001214 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e087      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	491b      	ldr	r1, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa85 	bl	8001214 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa81 	bl	8001214 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e05c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x416>
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa6e 	bl	8001214 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff fa6a 	bl	8001214 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e045      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e038      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x4ec>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d121      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11a      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cc      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d90c      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b65      	ldr	r3, [pc, #404]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a52      	ldr	r2, [pc, #328]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d044      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e067      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4934      	ldr	r1, [pc, #208]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7ff f99c 	bl	8001214 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7ff f998 	bl	8001214 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20c      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f8fc 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08004174 	.word	0x08004174
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	b090      	sub	sp, #64	@ 0x40
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fcc:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	f200 80a1 	bhi.w	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fec:	e09b      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ff2:	e098      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d028      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	627a      	str	r2, [r7, #36]	@ 0x24
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800201c:	2100      	movs	r1, #0
 800201e:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8002020:	fb03 f201 	mul.w	r2, r3, r1
 8002024:	2300      	movs	r3, #0
 8002026:	fb00 f303 	mul.w	r3, r0, r3
 800202a:	4413      	add	r3, r2
 800202c:	4a43      	ldr	r2, [pc, #268]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 800202e:	fba0 1202 	umull	r1, r2, r0, r2
 8002032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002034:	460a      	mov	r2, r1
 8002036:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203a:	4413      	add	r3, r2
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002040:	2200      	movs	r2, #0
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	61fa      	str	r2, [r7, #28]
 8002046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800204e:	f7fe f91f 	bl	8000290 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4613      	mov	r3, r2
 8002058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205a:	e053      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	2200      	movs	r2, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	617a      	str	r2, [r7, #20]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800206e:	f04f 0b00 	mov.w	fp, #0
 8002072:	4652      	mov	r2, sl
 8002074:	465b      	mov	r3, fp
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	0159      	lsls	r1, r3, #5
 8002080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002084:	0150      	lsls	r0, r2, #5
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ebb2 080a 	subs.w	r8, r2, sl
 800208e:	eb63 090b 	sbc.w	r9, r3, fp
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800209e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020a6:	ebb2 0408 	subs.w	r4, r2, r8
 80020aa:	eb63 0509 	sbc.w	r5, r3, r9
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	00eb      	lsls	r3, r5, #3
 80020b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020bc:	00e2      	lsls	r2, r4, #3
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	eb14 030a 	adds.w	r3, r4, sl
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	eb45 030b 	adc.w	r3, r5, fp
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020da:	4629      	mov	r1, r5
 80020dc:	028b      	lsls	r3, r1, #10
 80020de:	4621      	mov	r1, r4
 80020e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e4:	4621      	mov	r1, r4
 80020e6:	028a      	lsls	r2, r1, #10
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ee:	2200      	movs	r2, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f8:	f7fe f8ca 	bl	8000290 <__aeabi_uldivmod>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4613      	mov	r3, r2
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	3301      	adds	r3, #1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002128:	4618      	mov	r0, r3
 800212a:	3740      	adds	r7, #64	@ 0x40
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	017d7840 	.word	0x017d7840

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <HAL_RCC_GetHCLKFreq+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff0 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	@ (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08004184 	.word	0x08004184

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffdc 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0b5b      	lsrs	r3, r3, #13
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	@ (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08004184 	.word	0x08004184

080021a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e042      	b.n	8002240 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe febe 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	@ 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fe15 	bl	8002e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d175      	bne.n	8002354 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Transmit+0x2c>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e06e      	b.n	8002356 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2221      	movs	r2, #33	@ 0x21
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002286:	f7fe ffc5 	bl	8001214 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022a0:	d108      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e003      	b.n	80022bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022bc:	e02e      	b.n	800231c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fbb3 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e03a      	b.n	8002356 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3302      	adds	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e007      	b.n	800230e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1cb      	bne.n	80022be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fb7f 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	@ 0x28
 8002362:	af02      	add	r7, sp, #8
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	f040 8081 	bne.w	8002482 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_UART_Receive+0x2e>
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e079      	b.n	8002484 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2222      	movs	r2, #34	@ 0x22
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a4:	f7fe ff36 	bl	8001214 <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	88fa      	ldrh	r2, [r7, #6]
 80023ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023be:	d108      	bne.n	80023d2 <HAL_UART_Receive+0x74>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	e003      	b.n	80023da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023da:	e047      	b.n	800246c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2120      	movs	r1, #32
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fb24 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e042      	b.n	8002484 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10c      	bne.n	800241e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002410:	b29a      	uxth	r2, r3
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3302      	adds	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e01f      	b.n	800245e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002426:	d007      	beq.n	8002438 <HAL_UART_Receive+0xda>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <HAL_UART_Receive+0xe8>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e008      	b.n	8002458 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002452:	b2da      	uxtb	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3301      	adds	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1b2      	bne.n	80023dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0ba      	sub	sp, #232	@ 0xe8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_UART_IRQHandler+0x66>
 80024de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fbd7 	bl	8002c9e <UART_Receive_IT>
      return;
 80024f0:	e273      	b.n	80029da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80de 	beq.w	80026b8 <HAL_UART_IRQHandler+0x22c>
 80024fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800250c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80d1 	beq.w	80026b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_UART_IRQHandler+0xae>
 8002522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_UART_IRQHandler+0xd2>
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
 800256a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
 800258e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f043 0208 	orr.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 820a 	beq.w	80029d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_UART_IRQHandler+0x14e>
 80025c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb62 	bl	8002c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_UART_IRQHandler+0x17a>
 80025fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04f      	beq.n	80026a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa6d 	bl	8002ae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002616:	2b40      	cmp	r3, #64	@ 0x40
 8002618:	d141      	bne.n	800269e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3314      	adds	r3, #20
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002646:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800264a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800265e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1d9      	bne.n	800261a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d013      	beq.n	8002696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	4a8a      	ldr	r2, [pc, #552]	@ (800289c <HAL_UART_IRQHandler+0x410>)
 8002674:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ff7b 	bl	8001576 <HAL_DMA_Abort_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002690:	4610      	mov	r0, r2
 8002692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	e00e      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f9b6 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	e00a      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9b2 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	e006      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9ae 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026b2:	e18d      	b.n	80029d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b4:	bf00      	nop
    return;
 80026b6:	e18b      	b.n	80029d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 8167 	bne.w	8002990 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8160 	beq.w	8002990 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8159 	beq.w	8002990 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b40      	cmp	r3, #64	@ 0x40
 8002700:	f040 80ce 	bne.w	80028a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a9 	beq.w	800286c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800271e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002722:	429a      	cmp	r2, r3
 8002724:	f080 80a2 	bcs.w	800286c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800272e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273a:	f000 8088 	beq.w	800284e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002754:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800275c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800276a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800276e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002776:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1d9      	bne.n	800273e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002794:	e853 3f00 	ldrex	r3, [r3]
 8002798:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800279a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e1      	bne.n	800278a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e3      	bne.n	80027c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800281c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800281e:	f023 0310 	bic.w	r3, r3, #16
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002830:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002832:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002836:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800283e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e3      	bne.n	800280c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe24 	bl	8001496 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800285c:	b29b      	uxth	r3, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b29b      	uxth	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8d9 	bl	8002a1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800286a:	e0b3      	b.n	80029d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 80ad 	bne.w	80029d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002884:	f040 80a6 	bne.w	80029d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8c1 	bl	8002a1c <HAL_UARTEx_RxEventCallback>
      return;
 800289a:	e09b      	b.n	80029d4 <HAL_UART_IRQHandler+0x548>
 800289c:	08002bad 	.word	0x08002bad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808e 	beq.w	80029d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80028bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8089 	beq.w	80029d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80028ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e3      	bne.n	80028c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	623b      	str	r3, [r7, #32]
   return(result);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002922:	633a      	str	r2, [r7, #48]	@ 0x30
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e3      	bne.n	80028fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	60fb      	str	r3, [r7, #12]
   return(result);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002968:	61fa      	str	r2, [r7, #28]
 800296a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	617b      	str	r3, [r7, #20]
   return(result);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e3      	bne.n	8002944 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f847 	bl	8002a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800298e:	e023      	b.n	80029d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_UART_IRQHandler+0x524>
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f910 	bl	8002bce <UART_Transmit_IT>
    return;
 80029ae:	e014      	b.n	80029da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <HAL_UART_IRQHandler+0x54e>
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f950 	bl	8002c6e <UART_EndTransmit_IT>
    return;
 80029ce:	e004      	b.n	80029da <HAL_UART_IRQHandler+0x54e>
    return;
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <HAL_UART_IRQHandler+0x54e>
      return;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <HAL_UART_IRQHandler+0x54e>
      return;
 80029d8:	bf00      	nop
  }
}
 80029da:	37e8      	adds	r7, #232	@ 0xe8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	e03b      	b.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d037      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7fe fbe1 	bl	8001214 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	6a3a      	ldr	r2, [r7, #32]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e03a      	b.n	8002ade <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d023      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d020      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	d01d      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d116      	bne.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f81d 	bl	8002ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d0b4      	beq.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b095      	sub	sp, #84	@ 0x54
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3314      	adds	r3, #20
 8002b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e5      	bne.n	8002b22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d119      	bne.n	8002b92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f023 0310 	bic.w	r3, r3, #16
 8002b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ba0:	bf00      	nop
 8002ba2:	3754      	adds	r7, #84	@ 0x54
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff ff21 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b21      	cmp	r3, #33	@ 0x21
 8002be0:	d13e      	bne.n	8002c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	d114      	bne.n	8002c16 <UART_Transmit_IT+0x48>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	621a      	str	r2, [r3, #32]
 8002c14:	e008      	b.n	8002c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6211      	str	r1, [r2, #32]
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4619      	mov	r1, r3
 8002c36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fea6 	bl	80029e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b08c      	sub	sp, #48	@ 0x30
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b22      	cmp	r3, #34	@ 0x22
 8002cb8:	f040 80aa 	bne.w	8002e10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc4:	d115      	bne.n	8002cf2 <UART_Receive_IT+0x54>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d111      	bne.n	8002cf2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cf0:	e024      	b.n	8002d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d00:	d007      	beq.n	8002d12 <UART_Receive_IT+0x74>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <UART_Receive_IT+0x82>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e008      	b.n	8002d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d15d      	bne.n	8002e0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0220 	bic.w	r2, r2, #32
 8002d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d135      	bne.n	8002e02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	613b      	str	r3, [r7, #16]
   return(result);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 0310 	bic.w	r3, r3, #16
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	623a      	str	r2, [r7, #32]
 8002dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69f9      	ldr	r1, [r7, #28]
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d10a      	bne.n	8002df4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fe0e 	bl	8002a1c <HAL_UARTEx_RxEventCallback>
 8002e00:	e002      	b.n	8002e08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fdf6 	bl	80029f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e002      	b.n	8002e12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3730      	adds	r7, #48	@ 0x30
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b0c0      	sub	sp, #256	@ 0x100
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	68d9      	ldr	r1, [r3, #12]
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	ea40 0301 	orr.w	r3, r0, r1
 8002e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e74:	f021 010c 	bic.w	r1, r1, #12
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e82:	430b      	orrs	r3, r1
 8002e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e96:	6999      	ldr	r1, [r3, #24]
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	ea40 0301 	orr.w	r3, r0, r1
 8002ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80030e8 <UART_SetConfig+0x2cc>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d005      	beq.n	8002ebc <UART_SetConfig+0xa0>
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80030ec <UART_SetConfig+0x2d0>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d104      	bne.n	8002ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ebc:	f7ff f960 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8002ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ec4:	e003      	b.n	8002ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ec6:	f7ff f947 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8002eca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed8:	f040 810c 	bne.w	80030f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002efe:	4621      	mov	r1, r4
 8002f00:	eb12 0801 	adds.w	r8, r2, r1
 8002f04:	4629      	mov	r1, r5
 8002f06:	eb43 0901 	adc.w	r9, r3, r1
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f1e:	4690      	mov	r8, r2
 8002f20:	4699      	mov	r9, r3
 8002f22:	4623      	mov	r3, r4
 8002f24:	eb18 0303 	adds.w	r3, r8, r3
 8002f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	eb49 0303 	adc.w	r3, r9, r3
 8002f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	18db      	adds	r3, r3, r3
 8002f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f50:	4613      	mov	r3, r2
 8002f52:	eb42 0303 	adc.w	r3, r2, r3
 8002f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f60:	f7fd f996 	bl	8000290 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <UART_SetConfig+0x2d4>)
 8002f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	011c      	lsls	r4, r3, #4
 8002f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f84:	4642      	mov	r2, r8
 8002f86:	464b      	mov	r3, r9
 8002f88:	1891      	adds	r1, r2, r2
 8002f8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f8c:	415b      	adcs	r3, r3
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f94:	4641      	mov	r1, r8
 8002f96:	eb12 0a01 	adds.w	sl, r2, r1
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb4:	4692      	mov	sl, r2
 8002fb6:	469b      	mov	fp, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	eb1a 0303 	adds.w	r3, sl, r3
 8002fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	18db      	adds	r3, r3, r3
 8002fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ff6:	f7fd f94b 	bl	8000290 <__aeabi_uldivmod>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	4b3b      	ldr	r3, [pc, #236]	@ (80030f0 <UART_SetConfig+0x2d4>)
 8003002:	fba3 2301 	umull	r2, r3, r3, r1
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2264      	movs	r2, #100	@ 0x64
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	1acb      	subs	r3, r1, r3
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003016:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <UART_SetConfig+0x2d4>)
 8003018:	fba3 2302 	umull	r2, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003024:	441c      	add	r4, r3
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003030:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	1891      	adds	r1, r2, r2
 800303e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003040:	415b      	adcs	r3, r3
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003048:	4641      	mov	r1, r8
 800304a:	1851      	adds	r1, r2, r1
 800304c:	6339      	str	r1, [r7, #48]	@ 0x30
 800304e:	4649      	mov	r1, r9
 8003050:	414b      	adcs	r3, r1
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003060:	4659      	mov	r1, fp
 8003062:	00cb      	lsls	r3, r1, #3
 8003064:	4651      	mov	r1, sl
 8003066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800306a:	4651      	mov	r1, sl
 800306c:	00ca      	lsls	r2, r1, #3
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	4603      	mov	r3, r0
 8003074:	4642      	mov	r2, r8
 8003076:	189b      	adds	r3, r3, r2
 8003078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800307c:	464b      	mov	r3, r9
 800307e:	460a      	mov	r2, r1
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800309c:	460b      	mov	r3, r1
 800309e:	18db      	adds	r3, r3, r3
 80030a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030a2:	4613      	mov	r3, r2
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030b2:	f7fd f8ed 	bl	8000290 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <UART_SetConfig+0x2d4>)
 80030bc:	fba3 1302 	umull	r1, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	2164      	movs	r1, #100	@ 0x64
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	3332      	adds	r3, #50	@ 0x32
 80030ce:	4a08      	ldr	r2, [pc, #32]	@ (80030f0 <UART_SetConfig+0x2d4>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 0207 	and.w	r2, r3, #7
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4422      	add	r2, r4
 80030e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030e4:	e106      	b.n	80032f4 <UART_SetConfig+0x4d8>
 80030e6:	bf00      	nop
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003106:	4642      	mov	r2, r8
 8003108:	464b      	mov	r3, r9
 800310a:	1891      	adds	r1, r2, r2
 800310c:	6239      	str	r1, [r7, #32]
 800310e:	415b      	adcs	r3, r3
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
 8003112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003116:	4641      	mov	r1, r8
 8003118:	1854      	adds	r4, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb43 0501 	adc.w	r5, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	00eb      	lsls	r3, r5, #3
 800312a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312e:	00e2      	lsls	r2, r4, #3
 8003130:	4614      	mov	r4, r2
 8003132:	461d      	mov	r5, r3
 8003134:	4643      	mov	r3, r8
 8003136:	18e3      	adds	r3, r4, r3
 8003138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800313c:	464b      	mov	r3, r9
 800313e:	eb45 0303 	adc.w	r3, r5, r3
 8003142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003162:	4629      	mov	r1, r5
 8003164:	008b      	lsls	r3, r1, #2
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316c:	4621      	mov	r1, r4
 800316e:	008a      	lsls	r2, r1, #2
 8003170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003174:	f7fd f88c 	bl	8000290 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <UART_SetConfig+0x4e4>)
 800317e:	fba3 2302 	umull	r2, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	011c      	lsls	r4, r3, #4
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	61b9      	str	r1, [r7, #24]
 80031a0:	415b      	adcs	r3, r3
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a8:	4641      	mov	r1, r8
 80031aa:	1851      	adds	r1, r2, r1
 80031ac:	6139      	str	r1, [r7, #16]
 80031ae:	4649      	mov	r1, r9
 80031b0:	414b      	adcs	r3, r1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c0:	4659      	mov	r1, fp
 80031c2:	00cb      	lsls	r3, r1, #3
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ca:	4651      	mov	r1, sl
 80031cc:	00ca      	lsls	r2, r1, #3
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	4642      	mov	r2, r8
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031dc:	464b      	mov	r3, r9
 80031de:	460a      	mov	r2, r1
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003200:	4649      	mov	r1, r9
 8003202:	008b      	lsls	r3, r1, #2
 8003204:	4641      	mov	r1, r8
 8003206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320a:	4641      	mov	r1, r8
 800320c:	008a      	lsls	r2, r1, #2
 800320e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003212:	f7fd f83d 	bl	8000290 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4611      	mov	r1, r2
 800321c:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <UART_SetConfig+0x4e4>)
 800321e:	fba3 2301 	umull	r2, r3, r3, r1
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2264      	movs	r2, #100	@ 0x64
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	3332      	adds	r3, #50	@ 0x32
 8003230:	4a33      	ldr	r2, [pc, #204]	@ (8003300 <UART_SetConfig+0x4e4>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800323c:	441c      	add	r4, r3
 800323e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003242:	2200      	movs	r2, #0
 8003244:	673b      	str	r3, [r7, #112]	@ 0x70
 8003246:	677a      	str	r2, [r7, #116]	@ 0x74
 8003248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	415b      	adcs	r3, r3
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800328e:	464b      	mov	r3, r9
 8003290:	460a      	mov	r2, r1
 8003292:	eb42 0303 	adc.w	r3, r2, r3
 8003296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032b0:	4649      	mov	r1, r9
 80032b2:	008b      	lsls	r3, r1, #2
 80032b4:	4641      	mov	r1, r8
 80032b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ba:	4641      	mov	r1, r8
 80032bc:	008a      	lsls	r2, r1, #2
 80032be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032c2:	f7fc ffe5 	bl	8000290 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <UART_SetConfig+0x4e4>)
 80032cc:	fba3 1302 	umull	r1, r3, r3, r2
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	2164      	movs	r1, #100	@ 0x64
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	3332      	adds	r3, #50	@ 0x32
 80032de:	4a08      	ldr	r2, [pc, #32]	@ (8003300 <UART_SetConfig+0x4e4>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4422      	add	r2, r4
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <siprintf>:
 8003304:	b40e      	push	{r1, r2, r3}
 8003306:	b510      	push	{r4, lr}
 8003308:	b09d      	sub	sp, #116	@ 0x74
 800330a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	9006      	str	r0, [sp, #24]
 8003310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003314:	480a      	ldr	r0, [pc, #40]	@ (8003340 <siprintf+0x3c>)
 8003316:	9107      	str	r1, [sp, #28]
 8003318:	9104      	str	r1, [sp, #16]
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <siprintf+0x40>)
 800331c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003320:	9105      	str	r1, [sp, #20]
 8003322:	2400      	movs	r4, #0
 8003324:	a902      	add	r1, sp, #8
 8003326:	6800      	ldr	r0, [r0, #0]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800332c:	f000 f9b8 	bl	80036a0 <_svfiprintf_r>
 8003330:	9b02      	ldr	r3, [sp, #8]
 8003332:	701c      	strb	r4, [r3, #0]
 8003334:	b01d      	add	sp, #116	@ 0x74
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333a:	b003      	add	sp, #12
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c
 8003344:	ffff0208 	.word	0xffff0208

08003348 <memset>:
 8003348:	4402      	add	r2, r0
 800334a:	4603      	mov	r3, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <strchr>:
 8003358:	b2c9      	uxtb	r1, r1
 800335a:	4603      	mov	r3, r0
 800335c:	4618      	mov	r0, r3
 800335e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003362:	b112      	cbz	r2, 800336a <strchr+0x12>
 8003364:	428a      	cmp	r2, r1
 8003366:	d1f9      	bne.n	800335c <strchr+0x4>
 8003368:	4770      	bx	lr
 800336a:	2900      	cmp	r1, #0
 800336c:	bf18      	it	ne
 800336e:	2000      	movne	r0, #0
 8003370:	4770      	bx	lr

08003372 <strstr>:
 8003372:	780a      	ldrb	r2, [r1, #0]
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	b96a      	cbnz	r2, 8003394 <strstr+0x22>
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	429a      	cmp	r2, r3
 800337c:	d109      	bne.n	8003392 <strstr+0x20>
 800337e:	460c      	mov	r4, r1
 8003380:	4605      	mov	r5, r0
 8003382:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f6      	beq.n	8003378 <strstr+0x6>
 800338a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800338e:	429e      	cmp	r6, r3
 8003390:	d0f7      	beq.n	8003382 <strstr+0x10>
 8003392:	3001      	adds	r0, #1
 8003394:	7803      	ldrb	r3, [r0, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ef      	bne.n	800337a <strstr+0x8>
 800339a:	4618      	mov	r0, r3
 800339c:	e7ec      	b.n	8003378 <strstr+0x6>
	...

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	@ (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	@ (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	@ (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	@ (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	@ (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fc64 	bl	8003c8c <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	080041c8 	.word	0x080041c8
 80033e8:	080041c8 	.word	0x080041c8
 80033ec:	080041c8 	.word	0x080041c8
 80033f0:	080041cc 	.word	0x080041cc

080033f4 <__retarget_lock_acquire_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_release_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <_free_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4605      	mov	r5, r0
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d041      	beq.n	8003484 <_free_r+0x8c>
 8003400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003404:	1f0c      	subs	r4, r1, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	bfb8      	it	lt
 800340a:	18e4      	addlt	r4, r4, r3
 800340c:	f000 f8e0 	bl	80035d0 <__malloc_lock>
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <_free_r+0x90>)
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	b933      	cbnz	r3, 8003424 <_free_r+0x2c>
 8003416:	6063      	str	r3, [r4, #4]
 8003418:	6014      	str	r4, [r2, #0]
 800341a:	4628      	mov	r0, r5
 800341c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003420:	f000 b8dc 	b.w	80035dc <__malloc_unlock>
 8003424:	42a3      	cmp	r3, r4
 8003426:	d908      	bls.n	800343a <_free_r+0x42>
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	1821      	adds	r1, r4, r0
 800342c:	428b      	cmp	r3, r1
 800342e:	bf01      	itttt	eq
 8003430:	6819      	ldreq	r1, [r3, #0]
 8003432:	685b      	ldreq	r3, [r3, #4]
 8003434:	1809      	addeq	r1, r1, r0
 8003436:	6021      	streq	r1, [r4, #0]
 8003438:	e7ed      	b.n	8003416 <_free_r+0x1e>
 800343a:	461a      	mov	r2, r3
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	b10b      	cbz	r3, 8003444 <_free_r+0x4c>
 8003440:	42a3      	cmp	r3, r4
 8003442:	d9fa      	bls.n	800343a <_free_r+0x42>
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	1850      	adds	r0, r2, r1
 8003448:	42a0      	cmp	r0, r4
 800344a:	d10b      	bne.n	8003464 <_free_r+0x6c>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	4401      	add	r1, r0
 8003450:	1850      	adds	r0, r2, r1
 8003452:	4283      	cmp	r3, r0
 8003454:	6011      	str	r1, [r2, #0]
 8003456:	d1e0      	bne.n	800341a <_free_r+0x22>
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	6053      	str	r3, [r2, #4]
 800345e:	4408      	add	r0, r1
 8003460:	6010      	str	r0, [r2, #0]
 8003462:	e7da      	b.n	800341a <_free_r+0x22>
 8003464:	d902      	bls.n	800346c <_free_r+0x74>
 8003466:	230c      	movs	r3, #12
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	e7d6      	b.n	800341a <_free_r+0x22>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	1821      	adds	r1, r4, r0
 8003470:	428b      	cmp	r3, r1
 8003472:	bf04      	itt	eq
 8003474:	6819      	ldreq	r1, [r3, #0]
 8003476:	685b      	ldreq	r3, [r3, #4]
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	bf04      	itt	eq
 800347c:	1809      	addeq	r1, r1, r0
 800347e:	6021      	streq	r1, [r4, #0]
 8003480:	6054      	str	r4, [r2, #4]
 8003482:	e7ca      	b.n	800341a <_free_r+0x22>
 8003484:	bd38      	pop	{r3, r4, r5, pc}
 8003486:	bf00      	nop
 8003488:	2000020c 	.word	0x2000020c

0800348c <sbrk_aligned>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4e0f      	ldr	r6, [pc, #60]	@ (80034cc <sbrk_aligned+0x40>)
 8003490:	460c      	mov	r4, r1
 8003492:	6831      	ldr	r1, [r6, #0]
 8003494:	4605      	mov	r5, r0
 8003496:	b911      	cbnz	r1, 800349e <sbrk_aligned+0x12>
 8003498:	f000 fba4 	bl	8003be4 <_sbrk_r>
 800349c:	6030      	str	r0, [r6, #0]
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 fb9f 	bl	8003be4 <_sbrk_r>
 80034a6:	1c43      	adds	r3, r0, #1
 80034a8:	d103      	bne.n	80034b2 <sbrk_aligned+0x26>
 80034aa:	f04f 34ff 	mov.w	r4, #4294967295
 80034ae:	4620      	mov	r0, r4
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d0f8      	beq.n	80034ae <sbrk_aligned+0x22>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 fb90 	bl	8003be4 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d1f2      	bne.n	80034ae <sbrk_aligned+0x22>
 80034c8:	e7ef      	b.n	80034aa <sbrk_aligned+0x1e>
 80034ca:	bf00      	nop
 80034cc:	20000208 	.word	0x20000208

080034d0 <_malloc_r>:
 80034d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d4:	1ccd      	adds	r5, r1, #3
 80034d6:	f025 0503 	bic.w	r5, r5, #3
 80034da:	3508      	adds	r5, #8
 80034dc:	2d0c      	cmp	r5, #12
 80034de:	bf38      	it	cc
 80034e0:	250c      	movcc	r5, #12
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	4606      	mov	r6, r0
 80034e6:	db01      	blt.n	80034ec <_malloc_r+0x1c>
 80034e8:	42a9      	cmp	r1, r5
 80034ea:	d904      	bls.n	80034f6 <_malloc_r+0x26>
 80034ec:	230c      	movs	r3, #12
 80034ee:	6033      	str	r3, [r6, #0]
 80034f0:	2000      	movs	r0, #0
 80034f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035cc <_malloc_r+0xfc>
 80034fa:	f000 f869 	bl	80035d0 <__malloc_lock>
 80034fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003502:	461c      	mov	r4, r3
 8003504:	bb44      	cbnz	r4, 8003558 <_malloc_r+0x88>
 8003506:	4629      	mov	r1, r5
 8003508:	4630      	mov	r0, r6
 800350a:	f7ff ffbf 	bl	800348c <sbrk_aligned>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	4604      	mov	r4, r0
 8003512:	d158      	bne.n	80035c6 <_malloc_r+0xf6>
 8003514:	f8d8 4000 	ldr.w	r4, [r8]
 8003518:	4627      	mov	r7, r4
 800351a:	2f00      	cmp	r7, #0
 800351c:	d143      	bne.n	80035a6 <_malloc_r+0xd6>
 800351e:	2c00      	cmp	r4, #0
 8003520:	d04b      	beq.n	80035ba <_malloc_r+0xea>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	4639      	mov	r1, r7
 8003526:	4630      	mov	r0, r6
 8003528:	eb04 0903 	add.w	r9, r4, r3
 800352c:	f000 fb5a 	bl	8003be4 <_sbrk_r>
 8003530:	4581      	cmp	r9, r0
 8003532:	d142      	bne.n	80035ba <_malloc_r+0xea>
 8003534:	6821      	ldr	r1, [r4, #0]
 8003536:	1a6d      	subs	r5, r5, r1
 8003538:	4629      	mov	r1, r5
 800353a:	4630      	mov	r0, r6
 800353c:	f7ff ffa6 	bl	800348c <sbrk_aligned>
 8003540:	3001      	adds	r0, #1
 8003542:	d03a      	beq.n	80035ba <_malloc_r+0xea>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	442b      	add	r3, r5
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	f8d8 3000 	ldr.w	r3, [r8]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	bb62      	cbnz	r2, 80035ac <_malloc_r+0xdc>
 8003552:	f8c8 7000 	str.w	r7, [r8]
 8003556:	e00f      	b.n	8003578 <_malloc_r+0xa8>
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	1b52      	subs	r2, r2, r5
 800355c:	d420      	bmi.n	80035a0 <_malloc_r+0xd0>
 800355e:	2a0b      	cmp	r2, #11
 8003560:	d917      	bls.n	8003592 <_malloc_r+0xc2>
 8003562:	1961      	adds	r1, r4, r5
 8003564:	42a3      	cmp	r3, r4
 8003566:	6025      	str	r5, [r4, #0]
 8003568:	bf18      	it	ne
 800356a:	6059      	strne	r1, [r3, #4]
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	bf08      	it	eq
 8003570:	f8c8 1000 	streq.w	r1, [r8]
 8003574:	5162      	str	r2, [r4, r5]
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	4630      	mov	r0, r6
 800357a:	f000 f82f 	bl	80035dc <__malloc_unlock>
 800357e:	f104 000b 	add.w	r0, r4, #11
 8003582:	1d23      	adds	r3, r4, #4
 8003584:	f020 0007 	bic.w	r0, r0, #7
 8003588:	1ac2      	subs	r2, r0, r3
 800358a:	bf1c      	itt	ne
 800358c:	1a1b      	subne	r3, r3, r0
 800358e:	50a3      	strne	r3, [r4, r2]
 8003590:	e7af      	b.n	80034f2 <_malloc_r+0x22>
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	42a3      	cmp	r3, r4
 8003596:	bf0c      	ite	eq
 8003598:	f8c8 2000 	streq.w	r2, [r8]
 800359c:	605a      	strne	r2, [r3, #4]
 800359e:	e7eb      	b.n	8003578 <_malloc_r+0xa8>
 80035a0:	4623      	mov	r3, r4
 80035a2:	6864      	ldr	r4, [r4, #4]
 80035a4:	e7ae      	b.n	8003504 <_malloc_r+0x34>
 80035a6:	463c      	mov	r4, r7
 80035a8:	687f      	ldr	r7, [r7, #4]
 80035aa:	e7b6      	b.n	800351a <_malloc_r+0x4a>
 80035ac:	461a      	mov	r2, r3
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	d1fb      	bne.n	80035ac <_malloc_r+0xdc>
 80035b4:	2300      	movs	r3, #0
 80035b6:	6053      	str	r3, [r2, #4]
 80035b8:	e7de      	b.n	8003578 <_malloc_r+0xa8>
 80035ba:	230c      	movs	r3, #12
 80035bc:	6033      	str	r3, [r6, #0]
 80035be:	4630      	mov	r0, r6
 80035c0:	f000 f80c 	bl	80035dc <__malloc_unlock>
 80035c4:	e794      	b.n	80034f0 <_malloc_r+0x20>
 80035c6:	6005      	str	r5, [r0, #0]
 80035c8:	e7d6      	b.n	8003578 <_malloc_r+0xa8>
 80035ca:	bf00      	nop
 80035cc:	2000020c 	.word	0x2000020c

080035d0 <__malloc_lock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	@ (80035d8 <__malloc_lock+0x8>)
 80035d2:	f7ff bf0f 	b.w	80033f4 <__retarget_lock_acquire_recursive>
 80035d6:	bf00      	nop
 80035d8:	20000204 	.word	0x20000204

080035dc <__malloc_unlock>:
 80035dc:	4801      	ldr	r0, [pc, #4]	@ (80035e4 <__malloc_unlock+0x8>)
 80035de:	f7ff bf0a 	b.w	80033f6 <__retarget_lock_release_recursive>
 80035e2:	bf00      	nop
 80035e4:	20000204 	.word	0x20000204

080035e8 <__ssputs_r>:
 80035e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	688e      	ldr	r6, [r1, #8]
 80035ee:	461f      	mov	r7, r3
 80035f0:	42be      	cmp	r6, r7
 80035f2:	680b      	ldr	r3, [r1, #0]
 80035f4:	4682      	mov	sl, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	4690      	mov	r8, r2
 80035fa:	d82d      	bhi.n	8003658 <__ssputs_r+0x70>
 80035fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003600:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003604:	d026      	beq.n	8003654 <__ssputs_r+0x6c>
 8003606:	6965      	ldr	r5, [r4, #20]
 8003608:	6909      	ldr	r1, [r1, #16]
 800360a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800360e:	eba3 0901 	sub.w	r9, r3, r1
 8003612:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003616:	1c7b      	adds	r3, r7, #1
 8003618:	444b      	add	r3, r9
 800361a:	106d      	asrs	r5, r5, #1
 800361c:	429d      	cmp	r5, r3
 800361e:	bf38      	it	cc
 8003620:	461d      	movcc	r5, r3
 8003622:	0553      	lsls	r3, r2, #21
 8003624:	d527      	bpl.n	8003676 <__ssputs_r+0x8e>
 8003626:	4629      	mov	r1, r5
 8003628:	f7ff ff52 	bl	80034d0 <_malloc_r>
 800362c:	4606      	mov	r6, r0
 800362e:	b360      	cbz	r0, 800368a <__ssputs_r+0xa2>
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	464a      	mov	r2, r9
 8003634:	f000 fae6 	bl	8003c04 <memcpy>
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800363e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003642:	81a3      	strh	r3, [r4, #12]
 8003644:	6126      	str	r6, [r4, #16]
 8003646:	6165      	str	r5, [r4, #20]
 8003648:	444e      	add	r6, r9
 800364a:	eba5 0509 	sub.w	r5, r5, r9
 800364e:	6026      	str	r6, [r4, #0]
 8003650:	60a5      	str	r5, [r4, #8]
 8003652:	463e      	mov	r6, r7
 8003654:	42be      	cmp	r6, r7
 8003656:	d900      	bls.n	800365a <__ssputs_r+0x72>
 8003658:	463e      	mov	r6, r7
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	4632      	mov	r2, r6
 800365e:	4641      	mov	r1, r8
 8003660:	f000 faa6 	bl	8003bb0 <memmove>
 8003664:	68a3      	ldr	r3, [r4, #8]
 8003666:	1b9b      	subs	r3, r3, r6
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	4433      	add	r3, r6
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	2000      	movs	r0, #0
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003676:	462a      	mov	r2, r5
 8003678:	f000 fad2 	bl	8003c20 <_realloc_r>
 800367c:	4606      	mov	r6, r0
 800367e:	2800      	cmp	r0, #0
 8003680:	d1e0      	bne.n	8003644 <__ssputs_r+0x5c>
 8003682:	6921      	ldr	r1, [r4, #16]
 8003684:	4650      	mov	r0, sl
 8003686:	f7ff feb7 	bl	80033f8 <_free_r>
 800368a:	230c      	movs	r3, #12
 800368c:	f8ca 3000 	str.w	r3, [sl]
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e7e9      	b.n	8003672 <__ssputs_r+0x8a>
	...

080036a0 <_svfiprintf_r>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	4698      	mov	r8, r3
 80036a6:	898b      	ldrh	r3, [r1, #12]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	b09d      	sub	sp, #116	@ 0x74
 80036ac:	4607      	mov	r7, r0
 80036ae:	460d      	mov	r5, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	d510      	bpl.n	80036d6 <_svfiprintf_r+0x36>
 80036b4:	690b      	ldr	r3, [r1, #16]
 80036b6:	b973      	cbnz	r3, 80036d6 <_svfiprintf_r+0x36>
 80036b8:	2140      	movs	r1, #64	@ 0x40
 80036ba:	f7ff ff09 	bl	80034d0 <_malloc_r>
 80036be:	6028      	str	r0, [r5, #0]
 80036c0:	6128      	str	r0, [r5, #16]
 80036c2:	b930      	cbnz	r0, 80036d2 <_svfiprintf_r+0x32>
 80036c4:	230c      	movs	r3, #12
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	b01d      	add	sp, #116	@ 0x74
 80036ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d2:	2340      	movs	r3, #64	@ 0x40
 80036d4:	616b      	str	r3, [r5, #20]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80036da:	2320      	movs	r3, #32
 80036dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80036e4:	2330      	movs	r3, #48	@ 0x30
 80036e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003884 <_svfiprintf_r+0x1e4>
 80036ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036ee:	f04f 0901 	mov.w	r9, #1
 80036f2:	4623      	mov	r3, r4
 80036f4:	469a      	mov	sl, r3
 80036f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036fa:	b10a      	cbz	r2, 8003700 <_svfiprintf_r+0x60>
 80036fc:	2a25      	cmp	r2, #37	@ 0x25
 80036fe:	d1f9      	bne.n	80036f4 <_svfiprintf_r+0x54>
 8003700:	ebba 0b04 	subs.w	fp, sl, r4
 8003704:	d00b      	beq.n	800371e <_svfiprintf_r+0x7e>
 8003706:	465b      	mov	r3, fp
 8003708:	4622      	mov	r2, r4
 800370a:	4629      	mov	r1, r5
 800370c:	4638      	mov	r0, r7
 800370e:	f7ff ff6b 	bl	80035e8 <__ssputs_r>
 8003712:	3001      	adds	r0, #1
 8003714:	f000 80a7 	beq.w	8003866 <_svfiprintf_r+0x1c6>
 8003718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800371a:	445a      	add	r2, fp
 800371c:	9209      	str	r2, [sp, #36]	@ 0x24
 800371e:	f89a 3000 	ldrb.w	r3, [sl]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 809f 	beq.w	8003866 <_svfiprintf_r+0x1c6>
 8003728:	2300      	movs	r3, #0
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003732:	f10a 0a01 	add.w	sl, sl, #1
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	9307      	str	r3, [sp, #28]
 800373a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800373e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003740:	4654      	mov	r4, sl
 8003742:	2205      	movs	r2, #5
 8003744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003748:	484e      	ldr	r0, [pc, #312]	@ (8003884 <_svfiprintf_r+0x1e4>)
 800374a:	f7fc fd51 	bl	80001f0 <memchr>
 800374e:	9a04      	ldr	r2, [sp, #16]
 8003750:	b9d8      	cbnz	r0, 800378a <_svfiprintf_r+0xea>
 8003752:	06d0      	lsls	r0, r2, #27
 8003754:	bf44      	itt	mi
 8003756:	2320      	movmi	r3, #32
 8003758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375c:	0711      	lsls	r1, r2, #28
 800375e:	bf44      	itt	mi
 8003760:	232b      	movmi	r3, #43	@ 0x2b
 8003762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003766:	f89a 3000 	ldrb.w	r3, [sl]
 800376a:	2b2a      	cmp	r3, #42	@ 0x2a
 800376c:	d015      	beq.n	800379a <_svfiprintf_r+0xfa>
 800376e:	9a07      	ldr	r2, [sp, #28]
 8003770:	4654      	mov	r4, sl
 8003772:	2000      	movs	r0, #0
 8003774:	f04f 0c0a 	mov.w	ip, #10
 8003778:	4621      	mov	r1, r4
 800377a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800377e:	3b30      	subs	r3, #48	@ 0x30
 8003780:	2b09      	cmp	r3, #9
 8003782:	d94b      	bls.n	800381c <_svfiprintf_r+0x17c>
 8003784:	b1b0      	cbz	r0, 80037b4 <_svfiprintf_r+0x114>
 8003786:	9207      	str	r2, [sp, #28]
 8003788:	e014      	b.n	80037b4 <_svfiprintf_r+0x114>
 800378a:	eba0 0308 	sub.w	r3, r0, r8
 800378e:	fa09 f303 	lsl.w	r3, r9, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	9304      	str	r3, [sp, #16]
 8003796:	46a2      	mov	sl, r4
 8003798:	e7d2      	b.n	8003740 <_svfiprintf_r+0xa0>
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	1d19      	adds	r1, r3, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	9103      	str	r1, [sp, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bfbb      	ittet	lt
 80037a6:	425b      	neglt	r3, r3
 80037a8:	f042 0202 	orrlt.w	r2, r2, #2
 80037ac:	9307      	strge	r3, [sp, #28]
 80037ae:	9307      	strlt	r3, [sp, #28]
 80037b0:	bfb8      	it	lt
 80037b2:	9204      	strlt	r2, [sp, #16]
 80037b4:	7823      	ldrb	r3, [r4, #0]
 80037b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80037b8:	d10a      	bne.n	80037d0 <_svfiprintf_r+0x130>
 80037ba:	7863      	ldrb	r3, [r4, #1]
 80037bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80037be:	d132      	bne.n	8003826 <_svfiprintf_r+0x186>
 80037c0:	9b03      	ldr	r3, [sp, #12]
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	9203      	str	r2, [sp, #12]
 80037c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037cc:	3402      	adds	r4, #2
 80037ce:	9305      	str	r3, [sp, #20]
 80037d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003894 <_svfiprintf_r+0x1f4>
 80037d4:	7821      	ldrb	r1, [r4, #0]
 80037d6:	2203      	movs	r2, #3
 80037d8:	4650      	mov	r0, sl
 80037da:	f7fc fd09 	bl	80001f0 <memchr>
 80037de:	b138      	cbz	r0, 80037f0 <_svfiprintf_r+0x150>
 80037e0:	9b04      	ldr	r3, [sp, #16]
 80037e2:	eba0 000a 	sub.w	r0, r0, sl
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	4082      	lsls	r2, r0
 80037ea:	4313      	orrs	r3, r2
 80037ec:	3401      	adds	r4, #1
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f4:	4824      	ldr	r0, [pc, #144]	@ (8003888 <_svfiprintf_r+0x1e8>)
 80037f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037fa:	2206      	movs	r2, #6
 80037fc:	f7fc fcf8 	bl	80001f0 <memchr>
 8003800:	2800      	cmp	r0, #0
 8003802:	d036      	beq.n	8003872 <_svfiprintf_r+0x1d2>
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <_svfiprintf_r+0x1ec>)
 8003806:	bb1b      	cbnz	r3, 8003850 <_svfiprintf_r+0x1b0>
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	3307      	adds	r3, #7
 800380c:	f023 0307 	bic.w	r3, r3, #7
 8003810:	3308      	adds	r3, #8
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003816:	4433      	add	r3, r6
 8003818:	9309      	str	r3, [sp, #36]	@ 0x24
 800381a:	e76a      	b.n	80036f2 <_svfiprintf_r+0x52>
 800381c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003820:	460c      	mov	r4, r1
 8003822:	2001      	movs	r0, #1
 8003824:	e7a8      	b.n	8003778 <_svfiprintf_r+0xd8>
 8003826:	2300      	movs	r3, #0
 8003828:	3401      	adds	r4, #1
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	4619      	mov	r1, r3
 800382e:	f04f 0c0a 	mov.w	ip, #10
 8003832:	4620      	mov	r0, r4
 8003834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003838:	3a30      	subs	r2, #48	@ 0x30
 800383a:	2a09      	cmp	r2, #9
 800383c:	d903      	bls.n	8003846 <_svfiprintf_r+0x1a6>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0c6      	beq.n	80037d0 <_svfiprintf_r+0x130>
 8003842:	9105      	str	r1, [sp, #20]
 8003844:	e7c4      	b.n	80037d0 <_svfiprintf_r+0x130>
 8003846:	fb0c 2101 	mla	r1, ip, r1, r2
 800384a:	4604      	mov	r4, r0
 800384c:	2301      	movs	r3, #1
 800384e:	e7f0      	b.n	8003832 <_svfiprintf_r+0x192>
 8003850:	ab03      	add	r3, sp, #12
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	462a      	mov	r2, r5
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <_svfiprintf_r+0x1f0>)
 8003858:	a904      	add	r1, sp, #16
 800385a:	4638      	mov	r0, r7
 800385c:	f3af 8000 	nop.w
 8003860:	1c42      	adds	r2, r0, #1
 8003862:	4606      	mov	r6, r0
 8003864:	d1d6      	bne.n	8003814 <_svfiprintf_r+0x174>
 8003866:	89ab      	ldrh	r3, [r5, #12]
 8003868:	065b      	lsls	r3, r3, #25
 800386a:	f53f af2d 	bmi.w	80036c8 <_svfiprintf_r+0x28>
 800386e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003870:	e72c      	b.n	80036cc <_svfiprintf_r+0x2c>
 8003872:	ab03      	add	r3, sp, #12
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	462a      	mov	r2, r5
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <_svfiprintf_r+0x1f0>)
 800387a:	a904      	add	r1, sp, #16
 800387c:	4638      	mov	r0, r7
 800387e:	f000 f879 	bl	8003974 <_printf_i>
 8003882:	e7ed      	b.n	8003860 <_svfiprintf_r+0x1c0>
 8003884:	0800418c 	.word	0x0800418c
 8003888:	08004196 	.word	0x08004196
 800388c:	00000000 	.word	0x00000000
 8003890:	080035e9 	.word	0x080035e9
 8003894:	08004192 	.word	0x08004192

08003898 <_printf_common>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	4616      	mov	r6, r2
 800389e:	4698      	mov	r8, r3
 80038a0:	688a      	ldr	r2, [r1, #8]
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfb8      	it	lt
 80038ac:	4613      	movlt	r3, r2
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038b4:	4607      	mov	r7, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b10a      	cbz	r2, 80038be <_printf_common+0x26>
 80038ba:	3301      	adds	r3, #1
 80038bc:	6033      	str	r3, [r6, #0]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	6833      	ldrmi	r3, [r6, #0]
 80038c6:	3302      	addmi	r3, #2
 80038c8:	6033      	strmi	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	f015 0506 	ands.w	r5, r5, #6
 80038d0:	d106      	bne.n	80038e0 <_printf_common+0x48>
 80038d2:	f104 0a19 	add.w	sl, r4, #25
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	6832      	ldr	r2, [r6, #0]
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	42ab      	cmp	r3, r5
 80038de:	dc26      	bgt.n	800392e <_printf_common+0x96>
 80038e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	3b00      	subs	r3, #0
 80038e8:	bf18      	it	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	0692      	lsls	r2, r2, #26
 80038ee:	d42b      	bmi.n	8003948 <_printf_common+0xb0>
 80038f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038f4:	4641      	mov	r1, r8
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c8      	blx	r9
 80038fa:	3001      	adds	r0, #1
 80038fc:	d01e      	beq.n	800393c <_printf_common+0xa4>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	6922      	ldr	r2, [r4, #16]
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf02      	ittt	eq
 800390a:	68e5      	ldreq	r5, [r4, #12]
 800390c:	6833      	ldreq	r3, [r6, #0]
 800390e:	1aed      	subeq	r5, r5, r3
 8003910:	68a3      	ldr	r3, [r4, #8]
 8003912:	bf0c      	ite	eq
 8003914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003918:	2500      	movne	r5, #0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfc4      	itt	gt
 800391e:	1a9b      	subgt	r3, r3, r2
 8003920:	18ed      	addgt	r5, r5, r3
 8003922:	2600      	movs	r6, #0
 8003924:	341a      	adds	r4, #26
 8003926:	42b5      	cmp	r5, r6
 8003928:	d11a      	bne.n	8003960 <_printf_common+0xc8>
 800392a:	2000      	movs	r0, #0
 800392c:	e008      	b.n	8003940 <_printf_common+0xa8>
 800392e:	2301      	movs	r3, #1
 8003930:	4652      	mov	r2, sl
 8003932:	4641      	mov	r1, r8
 8003934:	4638      	mov	r0, r7
 8003936:	47c8      	blx	r9
 8003938:	3001      	adds	r0, #1
 800393a:	d103      	bne.n	8003944 <_printf_common+0xac>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	3501      	adds	r5, #1
 8003946:	e7c6      	b.n	80038d6 <_printf_common+0x3e>
 8003948:	18e1      	adds	r1, r4, r3
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	2030      	movs	r0, #48	@ 0x30
 800394e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003952:	4422      	add	r2, r4
 8003954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800395c:	3302      	adds	r3, #2
 800395e:	e7c7      	b.n	80038f0 <_printf_common+0x58>
 8003960:	2301      	movs	r3, #1
 8003962:	4622      	mov	r2, r4
 8003964:	4641      	mov	r1, r8
 8003966:	4638      	mov	r0, r7
 8003968:	47c8      	blx	r9
 800396a:	3001      	adds	r0, #1
 800396c:	d0e6      	beq.n	800393c <_printf_common+0xa4>
 800396e:	3601      	adds	r6, #1
 8003970:	e7d9      	b.n	8003926 <_printf_common+0x8e>
	...

08003974 <_printf_i>:
 8003974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	7e0f      	ldrb	r7, [r1, #24]
 800397a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800397c:	2f78      	cmp	r7, #120	@ 0x78
 800397e:	4691      	mov	r9, r2
 8003980:	4680      	mov	r8, r0
 8003982:	460c      	mov	r4, r1
 8003984:	469a      	mov	sl, r3
 8003986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800398a:	d807      	bhi.n	800399c <_printf_i+0x28>
 800398c:	2f62      	cmp	r7, #98	@ 0x62
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x32>
 8003990:	2f00      	cmp	r7, #0
 8003992:	f000 80d1 	beq.w	8003b38 <_printf_i+0x1c4>
 8003996:	2f58      	cmp	r7, #88	@ 0x58
 8003998:	f000 80b8 	beq.w	8003b0c <_printf_i+0x198>
 800399c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039a4:	e03a      	b.n	8003a1c <_printf_i+0xa8>
 80039a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039aa:	2b15      	cmp	r3, #21
 80039ac:	d8f6      	bhi.n	800399c <_printf_i+0x28>
 80039ae:	a101      	add	r1, pc, #4	@ (adr r1, 80039b4 <_printf_i+0x40>)
 80039b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
 80039bc:	0800399d 	.word	0x0800399d
 80039c0:	0800399d 	.word	0x0800399d
 80039c4:	0800399d 	.word	0x0800399d
 80039c8:	0800399d 	.word	0x0800399d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800399d 	.word	0x0800399d
 80039d4:	0800399d 	.word	0x0800399d
 80039d8:	0800399d 	.word	0x0800399d
 80039dc:	0800399d 	.word	0x0800399d
 80039e0:	08003b1f 	.word	0x08003b1f
 80039e4:	08003a4b 	.word	0x08003a4b
 80039e8:	08003ad9 	.word	0x08003ad9
 80039ec:	0800399d 	.word	0x0800399d
 80039f0:	0800399d 	.word	0x0800399d
 80039f4:	08003b41 	.word	0x08003b41
 80039f8:	0800399d 	.word	0x0800399d
 80039fc:	08003a4b 	.word	0x08003a4b
 8003a00:	0800399d 	.word	0x0800399d
 8003a04:	0800399d 	.word	0x0800399d
 8003a08:	08003ae1 	.word	0x08003ae1
 8003a0c:	6833      	ldr	r3, [r6, #0]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6032      	str	r2, [r6, #0]
 8003a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e09c      	b.n	8003b5a <_printf_i+0x1e6>
 8003a20:	6833      	ldr	r3, [r6, #0]
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	6031      	str	r1, [r6, #0]
 8003a28:	0606      	lsls	r6, r0, #24
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0xbc>
 8003a2c:	681d      	ldr	r5, [r3, #0]
 8003a2e:	e003      	b.n	8003a38 <_printf_i+0xc4>
 8003a30:	0645      	lsls	r5, r0, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0xb8>
 8003a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	da03      	bge.n	8003a44 <_printf_i+0xd0>
 8003a3c:	232d      	movs	r3, #45	@ 0x2d
 8003a3e:	426d      	negs	r5, r5
 8003a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a44:	4858      	ldr	r0, [pc, #352]	@ (8003ba8 <_printf_i+0x234>)
 8003a46:	230a      	movs	r3, #10
 8003a48:	e011      	b.n	8003a6e <_printf_i+0xfa>
 8003a4a:	6821      	ldr	r1, [r4, #0]
 8003a4c:	6833      	ldr	r3, [r6, #0]
 8003a4e:	0608      	lsls	r0, r1, #24
 8003a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a54:	d402      	bmi.n	8003a5c <_printf_i+0xe8>
 8003a56:	0649      	lsls	r1, r1, #25
 8003a58:	bf48      	it	mi
 8003a5a:	b2ad      	uxthmi	r5, r5
 8003a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a5e:	4852      	ldr	r0, [pc, #328]	@ (8003ba8 <_printf_i+0x234>)
 8003a60:	6033      	str	r3, [r6, #0]
 8003a62:	bf14      	ite	ne
 8003a64:	230a      	movne	r3, #10
 8003a66:	2308      	moveq	r3, #8
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a6e:	6866      	ldr	r6, [r4, #4]
 8003a70:	60a6      	str	r6, [r4, #8]
 8003a72:	2e00      	cmp	r6, #0
 8003a74:	db05      	blt.n	8003a82 <_printf_i+0x10e>
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	432e      	orrs	r6, r5
 8003a7a:	f021 0104 	bic.w	r1, r1, #4
 8003a7e:	6021      	str	r1, [r4, #0]
 8003a80:	d04b      	beq.n	8003b1a <_printf_i+0x1a6>
 8003a82:	4616      	mov	r6, r2
 8003a84:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a88:	fb03 5711 	mls	r7, r3, r1, r5
 8003a8c:	5dc7      	ldrb	r7, [r0, r7]
 8003a8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a92:	462f      	mov	r7, r5
 8003a94:	42bb      	cmp	r3, r7
 8003a96:	460d      	mov	r5, r1
 8003a98:	d9f4      	bls.n	8003a84 <_printf_i+0x110>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d10b      	bne.n	8003ab6 <_printf_i+0x142>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	07df      	lsls	r7, r3, #31
 8003aa2:	d508      	bpl.n	8003ab6 <_printf_i+0x142>
 8003aa4:	6923      	ldr	r3, [r4, #16]
 8003aa6:	6861      	ldr	r1, [r4, #4]
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	bfde      	ittt	le
 8003aac:	2330      	movle	r3, #48	@ 0x30
 8003aae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ab2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ab6:	1b92      	subs	r2, r2, r6
 8003ab8:	6122      	str	r2, [r4, #16]
 8003aba:	f8cd a000 	str.w	sl, [sp]
 8003abe:	464b      	mov	r3, r9
 8003ac0:	aa03      	add	r2, sp, #12
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	f7ff fee7 	bl	8003898 <_printf_common>
 8003aca:	3001      	adds	r0, #1
 8003acc:	d14a      	bne.n	8003b64 <_printf_i+0x1f0>
 8003ace:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad2:	b004      	add	sp, #16
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	4832      	ldr	r0, [pc, #200]	@ (8003bac <_printf_i+0x238>)
 8003ae2:	2778      	movs	r7, #120	@ 0x78
 8003ae4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	6831      	ldr	r1, [r6, #0]
 8003aec:	061f      	lsls	r7, r3, #24
 8003aee:	f851 5b04 	ldr.w	r5, [r1], #4
 8003af2:	d402      	bmi.n	8003afa <_printf_i+0x186>
 8003af4:	065f      	lsls	r7, r3, #25
 8003af6:	bf48      	it	mi
 8003af8:	b2ad      	uxthmi	r5, r5
 8003afa:	6031      	str	r1, [r6, #0]
 8003afc:	07d9      	lsls	r1, r3, #31
 8003afe:	bf44      	itt	mi
 8003b00:	f043 0320 	orrmi.w	r3, r3, #32
 8003b04:	6023      	strmi	r3, [r4, #0]
 8003b06:	b11d      	cbz	r5, 8003b10 <_printf_i+0x19c>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	e7ad      	b.n	8003a68 <_printf_i+0xf4>
 8003b0c:	4826      	ldr	r0, [pc, #152]	@ (8003ba8 <_printf_i+0x234>)
 8003b0e:	e7e9      	b.n	8003ae4 <_printf_i+0x170>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	f023 0320 	bic.w	r3, r3, #32
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	e7f6      	b.n	8003b08 <_printf_i+0x194>
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	e7bd      	b.n	8003a9a <_printf_i+0x126>
 8003b1e:	6833      	ldr	r3, [r6, #0]
 8003b20:	6825      	ldr	r5, [r4, #0]
 8003b22:	6961      	ldr	r1, [r4, #20]
 8003b24:	1d18      	adds	r0, r3, #4
 8003b26:	6030      	str	r0, [r6, #0]
 8003b28:	062e      	lsls	r6, r5, #24
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	d501      	bpl.n	8003b32 <_printf_i+0x1be>
 8003b2e:	6019      	str	r1, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <_printf_i+0x1c4>
 8003b32:	0668      	lsls	r0, r5, #25
 8003b34:	d5fb      	bpl.n	8003b2e <_printf_i+0x1ba>
 8003b36:	8019      	strh	r1, [r3, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	4616      	mov	r6, r2
 8003b3e:	e7bc      	b.n	8003aba <_printf_i+0x146>
 8003b40:	6833      	ldr	r3, [r6, #0]
 8003b42:	1d1a      	adds	r2, r3, #4
 8003b44:	6032      	str	r2, [r6, #0]
 8003b46:	681e      	ldr	r6, [r3, #0]
 8003b48:	6862      	ldr	r2, [r4, #4]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7fc fb4f 	bl	80001f0 <memchr>
 8003b52:	b108      	cbz	r0, 8003b58 <_printf_i+0x1e4>
 8003b54:	1b80      	subs	r0, r0, r6
 8003b56:	6060      	str	r0, [r4, #4]
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b62:	e7aa      	b.n	8003aba <_printf_i+0x146>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	4632      	mov	r2, r6
 8003b68:	4649      	mov	r1, r9
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	47d0      	blx	sl
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d0ad      	beq.n	8003ace <_printf_i+0x15a>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	079b      	lsls	r3, r3, #30
 8003b76:	d413      	bmi.n	8003ba0 <_printf_i+0x22c>
 8003b78:	68e0      	ldr	r0, [r4, #12]
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	4298      	cmp	r0, r3
 8003b7e:	bfb8      	it	lt
 8003b80:	4618      	movlt	r0, r3
 8003b82:	e7a6      	b.n	8003ad2 <_printf_i+0x15e>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4632      	mov	r2, r6
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	47d0      	blx	sl
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d09d      	beq.n	8003ace <_printf_i+0x15a>
 8003b92:	3501      	adds	r5, #1
 8003b94:	68e3      	ldr	r3, [r4, #12]
 8003b96:	9903      	ldr	r1, [sp, #12]
 8003b98:	1a5b      	subs	r3, r3, r1
 8003b9a:	42ab      	cmp	r3, r5
 8003b9c:	dcf2      	bgt.n	8003b84 <_printf_i+0x210>
 8003b9e:	e7eb      	b.n	8003b78 <_printf_i+0x204>
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	f104 0619 	add.w	r6, r4, #25
 8003ba6:	e7f5      	b.n	8003b94 <_printf_i+0x220>
 8003ba8:	0800419d 	.word	0x0800419d
 8003bac:	080041ae 	.word	0x080041ae

08003bb0 <memmove>:
 8003bb0:	4288      	cmp	r0, r1
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	eb01 0402 	add.w	r4, r1, r2
 8003bb8:	d902      	bls.n	8003bc0 <memmove+0x10>
 8003bba:	4284      	cmp	r4, r0
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	d807      	bhi.n	8003bd0 <memmove+0x20>
 8003bc0:	1e43      	subs	r3, r0, #1
 8003bc2:	42a1      	cmp	r1, r4
 8003bc4:	d008      	beq.n	8003bd8 <memmove+0x28>
 8003bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bce:	e7f8      	b.n	8003bc2 <memmove+0x12>
 8003bd0:	4402      	add	r2, r0
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	428a      	cmp	r2, r1
 8003bd6:	d100      	bne.n	8003bda <memmove+0x2a>
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be2:	e7f7      	b.n	8003bd4 <memmove+0x24>

08003be4 <_sbrk_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d06      	ldr	r5, [pc, #24]	@ (8003c00 <_sbrk_r+0x1c>)
 8003be8:	2300      	movs	r3, #0
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7fd fa38 	bl	8001064 <_sbrk>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_sbrk_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_sbrk_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000200 	.word	0x20000200

08003c04 <memcpy>:
 8003c04:	440a      	add	r2, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c0c:	d100      	bne.n	8003c10 <memcpy+0xc>
 8003c0e:	4770      	bx	lr
 8003c10:	b510      	push	{r4, lr}
 8003c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	d1f9      	bne.n	8003c12 <memcpy+0xe>
 8003c1e:	bd10      	pop	{r4, pc}

08003c20 <_realloc_r>:
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c24:	4607      	mov	r7, r0
 8003c26:	4614      	mov	r4, r2
 8003c28:	460d      	mov	r5, r1
 8003c2a:	b921      	cbnz	r1, 8003c36 <_realloc_r+0x16>
 8003c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c30:	4611      	mov	r1, r2
 8003c32:	f7ff bc4d 	b.w	80034d0 <_malloc_r>
 8003c36:	b92a      	cbnz	r2, 8003c44 <_realloc_r+0x24>
 8003c38:	f7ff fbde 	bl	80033f8 <_free_r>
 8003c3c:	4625      	mov	r5, r4
 8003c3e:	4628      	mov	r0, r5
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c44:	f000 f81a 	bl	8003c7c <_malloc_usable_size_r>
 8003c48:	4284      	cmp	r4, r0
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	d802      	bhi.n	8003c54 <_realloc_r+0x34>
 8003c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c52:	d8f4      	bhi.n	8003c3e <_realloc_r+0x1e>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4638      	mov	r0, r7
 8003c58:	f7ff fc3a 	bl	80034d0 <_malloc_r>
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	b908      	cbnz	r0, 8003c64 <_realloc_r+0x44>
 8003c60:	4645      	mov	r5, r8
 8003c62:	e7ec      	b.n	8003c3e <_realloc_r+0x1e>
 8003c64:	42b4      	cmp	r4, r6
 8003c66:	4622      	mov	r2, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	bf28      	it	cs
 8003c6c:	4632      	movcs	r2, r6
 8003c6e:	f7ff ffc9 	bl	8003c04 <memcpy>
 8003c72:	4629      	mov	r1, r5
 8003c74:	4638      	mov	r0, r7
 8003c76:	f7ff fbbf 	bl	80033f8 <_free_r>
 8003c7a:	e7f1      	b.n	8003c60 <_realloc_r+0x40>

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c80:	1f18      	subs	r0, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfbc      	itt	lt
 8003c86:	580b      	ldrlt	r3, [r1, r0]
 8003c88:	18c0      	addlt	r0, r0, r3
 8003c8a:	4770      	bx	lr

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
