
testingADCv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008748  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  0000a108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008940  08008940  00009940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00009948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800894c  0800894c  0000994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08008950  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000108  08008a58  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  08008a58  0000a368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157bf  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003832  00000000  00000000  0001f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00023130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8d  00000000  00000000  00024440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4b1  00000000  00000000  000252cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180f4  00000000  00000000  0003f77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bdc1  00000000  00000000  00057872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  000f3678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f85ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080088c8 	.word	0x080088c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	080088c8 	.word	0x080088c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void USBRxData(uint8_t *buf, uint32_t Len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d10e      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcraws, 8);
 8000516:	2208      	movs	r2, #8
 8000518:	4909      	ldr	r1, [pc, #36]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800051c:	f000 fe02 	bl	8001124 <HAL_ADC_Start_DMA>
		if(is10ms)
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x30>
			is10ms--;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000532:	701a      	strb	r2, [r3, #0]

	}
	if(htim->Instance == TIM10){

	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40014800 	.word	0x40014800
 8000540:	20000368 	.word	0x20000368
 8000544:	20000124 	.word	0x20000124
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	u_part.ui16[0] = adcraws[0];
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <HAL_ADC_ConvCpltCallback+0x30>)
 800055a:	801a      	strh	r2, [r3, #0]
	//bufTx[0] = 'I';
	//bufTx[1] = 'R';
	//bufTx[2] = ':';
	bufTx[0] = u_part.ui8[0];
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <HAL_ADC_ConvCpltCallback+0x30>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <HAL_ADC_ConvCpltCallback+0x34>)
 8000562:	701a      	strb	r2, [r3, #0]
	bufTx[1] = u_part.ui8[1];
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <HAL_ADC_ConvCpltCallback+0x30>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <HAL_ADC_ConvCpltCallback+0x34>)
 800056a:	705a      	strb	r2, [r3, #1]
	//bufTx[2] = '\n';

}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	20000368 	.word	0x20000368
 800057c:	20000378 	.word	0x20000378
 8000580:	2000025c 	.word	0x2000025c

08000584 <USBRxData>:
void USBRxData(uint8_t *buf, uint32_t Len){
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	BufUSBTx[0] = 'U';
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <USBRxData+0x60>)
 8000590:	2255      	movs	r2, #85	@ 0x55
 8000592:	701a      	strb	r2, [r3, #0]
    BufUSBTx[1] = 'N';
 8000594:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <USBRxData+0x60>)
 8000596:	224e      	movs	r2, #78	@ 0x4e
 8000598:	705a      	strb	r2, [r3, #1]
	BufUSBTx[2] = 'E';
 800059a:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <USBRxData+0x60>)
 800059c:	2245      	movs	r2, #69	@ 0x45
 800059e:	709a      	strb	r2, [r3, #2]
	BufUSBTx[3] = 'R';
 80005a0:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <USBRxData+0x60>)
 80005a2:	2252      	movs	r2, #82	@ 0x52
 80005a4:	70da      	strb	r2, [r3, #3]

	for(uint8_t nBytesTx = 0;nBytesTx<Len;nBytesTx++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
 80005aa:	e00a      	b.n	80005c2 <USBRxData+0x3e>
		BufUSBTx[nBytesTx+4] = buf[nBytesTx];
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	441a      	add	r2, r3
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3304      	adds	r3, #4
 80005b6:	7811      	ldrb	r1, [r2, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <USBRxData+0x60>)
 80005ba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t nBytesTx = 0;nBytesTx<Len;nBytesTx++){
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	3301      	adds	r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8f0      	bhi.n	80005ac <USBRxData+0x28>
	}
	nBytesTx+=4;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <USBRxData+0x64>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <USBRxData+0x64>)
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000264 	.word	0x20000264
 80005e8:	20000364 	.word	0x20000364

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fbae 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_ADC_Start_DMA(hadc, pData, Length);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f852 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9c8 	bl	800098c <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9a6 	bl	800094c <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f8b4 	bl	800076c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000604:	f007 fbb8 	bl	8007d78 <MX_USB_DEVICE_Init>
  MX_TIM11_Init();
 8000608:	f000 f97c 	bl	8000904 <MX_TIM11_Init>
  MX_TIM10_Init();
 800060c:	f000 f956 	bl	80008bc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <main+0x90>)
 8000612:	f003 fe5f 	bl	80042d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <main+0x94>)
 8000618:	f003 fe5c 	bl	80042d4 <HAL_TIM_Base_Start_IT>
  CDC_Attach_Rx(USBRxData);
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0x98>)
 800061e:	f007 fcfd 	bl	800801c <CDC_Attach_Rx>
  nBytesTx = 0;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <main+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!is10ms){
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <main+0xa0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d108      	bne.n	8000642 <main+0x56>
		  is10ms = 40;
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <main+0xa0>)
 8000632:	2228      	movs	r2, #40	@ 0x28
 8000634:	701a      	strb	r2, [r3, #0]
		  is250ms--;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <main+0xa4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <main+0xa4>)
 8000640:	701a      	strb	r2, [r3, #0]
	  }
	  if(!is250ms){
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <main+0xa4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d113      	bne.n	8000672 <main+0x86>
		  is250ms = 25;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <main+0xa4>)
 800064c:	2219      	movs	r2, #25
 800064e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000650:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000654:	480f      	ldr	r0, [pc, #60]	@ (8000694 <main+0xa8>)
 8000656:	f001 ff50 	bl	80024fa <HAL_GPIO_TogglePin>
		  if(CDC_Transmit_FS(BufUSBTx,nBytesTx) == USBD_OK)
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <main+0x9c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <main+0xac>)
 8000662:	f007 fca3 	bl	8007fac <CDC_Transmit_FS>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <main+0x86>
			  nBytesTx = 0;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <main+0x9c>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	@ 0xfa
 8000674:	f000 fbde 	bl	8000e34 <HAL_Delay>
	  if(!is10ms){
 8000678:	e7d6      	b.n	8000628 <main+0x3c>
 800067a:	bf00      	nop
 800067c:	20000214 	.word	0x20000214
 8000680:	200001cc 	.word	0x200001cc
 8000684:	08000585 	.word	0x08000585
 8000688:	20000364 	.word	0x20000364
 800068c:	20000000 	.word	0x20000000
 8000690:	20000001 	.word	0x20000001
 8000694:	40020800 	.word	0x40020800
 8000698:	20000264 	.word	0x20000264

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 f8e0 	bl	8008870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <SystemClock_Config+0xc8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800070c:	2319      	movs	r3, #25
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f957 	bl	80039d4 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f980 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2103      	movs	r1, #3
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fbb9 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000758:	f000 f96a 	bl	8000a30 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b4c      	ldr	r3, [pc, #304]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000780:	4a4c      	ldr	r2, [pc, #304]	@ (80008b4 <MX_ADC1_Init+0x148>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b4a      	ldr	r3, [pc, #296]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b48      	ldr	r3, [pc, #288]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000792:	4b47      	ldr	r3, [pc, #284]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b45      	ldr	r3, [pc, #276]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b44      	ldr	r3, [pc, #272]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b42      	ldr	r3, [pc, #264]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b40      	ldr	r3, [pc, #256]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007ae:	4a42      	ldr	r2, [pc, #264]	@ (80008b8 <MX_ADC1_Init+0x14c>)
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b3f      	ldr	r3, [pc, #252]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80007b8:	4b3d      	ldr	r3, [pc, #244]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b3a      	ldr	r3, [pc, #232]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	4838      	ldr	r0, [pc, #224]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007ce:	f000 fb55 	bl	8000e7c <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f92a 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007e4:	2303      	movs	r3, #3
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4830      	ldr	r0, [pc, #192]	@ (80008b0 <MX_ADC1_Init+0x144>)
 80007ee:	f000 fdab 	bl	8001348 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 f91a 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4829      	ldr	r0, [pc, #164]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800080a:	f000 fd9d 	bl	8001348 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 f90c 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4823      	ldr	r0, [pc, #140]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000822:	f000 fd91 	bl	8001348 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800082c:	f000 f900 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	481d      	ldr	r0, [pc, #116]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800083a:	f000 fd85 	bl	8001348 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000844:	f000 f8f4 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000848:	2305      	movs	r3, #5
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000852:	f000 fd79 	bl	8001348 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800085c:	f000 f8e8 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000860:	2306      	movs	r3, #6
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800086a:	f000 fd6d 	bl	8001348 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000874:	f000 f8dc 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000878:	2307      	movs	r3, #7
 800087a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_ADC1_Init+0x144>)
 8000882:	f000 fd61 	bl	8001348 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 800088c:	f000 f8d0 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_ADC1_Init+0x144>)
 800089a:	f000 fd55 	bl	8001348 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80008a4:	f000 f8c4 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000124 	.word	0x20000124
 80008b4:	40012000 	.word	0x40012000
 80008b8:	0f000001 	.word	0x0f000001

080008bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <MX_TIM10_Init+0x44>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 23999;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008d4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80008d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_TIM10_Init+0x40>)
 80008e8:	f003 fca4 	bl	8004234 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80008f2:	f000 f89d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001cc 	.word	0x200001cc
 8000900:	40014400 	.word	0x40014400

08000904 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_TIM11_Init+0x40>)
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <MX_TIM11_Init+0x44>)
 800090c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <MX_TIM11_Init+0x40>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_TIM11_Init+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 23999;
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <MX_TIM11_Init+0x40>)
 800091c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000920:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_TIM11_Init+0x40>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_TIM11_Init+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_TIM11_Init+0x40>)
 8000930:	f003 fc80 	bl	8004234 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800093a:	f000 f879 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000214 	.word	0x20000214
 8000948:	40014800 	.word	0x40014800

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <MX_DMA_Init+0x3c>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2038      	movs	r0, #56	@ 0x38
 8000974:	f001 f87d 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000978:	2038      	movs	r0, #56	@ 0x38
 800097a:	f001 f896 	bl	8001aaa <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_GPIO_Init+0x9c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <MX_GPIO_Init+0xa0>)
 80009fe:	f001 fd63 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_GPIO_Init+0xa0>)
 8000a1c:	f001 fbd0 	bl	80021c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020800 	.word	0x40020800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a32      	ldr	r2, [pc, #200]	@ (8000b74 <HAL_ADC_MspInit+0xe8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d15e      	bne.n	8000b6c <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a30      	ldr	r2, [pc, #192]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a29      	ldr	r2, [pc, #164]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <HAL_ADC_MspInit+0xec>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ae6:	23ff      	movs	r3, #255	@ 0xff
 8000ae8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aea:	2303      	movs	r3, #3
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4820      	ldr	r0, [pc, #128]	@ (8000b7c <HAL_ADC_MspInit+0xf0>)
 8000afa:	f001 fb61 	bl	80021c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b00:	4a20      	ldr	r2, [pc, #128]	@ (8000b84 <HAL_ADC_MspInit+0xf8>)
 8000b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b40:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b42:	f000 ffcd 	bl	8001ae0 <HAL_DMA_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000b4c:	f7ff ff70 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_ADC_MspInit+0xf4>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2012      	movs	r0, #18
 8000b62:	f000 ff86 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b66:	2012      	movs	r0, #18
 8000b68:	f000 ff9f 	bl	8001aaa <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40012000 	.word	0x40012000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	2000016c 	.word	0x2000016c
 8000b84:	40026410 	.word	0x40026410

08000b88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_TIM_Base_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d116      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000baa:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2019      	movs	r0, #25
 8000bbc:	f000 ff59 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bc0:	2019      	movs	r0, #25
 8000bc2:	f000 ff72 	bl	8001aaa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000bc6:	e01a      	b.n	8000bfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_TIM_Base_MspInit+0x88>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d115      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201a      	movs	r0, #26
 8000bf4:	f000 ff3d 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000bf8:	201a      	movs	r0, #26
 8000bfa:	f000 ff56 	bl	8001aaa <HAL_NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40014400 	.word	0x40014400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40014800 	.word	0x40014800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f8c3 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <ADC_IRQHandler+0x10>)
 8000c7a:	f000 f942 	bl	8000f02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000124 	.word	0x20000124

08000c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c8e:	f003 fb83 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001cc 	.word	0x200001cc

08000c9c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ca2:	f003 fb79 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000214 	.word	0x20000214

08000cb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <DMA2_Stream0_IRQHandler+0x10>)
 8000cb6:	f001 f819 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000016c 	.word	0x2000016c

08000cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <OTG_FS_IRQHandler+0x10>)
 8000cca:	f001 fd74 	bl	80027b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000c64 	.word	0x20000c64

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f007 fda9 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fc5d 	bl	80005ec <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000d40:	08008950 	.word	0x08008950
  ldr r2, =_sbss
 8000d44:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000d48:	20001368 	.word	0x20001368

08000d4c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <DMA1_Stream0_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 fe6f 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe5a 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fe87 	bl	8001ac6 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 fe4f 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000004 	.word	0x20000004
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000000c 	.word	0x2000000c
 8000e18:	2000037c 	.word	0x2000037c

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000037c 	.word	0x2000037c

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e033      	b.n	8000efa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fdf6 	bl	8000a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d118      	bne.n	8000eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ec2:	f023 0302 	bic.w	r3, r3, #2
 8000ec6:	f043 0202 	orr.w	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fb6c 	bl	80015ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eea:	e001      	b.n	8000ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d049      	beq.n	8000fcc <HAL_ADC_IRQHandler+0xca>
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d046      	beq.n	8000fcc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d12b      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d127      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d119      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0220 	bic.w	r2, r2, #32
 8000f96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fac5 	bl	800054c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f06f 0212 	mvn.w	r2, #18
 8000fca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d057      	beq.n	8001092 <HAL_ADC_IRQHandler+0x190>
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d054      	beq.n	8001092 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d139      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001014:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12b      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001034:	2b00      	cmp	r3, #0
 8001036:	d124      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d11d      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d119      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800105c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fc10 	bl	80018a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 020c 	mvn.w	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d017      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d014      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10d      	bne.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f929 	bl	8001320 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0201 	mvn.w	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d015      	beq.n	800111a <HAL_ADC_IRQHandler+0x218>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d012      	beq.n	800111a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	f043 0202 	orr.w	r2, r3, #2
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0220 	mvn.w	r2, #32
 8001108:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f912 	bl	8001334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f06f 0220 	mvn.w	r2, #32
 8001118:	601a      	str	r2, [r3, #0]
  }
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Start_DMA+0x22>
 8001142:	2302      	movs	r3, #2
 8001144:	e0d0      	b.n	80012e8 <HAL_ADC_Start_DMA+0x1c4>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d018      	beq.n	800118e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800116c:	4b60      	ldr	r3, [pc, #384]	@ (80012f0 <HAL_ADC_Start_DMA+0x1cc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a60      	ldr	r2, [pc, #384]	@ (80012f4 <HAL_ADC_Start_DMA+0x1d0>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9a      	lsrs	r2, r3, #18
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001180:	e002      	b.n	8001188 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3b01      	subs	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800119c:	d107      	bne.n	80011ae <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8088 	bne.w	80012ce <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f023 0206 	bic.w	r2, r3, #6
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	@ 0x44
 800120a:	e002      	b.n	8001212 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_ADC_Start_DMA+0x1d4>)
 800121c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001222:	4a36      	ldr	r2, [pc, #216]	@ (80012fc <HAL_ADC_Start_DMA+0x1d8>)
 8001224:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122a:	4a35      	ldr	r2, [pc, #212]	@ (8001300 <HAL_ADC_Start_DMA+0x1dc>)
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <HAL_ADC_Start_DMA+0x1e0>)
 8001234:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800123e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800124e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800125e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	334c      	adds	r3, #76	@ 0x4c
 800126a:	4619      	mov	r1, r3
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f000 fce4 	bl	8001c3c <HAL_DMA_Start_IT>
 8001274:	4603      	mov	r3, r0
 8001276:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10f      	bne.n	80012a4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d129      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	e020      	b.n	80012e6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_ADC_Start_DMA+0x1e4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11b      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x1c2>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d114      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	e00b      	b.n	80012e6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000004 	.word	0x20000004
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	40012300 	.word	0x40012300
 80012fc:	080017a5 	.word	0x080017a5
 8001300:	0800185f 	.word	0x0800185f
 8001304:	0800187b 	.word	0x0800187b
 8001308:	40012000 	.word	0x40012000

0800130c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e113      	b.n	800158c <HAL_ADC_ConfigChannel+0x244>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	@ 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	@ 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	@ 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	@ 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <HAL_ADC_ConfigChannel+0x250>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a28      	ldr	r2, [pc, #160]	@ (800159c <HAL_ADC_ConfigChannel+0x254>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d10f      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_ADC_ConfigChannel+0x254>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d003      	beq.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b11      	cmp	r3, #17
 800153a:	d122      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d111      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a11      	ldr	r2, [pc, #68]	@ (80015a8 <HAL_ADC_ConfigChannel+0x260>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9a      	lsrs	r2, r3, #18
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40012300 	.word	0x40012300
 800159c:	40012000 	.word	0x40012000
 80015a0:	10000012 	.word	0x10000012
 80015a4:	20000004 	.word	0x20000004
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	@ (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d13c      	bne.n	8001838 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d12b      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d127      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d119      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0220 	bic.w	r2, r2, #32
 800180a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7fe fe8b 	bl	800054c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001836:	e00e      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff fd75 	bl	8001334 <HAL_ADC_ErrorCallback>
}
 800184a:	e004      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fd4d 	bl	800130c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001886:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f043 0204 	orr.w	r2, r3, #4
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fd4a 	bl	8001334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	@ (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	@ (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff f996 	bl	8000e1c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e099      	b.n	8001c30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1c:	e00f      	b.n	8001b3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1e:	f7ff f97d 	bl	8000e1c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d908      	bls.n	8001b3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e078      	b.n	8001c30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <HAL_DMA_Init+0x158>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f023 0307 	bic.w	r3, r3, #7
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d117      	bne.n	8001c02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fa6f 	bl	80020c8 <DMA_CheckFifoParam>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e016      	b.n	8001c30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa26 	bl	800205c <DMA_CalcBaseAndBitshift>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c18:	223f      	movs	r2, #63	@ 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	f010803f 	.word	0xf010803f

08001c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_Start_IT+0x26>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e040      	b.n	8001ce4 <HAL_DMA_Start_IT+0xa8>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d12f      	bne.n	8001cd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f9b8 	bl	8002000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c94:	223f      	movs	r2, #63	@ 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0216 	orr.w	r2, r2, #22
 8001caa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0208 	orr.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e005      	b.n	8001ce2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8001f34 <HAL_DMA_IRQHandler+0x248>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8001f38 <HAL_DMA_IRQHandler+0x24c>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	2208      	movs	r2, #8
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	2208      	movs	r2, #8
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	2204      	movs	r2, #4
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	2210      	movs	r2, #16
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d043      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de6:	2210      	movs	r2, #16
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
 8001e1a:	e01f      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	2220      	movs	r2, #32
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 808f 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8087 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	2220      	movs	r2, #32
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d136      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0216 	bic.w	r2, r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x1da>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	223f      	movs	r2, #63	@ 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07e      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
        }
        return;
 8001f02:	e079      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01d      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e02c      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
 8001f32:	bf00      	nop
 8001f34:	20000004 	.word	0x20000004
 8001f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e01e      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10f      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0210 	bic.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d032      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d307      	bcc.n	8001fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f2      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x2cc>
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ff8:	bf00      	nop
    }
  }
}
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800201c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b40      	cmp	r3, #64	@ 0x40
 800202c:	d108      	bne.n	8002040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203e:	e007      	b.n	8002050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b10      	subs	r3, #16
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <DMA_CalcBaseAndBitshift+0x64>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d909      	bls.n	800209e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	@ 0x58
 800209c:	e007      	b.n	80020ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	aaaaaaab 	.word	0xaaaaaaab
 80020c4:	08008938 	.word	0x08008938

080020c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11f      	bne.n	8002122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d856      	bhi.n	8002196 <DMA_CheckFifoParam+0xce>
 80020e8:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <DMA_CheckFifoParam+0x28>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002113 	.word	0x08002113
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002197 	.word	0x08002197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d046      	beq.n	800219a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002110:	e043      	b.n	800219a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800211a:	d140      	bne.n	800219e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e03d      	b.n	800219e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800212a:	d121      	bne.n	8002170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d837      	bhi.n	80021a2 <DMA_CheckFifoParam+0xda>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <DMA_CheckFifoParam+0x70>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	0800214f 	.word	0x0800214f
 8002140:	08002149 	.word	0x08002149
 8002144:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e030      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d025      	beq.n	80021a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215e:	e022      	b.n	80021a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002168:	d11f      	bne.n	80021aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216e:	e01c      	b.n	80021aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d903      	bls.n	800217e <DMA_CheckFifoParam+0xb6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800217c:	e018      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      break;
 8002182:	e015      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e00b      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 8002196:	bf00      	nop
 8002198:	e00a      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e008      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e006      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e004      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e002      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021aa:	bf00      	nop
 80021ac:	e000      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
    }
  } 
  
  return status; 
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e159      	b.n	8002490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8148 	bne.w	800248a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a2 	beq.w	800248a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b57      	ldr	r3, [pc, #348]	@ (80024a8 <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	4a56      	ldr	r2, [pc, #344]	@ (80024a8 <HAL_GPIO_Init+0x2e8>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002354:	6453      	str	r3, [r2, #68]	@ 0x44
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <HAL_GPIO_Init+0x2e8>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a52      	ldr	r2, [pc, #328]	@ (80024ac <HAL_GPIO_Init+0x2ec>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a49      	ldr	r2, [pc, #292]	@ (80024b0 <HAL_GPIO_Init+0x2f0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x202>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a48      	ldr	r2, [pc, #288]	@ (80024b4 <HAL_GPIO_Init+0x2f4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x1fe>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a47      	ldr	r2, [pc, #284]	@ (80024b8 <HAL_GPIO_Init+0x2f8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x1fa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a46      	ldr	r2, [pc, #280]	@ (80024bc <HAL_GPIO_Init+0x2fc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x1f6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a45      	ldr	r2, [pc, #276]	@ (80024c0 <HAL_GPIO_Init+0x300>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x1f2>
 80023ae:	2304      	movs	r3, #4
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	@ (80024ac <HAL_GPIO_Init+0x2ec>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a24      	ldr	r2, [pc, #144]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245a:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002460:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002484:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f aea2 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	@ 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	041a      	lsls	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43d9      	mvns	r1, r3
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	400b      	ands	r3, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af02      	add	r7, sp, #8
 8002534:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e101      	b.n	8002744 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f005 fe7e 	bl	800825c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800256e:	d102      	bne.n	8002576 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f002 f9d5 	bl	800492a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7c1a      	ldrb	r2, [r3, #16]
 8002588:	f88d 2000 	strb.w	r2, [sp]
 800258c:	3304      	adds	r3, #4
 800258e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002590:	f002 f8b4 	bl	80046fc <USB_CoreInit>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0ce      	b.n	8002744 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 f9cd 	bl	800494c <USB_SetCurrentMode>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0bf      	b.n	8002744 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e04a      	b.n	8002660 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3315      	adds	r3, #21
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3314      	adds	r3, #20
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	b298      	uxth	r0, r3
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	332e      	adds	r3, #46	@ 0x2e
 8002606:	4602      	mov	r2, r0
 8002608:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3318      	adds	r3, #24
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	331c      	adds	r3, #28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3320      	adds	r3, #32
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3324      	adds	r3, #36	@ 0x24
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3af      	bcc.n	80025ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3b5      	bcc.n	8002670 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7c1a      	ldrb	r2, [r3, #16]
 800270c:	f88d 2000 	strb.w	r2, [sp]
 8002710:	3304      	adds	r3, #4
 8002712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002714:	f002 f966 	bl	80049e4 <USB_DevInit>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00c      	b.n	8002744 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 f9b0 	bl	8005aa2 <USB_DevDisconnect>

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_PCD_Start+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e022      	b.n	80027ae <HAL_PCD_Start+0x62>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f002 f8b7 	bl	8004908 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 f95e 	bl	8005a60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b6:	b590      	push	{r4, r7, lr}
 80027b8:	b08d      	sub	sp, #52	@ 0x34
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fa1c 	bl	8005c0a <USB_GetMode>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 848c 	bne.w	80030f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f980 	bl	8005ae4 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8482 	beq.w	80030f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f96d 	bl	8005ae4 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d107      	bne.n	8002824 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f002 0202 	and.w	r2, r2, #2
 8002822:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 f95b 	bl	8005ae4 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d161      	bne.n	80028fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0210 	bic.w	r2, r2, #16
 8002846:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800286e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002872:	d124      	bne.n	80028be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d035      	beq.n	80028ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800288a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6a38      	ldr	r0, [r7, #32]
 8002894:	f002 ff92 	bl	80057bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a4:	441a      	add	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b6:	441a      	add	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	615a      	str	r2, [r3, #20]
 80028bc:	e016      	b.n	80028ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028c8:	d110      	bne.n	80028ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028d0:	2208      	movs	r2, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	6a38      	ldr	r0, [r7, #32]
 80028d6:	f002 ff71 	bl	80057bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e6:	441a      	add	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0210 	orr.w	r2, r2, #16
 80028fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 f8ef 	bl	8005ae4 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002910:	f040 80a7 	bne.w	8002a62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f003 f8f4 	bl	8005b0a <USB_ReadDevAllOutEpInterrupt>
 8002922:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002924:	e099      	b.n	8002a5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 808e 	beq.w	8002a4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f003 f918 	bl	8005b72 <USB_ReadDevOutEPInterrupt>
 8002942:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fea4 	bl	80036b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800297e:	461a      	mov	r2, r3
 8002980:	2308      	movs	r3, #8
 8002982:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 ff7a 	bl	8003880 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a2:	461a      	mov	r2, r3
 80029a4:	2310      	movs	r3, #16
 80029a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d030      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ba:	2b80      	cmp	r3, #128	@ 0x80
 80029bc:	d109      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	78db      	ldrb	r3, [r3, #3]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d108      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f005 fd29 	bl	8008454 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2302      	movs	r3, #2
 8002a12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f af62 	bne.w	8002926 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 f83c 	bl	8005ae4 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a76:	f040 80db 	bne.w	8002c30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f85d 	bl	8005b3e <USB_ReadDevAllInEpInterrupt>
 8002a84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a8a:	e0cd      	b.n	8002c28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80c2 	beq.w	8002c1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 f883 	bl	8005bae <USB_ReadDevInEPInterrupt>
 8002aa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d057      	beq.n	8002b64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69f9      	ldr	r1, [r7, #28]
 8002ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	799b      	ldrb	r3, [r3, #6]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d132      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3320      	adds	r3, #32
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4403      	add	r3, r0
 8002b12:	331c      	adds	r3, #28
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4419      	add	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4403      	add	r3, r0
 8002b26:	3320      	adds	r3, #32
 8002b28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x3a2>
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3324      	adds	r3, #36	@ 0x24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b50:	461a      	mov	r2, r3
 8002b52:	2101      	movs	r1, #1
 8002b54:	f003 f88a 	bl	8005c6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f005 fbfd 	bl	800835e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b96:	461a      	mov	r2, r3
 8002b98:	2310      	movs	r3, #16
 8002b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2340      	movs	r3, #64	@ 0x40
 8002bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d023      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bc4:	6a38      	ldr	r0, [r7, #32]
 8002bc6:	f002 f871 	bl	8004cac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	78db      	ldrb	r3, [r3, #3]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2200      	movs	r2, #0
 8002bea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f005 fc40 	bl	8008478 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c04:	461a      	mov	r2, r3
 8002c06:	2302      	movs	r3, #2
 8002c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fcbd 	bl	8003596 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	3301      	adds	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f47f af2e 	bne.w	8002a8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 ff55 	bl	8005ae4 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c44:	d122      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fea4 	bl	80039bc <HAL_PCDEx_LPM_Callback>
 8002c74:	e002      	b.n	8002c7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f005 fbde 	bl	8008438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 ff27 	bl	8005ae4 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca0:	d112      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f005 fb9a 	bl	80083ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002cc6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 ff09 	bl	8005ae4 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	f040 80b7 	bne.w	8002e4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 ffd6 	bl	8004cac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d04:	e046      	b.n	8002d94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d12:	461a      	mov	r2, r3
 8002d14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2a:	0151      	lsls	r1, r2, #5
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	440a      	add	r2, r1
 8002d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d90:	3301      	adds	r3, #1
 8002d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	791b      	ldrb	r3, [r3, #4]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d3b2      	bcc.n	8002d06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002db2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7bdb      	ldrb	r3, [r3, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dcc:	f043 030b 	orr.w	r3, r3, #11
 8002dd0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de2:	f043 030b 	orr.w	r3, r3, #11
 8002de6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de8:	e015      	b.n	8002e16 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dfc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e10:	f043 030b 	orr.w	r3, r3, #11
 8002e14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f002 ff17 	bl	8005c6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fe46 	bl	8005ae4 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e62:	d123      	bne.n	8002eac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fedc 	bl	8005c26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 ff93 	bl	8004d9e <USB_GetDevSpeed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681c      	ldr	r4, [r3, #0]
 8002e84:	f001 f9ca 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8002e88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f001 fc97 	bl	80047c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f005 fa89 	bl	80083ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 fe17 	bl	8005ae4 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f005 fa66 	bl	8008392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 0208 	and.w	r2, r2, #8
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fe02 	bl	8005ae4 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d123      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	e014      	b.n	8002f26 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fb0a 	bl	8003534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	3301      	adds	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	791b      	ldrb	r3, [r3, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d3e4      	bcc.n	8002efc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fdd4 	bl	8005ae4 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f46:	d13c      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	e02b      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d115      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da12      	bge.n	8002fa0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3317      	adds	r3, #23
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 faca 	bl	8003534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d3cd      	bcc.n	8002f4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 fd8c 	bl	8005ae4 <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd6:	d156      	bne.n	8003086 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd8:	2301      	movs	r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fdc:	e045      	b.n	800306a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12e      	bne.n	8003064 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003006:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	da2b      	bge.n	8003064 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	0c1a      	lsrs	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003016:	4053      	eors	r3, r2
 8003018:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800301c:	2b00      	cmp	r3, #0
 800301e:	d121      	bne.n	8003064 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003060:	6053      	str	r3, [r2, #4]
            break;
 8003062:	e008      	b.n	8003076 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	3301      	adds	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	791b      	ldrb	r3, [r3, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	4293      	cmp	r3, r2
 8003074:	d3b3      	bcc.n	8002fde <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f002 fd2a 	bl	8005ae4 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309a:	d10a      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f005 f9fd 	bl	800849c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fd14 	bl	8005ae4 <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d115      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f005 f9ed 	bl	80084b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e000      	b.n	80030f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80030f0:	bf00      	nop
    }
  }
}
 80030f2:	3734      	adds	r7, #52	@ 0x34
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_SetAddress+0x1a>
 800310e:	2302      	movs	r3, #2
 8003110:	e012      	b.n	8003138 <HAL_PCD_SetAddress+0x40>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fc73 	bl	8005a14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	70fb      	strb	r3, [r7, #3]
 8003152:	460b      	mov	r3, r1
 8003154:	803b      	strh	r3, [r7, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da0f      	bge.n	8003186 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	3310      	adds	r3, #16
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	3304      	adds	r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	705a      	strb	r2, [r3, #1]
 8003184:	e00f      	b.n	80031a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031b2:	883b      	ldrh	r3, [r7, #0]
 80031b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	78ba      	ldrb	r2, [r7, #2]
 80031c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031d4:	78bb      	ldrb	r3, [r7, #2]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d102      	bne.n	80031e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_PCD_EP_Open+0xae>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e00e      	b.n	800320c <HAL_PCD_EP_Open+0xcc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fdf3 	bl	8004de8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800320a:	7afb      	ldrb	r3, [r7, #11]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0f      	bge.n	8003248 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3310      	adds	r3, #16
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
 8003246:	e00f      	b.n	8003268 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_PCD_EP_Close+0x6e>
 800327e:	2302      	movs	r3, #2
 8003280:	e00e      	b.n	80032a0 <HAL_PCD_EP_Close+0x8c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	4618      	mov	r0, r3
 8003292:	f001 fe31 	bl	8004ef8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	460b      	mov	r3, r1
 80032b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	799b      	ldrb	r3, [r3, #6]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	799b      	ldrb	r3, [r3, #6]
 800330c:	461a      	mov	r2, r3
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	f001 fece 	bl	80050b0 <USB_EPStartXfer>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 020f 	and.w	r2, r3, #15
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003340:	681b      	ldr	r3, [r3, #0]
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	460b      	mov	r3, r1
 800335c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3310      	adds	r3, #16
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2201      	movs	r2, #1
 800338c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	b2da      	uxtb	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	799b      	ldrb	r3, [r3, #6]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	799b      	ldrb	r3, [r3, #6]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	f001 fe7c 	bl	80050b0 <USB_EPStartXfer>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	7912      	ldrb	r2, [r2, #4]
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e04f      	b.n	8003480 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da0f      	bge.n	8003408 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 020f 	and.w	r2, r3, #15
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	3310      	adds	r3, #16
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	705a      	strb	r2, [r3, #1]
 8003406:	e00d      	b.n	8003424 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_SetStall+0x82>
 8003440:	2302      	movs	r3, #2
 8003442:	e01d      	b.n	8003480 <HAL_PCD_EP_SetStall+0xbe>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fa0a 	bl	800586c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7999      	ldrb	r1, [r3, #6]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003470:	461a      	mov	r2, r3
 8003472:	f002 fbfb 	bl	8005c6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	7912      	ldrb	r2, [r2, #4]
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e042      	b.n	800352c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da0f      	bge.n	80034ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3310      	adds	r3, #16
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	3304      	adds	r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
 80034cc:	e00f      	b.n	80034ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_PCD_EP_ClrStall+0x86>
 800350a:	2302      	movs	r3, #2
 800350c:	e00e      	b.n	800352c <HAL_PCD_EP_ClrStall+0xa4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f002 fa13 	bl	8005948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	da0c      	bge.n	8003562 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3310      	adds	r3, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e00c      	b.n	800357c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 f832 	bl	80055ec <USB_EPStopXfer>
 8003588:	4603      	mov	r3, r0
 800358a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800358c:	7afb      	ldrb	r3, [r7, #11]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b08a      	sub	sp, #40	@ 0x28
 800359a:	af02      	add	r7, sp, #8
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	3310      	adds	r3, #16
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d901      	bls.n	80035ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06b      	b.n	80036a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d902      	bls.n	80035ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3303      	adds	r3, #3
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f2:	e02a      	b.n	800364a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	429a      	cmp	r2, r3
 8003608:	d902      	bls.n	8003610 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3303      	adds	r3, #3
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68d9      	ldr	r1, [r3, #12]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4603      	mov	r3, r0
 800362c:	6978      	ldr	r0, [r7, #20]
 800362e:	f002 f887 	bl	8005740 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d809      	bhi.n	8003674 <PCD_WriteEmptyTxFifo+0xde>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003668:	429a      	cmp	r2, r3
 800366a:	d203      	bcs.n	8003674 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1bf      	bne.n	80035f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	d811      	bhi.n	80036a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	43db      	mvns	r3, r3
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036a0:	4013      	ands	r3, r2
 80036a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	333c      	adds	r3, #60	@ 0x3c
 80036c8:	3304      	adds	r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	799b      	ldrb	r3, [r3, #6]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d17b      	bne.n	80037de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	4a61      	ldr	r2, [pc, #388]	@ (8003878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	f240 80b9 	bls.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80b3 	beq.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003718:	6093      	str	r3, [r2, #8]
 800371a:	e0a7      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003732:	461a      	mov	r2, r3
 8003734:	2320      	movs	r3, #32
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e098      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 8093 	bne.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4a4b      	ldr	r2, [pc, #300]	@ (8003878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d90f      	bls.n	800376e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	e07e      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	440b      	add	r3, r1
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d114      	bne.n	80037d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b8:	461a      	mov	r2, r3
 80037ba:	2101      	movs	r1, #1
 80037bc:	f002 fa56 	bl	8005c6c <USB_EP0_OutStart>
 80037c0:	e006      	b.n	80037d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f004 fda6 	bl	8008328 <HAL_PCD_DataOutStageCallback>
 80037dc:	e046      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4a26      	ldr	r2, [pc, #152]	@ (800387c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d124      	bne.n	8003830 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003802:	6093      	str	r3, [r2, #8]
 8003804:	e032      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	2320      	movs	r3, #32
 8003820:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f004 fd7d 	bl	8008328 <HAL_PCD_DataOutStageCallback>
 800382e:	e01d      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d114      	bne.n	8003860 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003858:	461a      	mov	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	f002 fa06 	bl	8005c6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f004 fd5e 	bl	8008328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	4f54300a 	.word	0x4f54300a
 800387c:	4f54310a 	.word	0x4f54310a

08003880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	333c      	adds	r3, #60	@ 0x3c
 8003898:	3304      	adds	r3, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <PCD_EP_OutSetupPacket_int+0x88>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d90e      	bls.n	80038d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f004 fd15 	bl	8008304 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <PCD_EP_OutSetupPacket_int+0x88>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d90c      	bls.n	80038fc <PCD_EP_OutSetupPacket_int+0x7c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	799b      	ldrb	r3, [r3, #6]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d108      	bne.n	80038fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038f4:	461a      	mov	r2, r3
 80038f6:	2101      	movs	r1, #1
 80038f8:	f002 f9b8 	bl	8005c6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	4f54300a 	.word	0x4f54300a

0800390c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	4613      	mov	r3, r2
 800391a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800392a:	883b      	ldrh	r3, [r7, #0]
 800392c:	0419      	lsls	r1, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	430a      	orrs	r2, r1
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
 8003938:	e028      	b.n	800398c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4413      	add	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e00d      	b.n	800396a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	3340      	adds	r3, #64	@ 0x40
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	3301      	adds	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	3b01      	subs	r3, #1
 8003970:	429a      	cmp	r2, r3
 8003972:	d3ec      	bcc.n	800394e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003974:	883b      	ldrh	r3, [r7, #0]
 8003976:	0418      	lsls	r0, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	3b01      	subs	r3, #1
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4302      	orrs	r2, r0
 8003984:	3340      	adds	r3, #64	@ 0x40
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e267      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039f2:	4b88      	ldr	r3, [pc, #544]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fe:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0a:	4b82      	ldr	r3, [pc, #520]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b7e      	ldr	r3, [pc, #504]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05b      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d157      	bne.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e242      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x74>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x98>
 8003a52:	4b70      	ldr	r3, [pc, #448]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6f      	ldr	r2, [pc, #444]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6c      	ldr	r2, [pc, #432]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	4b69      	ldr	r3, [pc, #420]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b66      	ldr	r3, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd f9c6 	bl	8000e1c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fd f9c2 	bl	8000e1c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	@ 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e207      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd f9b2 	bl	8000e1c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fd f9ae 	bl	8000e1c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1f3      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b51      	ldr	r3, [pc, #324]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aea:	4b4a      	ldr	r3, [pc, #296]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b44      	ldr	r3, [pc, #272]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1c7      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4937      	ldr	r1, [pc, #220]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b34      	ldr	r3, [pc, #208]	@ (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd f967 	bl	8000e1c <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fd f963 	bl	8000e1c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1a8      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b28      	ldr	r3, [pc, #160]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4925      	ldr	r1, [pc, #148]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd f946 	bl	8000e1c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd f942 	bl	8000e1c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e187      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd f926 	bl	8000e1c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd f922 	bl	8000e1c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e167      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x200>
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd f90f 	bl	8000e1c <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00e      	b.n	8003c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fd f90b 	bl	8000e1c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d907      	bls.n	8003c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e150      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b88      	ldr	r3, [pc, #544]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ea      	bne.n	8003c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8097 	beq.w	8003d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b81      	ldr	r3, [pc, #516]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	4a7c      	ldr	r2, [pc, #496]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b77      	ldr	r3, [pc, #476]	@ (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d118      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c76:	4b74      	ldr	r3, [pc, #464]	@ (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a73      	ldr	r2, [pc, #460]	@ (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7fd f8cb 	bl	8000e1c <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd f8c7 	bl	8000e1c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e10c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
 8003cb0:	4b64      	ldr	r3, [pc, #400]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a63      	ldr	r2, [pc, #396]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x30c>
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	4a5e      	ldr	r2, [pc, #376]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003ce0:	4b58      	ldr	r3, [pc, #352]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	4a57      	ldr	r2, [pc, #348]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cec:	4b55      	ldr	r3, [pc, #340]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd f88c 	bl	8000e1c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd f888 	bl	8000e1c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0cb      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b49      	ldr	r3, [pc, #292]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCC_OscConfig+0x334>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f876 	bl	8000e1c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd f872 	bl	8000e1c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0b5      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	4a38      	ldr	r2, [pc, #224]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a1 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d72:	4b34      	ldr	r3, [pc, #208]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d05c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d141      	bne.n	8003e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b31      	ldr	r3, [pc, #196]	@ (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f846 	bl	8000e1c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd f842 	bl	8000e1c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e087      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	491b      	ldr	r1, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fd f81b 	bl	8000e1c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd f817 	bl	8000e1c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e05c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x416>
 8003e08:	e054      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd f804 	bl	8000e1c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd f800 	bl	8000e1c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e045      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x444>
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e038      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCC_OscConfig+0x4ec>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d028      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d121      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fc ff32 	bl	8000e1c <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fc ff2e 	bl	8000e1c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fe92 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	08008928 	.word	0x08008928
 8004088:	20000004 	.word	0x20000004
 800408c:	20000008 	.word	0x20000008

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b090      	sub	sp, #64	@ 0x40
 8004096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d00d      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x40>
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f200 80a1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x16c>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x34>
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x3a>
 80040c2:	e09b      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b53      	ldr	r3, [pc, #332]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x184>)
 80040c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040c8:	e09b      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ca:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 80040cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ce:	e098      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	4b4d      	ldr	r3, [pc, #308]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040f8:	2100      	movs	r1, #0
 80040fa:	4b47      	ldr	r3, [pc, #284]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 80040fc:	fb03 f201 	mul.w	r2, r3, r1
 8004100:	2300      	movs	r3, #0
 8004102:	fb00 f303 	mul.w	r3, r0, r3
 8004106:	4413      	add	r3, r2
 8004108:	4a43      	ldr	r2, [pc, #268]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 800410a:	fba0 1202 	umull	r1, r2, r0, r2
 800410e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004110:	460a      	mov	r2, r1
 8004112:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004116:	4413      	add	r3, r2
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411c:	2200      	movs	r2, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800412a:	f7fc f855 	bl	80001d8 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4613      	mov	r3, r2
 8004134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004136:	e053      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004138:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	2200      	movs	r2, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	617a      	str	r2, [r7, #20]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800414a:	f04f 0b00 	mov.w	fp, #0
 800414e:	4652      	mov	r2, sl
 8004150:	465b      	mov	r3, fp
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	0159      	lsls	r1, r3, #5
 800415c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004160:	0150      	lsls	r0, r2, #5
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	ebb2 080a 	subs.w	r8, r2, sl
 800416a:	eb63 090b 	sbc.w	r9, r3, fp
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800417a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800417e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004182:	ebb2 0408 	subs.w	r4, r2, r8
 8004186:	eb63 0509 	sbc.w	r5, r3, r9
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	00eb      	lsls	r3, r5, #3
 8004194:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004198:	00e2      	lsls	r2, r4, #3
 800419a:	4614      	mov	r4, r2
 800419c:	461d      	mov	r5, r3
 800419e:	eb14 030a 	adds.w	r3, r4, sl
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	eb45 030b 	adc.w	r3, r5, fp
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ca:	2200      	movs	r2, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	60fa      	str	r2, [r7, #12]
 80041d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d4:	f7fc f800 	bl	80001d8 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80041f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x184>)
 80041fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004204:	4618      	mov	r0, r3
 8004206:	3740      	adds	r7, #64	@ 0x40
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	017d7840 	.word	0x017d7840

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e041      	b.n	80042ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fc94 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f000 f9a8 	bl	80045c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e044      	b.n	8004376 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_TIM_Base_Start_IT+0xb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d018      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004316:	d013      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1a      	ldr	r2, [pc, #104]	@ (8004388 <HAL_TIM_Base_Start_IT+0xb4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_TIM_Base_Start_IT+0xb8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <HAL_TIM_Base_Start_IT+0xbc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <HAL_TIM_Base_Start_IT+0xc0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d010      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	e007      	b.n	8004374 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0202 	mvn.w	r2, #2
 80043cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8d2 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8c4 	bl	8004578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8d5 	bl	80045a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d020      	beq.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8ac 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f89e 	bl	8004578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8af 	bl	80045a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d020      	beq.n	8004494 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0208 	mvn.w	r2, #8
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2204      	movs	r2, #4
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f886 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f878 	bl	8004578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f889 	bl	80045a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0210 	mvn.w	r2, #16
 80044b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2208      	movs	r2, #8
 80044b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f860 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f852 	bl	8004578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f863 	bl	80045a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0201 	mvn.w	r2, #1
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc f800 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8e0 	bl	80046e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f834 	bl	80045b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0220 	mvn.w	r2, #32
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8b2 	bl	80046d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a37      	ldr	r2, [pc, #220]	@ (80046b8 <TIM_Base_SetConfig+0xf0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00f      	beq.n	8004600 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e6:	d00b      	beq.n	8004600 <TIM_Base_SetConfig+0x38>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a34      	ldr	r2, [pc, #208]	@ (80046bc <TIM_Base_SetConfig+0xf4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_Base_SetConfig+0x38>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a33      	ldr	r2, [pc, #204]	@ (80046c0 <TIM_Base_SetConfig+0xf8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_Base_SetConfig+0x38>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a32      	ldr	r2, [pc, #200]	@ (80046c4 <TIM_Base_SetConfig+0xfc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d108      	bne.n	8004612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a28      	ldr	r2, [pc, #160]	@ (80046b8 <TIM_Base_SetConfig+0xf0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01b      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004620:	d017      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a25      	ldr	r2, [pc, #148]	@ (80046bc <TIM_Base_SetConfig+0xf4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a24      	ldr	r2, [pc, #144]	@ (80046c0 <TIM_Base_SetConfig+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00f      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a23      	ldr	r2, [pc, #140]	@ (80046c4 <TIM_Base_SetConfig+0xfc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00b      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a22      	ldr	r2, [pc, #136]	@ (80046c8 <TIM_Base_SetConfig+0x100>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a21      	ldr	r2, [pc, #132]	@ (80046cc <TIM_Base_SetConfig+0x104>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_Base_SetConfig+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a20      	ldr	r2, [pc, #128]	@ (80046d0 <TIM_Base_SetConfig+0x108>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d108      	bne.n	8004664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <TIM_Base_SetConfig+0xf0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d103      	bne.n	8004692 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800

080046d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046fc:	b084      	sub	sp, #16
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	f107 001c 	add.w	r0, r7, #28
 800470a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800470e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004712:	2b01      	cmp	r3, #1
 8004714:	d123      	bne.n	800475e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800472a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800473e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f001 fae8 	bl	8005d28 <USB_CoreReset>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e01b      	b.n	8004796 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 fadc 	bl	8005d28 <USB_CoreReset>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004774:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	@ 0x38
 8004788:	e005      	b.n	8004796 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004796:	7fbb      	ldrb	r3, [r7, #30]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10b      	bne.n	80047b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f043 0206 	orr.w	r2, r3, #6
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c0:	b004      	add	sp, #16
 80047c2:	4770      	bx	lr

080047c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d165      	bne.n	80048a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <USB_SetTurnaroundTime+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d906      	bls.n	80047ee <USB_SetTurnaroundTime+0x2a>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a40      	ldr	r2, [pc, #256]	@ (80048e4 <USB_SetTurnaroundTime+0x120>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d202      	bcs.n	80047ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047e8:	230f      	movs	r3, #15
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e062      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4a3c      	ldr	r2, [pc, #240]	@ (80048e4 <USB_SetTurnaroundTime+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d306      	bcc.n	8004804 <USB_SetTurnaroundTime+0x40>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a3b      	ldr	r2, [pc, #236]	@ (80048e8 <USB_SetTurnaroundTime+0x124>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d202      	bcs.n	8004804 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047fe:	230e      	movs	r3, #14
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e057      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4a38      	ldr	r2, [pc, #224]	@ (80048e8 <USB_SetTurnaroundTime+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d306      	bcc.n	800481a <USB_SetTurnaroundTime+0x56>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <USB_SetTurnaroundTime+0x128>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d202      	bcs.n	800481a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004814:	230d      	movs	r3, #13
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e04c      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <USB_SetTurnaroundTime+0x128>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d306      	bcc.n	8004830 <USB_SetTurnaroundTime+0x6c>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <USB_SetTurnaroundTime+0x12c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d802      	bhi.n	8004830 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800482a:	230c      	movs	r3, #12
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e041      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <USB_SetTurnaroundTime+0x12c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d906      	bls.n	8004846 <USB_SetTurnaroundTime+0x82>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <USB_SetTurnaroundTime+0x130>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d802      	bhi.n	8004846 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004840:	230b      	movs	r3, #11
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e036      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a2a      	ldr	r2, [pc, #168]	@ (80048f4 <USB_SetTurnaroundTime+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d906      	bls.n	800485c <USB_SetTurnaroundTime+0x98>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a29      	ldr	r2, [pc, #164]	@ (80048f8 <USB_SetTurnaroundTime+0x134>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d802      	bhi.n	800485c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004856:	230a      	movs	r3, #10
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e02b      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a26      	ldr	r2, [pc, #152]	@ (80048f8 <USB_SetTurnaroundTime+0x134>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d906      	bls.n	8004872 <USB_SetTurnaroundTime+0xae>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a25      	ldr	r2, [pc, #148]	@ (80048fc <USB_SetTurnaroundTime+0x138>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d202      	bcs.n	8004872 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800486c:	2309      	movs	r3, #9
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e020      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <USB_SetTurnaroundTime+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d306      	bcc.n	8004888 <USB_SetTurnaroundTime+0xc4>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a20      	ldr	r2, [pc, #128]	@ (8004900 <USB_SetTurnaroundTime+0x13c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d802      	bhi.n	8004888 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004882:	2308      	movs	r3, #8
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e015      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <USB_SetTurnaroundTime+0x13c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d906      	bls.n	800489e <USB_SetTurnaroundTime+0xda>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4a1c      	ldr	r2, [pc, #112]	@ (8004904 <USB_SetTurnaroundTime+0x140>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d202      	bcs.n	800489e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004898:	2307      	movs	r3, #7
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e00a      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800489e:	2306      	movs	r3, #6
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e007      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048aa:	2309      	movs	r3, #9
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e001      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048b0:	2309      	movs	r3, #9
 80048b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	00d8acbf 	.word	0x00d8acbf
 80048e4:	00e4e1c0 	.word	0x00e4e1c0
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	01067380 	.word	0x01067380
 80048f0:	011a499f 	.word	0x011a499f
 80048f4:	01312cff 	.word	0x01312cff
 80048f8:	014ca43f 	.word	0x014ca43f
 80048fc:	016e3600 	.word	0x016e3600
 8004900:	01a6ab1f 	.word	0x01a6ab1f
 8004904:	01e84800 	.word	0x01e84800

08004908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d115      	bne.n	800499a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800497a:	200a      	movs	r0, #10
 800497c:	f7fc fa5a 	bl	8000e34 <HAL_Delay>
      ms += 10U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	330a      	adds	r3, #10
 8004984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 f93f 	bl	8005c0a <USB_GetMode>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d01e      	beq.n	80049d0 <USB_SetCurrentMode+0x84>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2bc7      	cmp	r3, #199	@ 0xc7
 8004996:	d9f0      	bls.n	800497a <USB_SetCurrentMode+0x2e>
 8004998:	e01a      	b.n	80049d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fc fa41 	bl	8000e34 <HAL_Delay>
      ms += 10U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	330a      	adds	r3, #10
 80049b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 f926 	bl	8005c0a <USB_GetMode>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <USB_SetCurrentMode+0x84>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80049c8:	d9f0      	bls.n	80049ac <USB_SetCurrentMode+0x60>
 80049ca:	e001      	b.n	80049d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e005      	b.n	80049dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80049d4:	d101      	bne.n	80049da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e4:	b084      	sub	sp, #16
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e009      	b.n	8004a18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3340      	adds	r3, #64	@ 0x40
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3301      	adds	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b0e      	cmp	r3, #14
 8004a1c:	d9f2      	bls.n	8004a04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11c      	bne.n	8004a60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a5e:	e00b      	b.n	8004a78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d10d      	bne.n	8004aa8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a94:	2100      	movs	r1, #0
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f968 	bl	8004d6c <USB_SetDevSpeed>
 8004a9c:	e008      	b.n	8004ab0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f963 	bl	8004d6c <USB_SetDevSpeed>
 8004aa6:	e003      	b.n	8004ab0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aa8:	2103      	movs	r1, #3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f95e 	bl	8004d6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ab0:	2110      	movs	r1, #16
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8fa 	bl	8004cac <USB_FlushTxFifo>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f924 	bl	8004d10 <USB_FlushRxFifo>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e043      	b.n	8004b84 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b12:	d118      	bne.n	8004b46 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e013      	b.n	8004b58 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e008      	b.n	8004b58 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b52:	461a      	mov	r2, r3
 8004b54:	2300      	movs	r3, #0
 8004b56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b64:	461a      	mov	r2, r3
 8004b66:	2300      	movs	r3, #0
 8004b68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b76:	461a      	mov	r2, r3
 8004b78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b88:	461a      	mov	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d3b5      	bcc.n	8004afc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e043      	b.n	8004c1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bac:	d118      	bne.n	8004be0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e013      	b.n	8004bf2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e008      	b.n	8004bf2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c22:	461a      	mov	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d3b5      	bcc.n	8004b96 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <USB_DevInit+0x2c4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f043 0208 	orr.w	r2, r3, #8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca4:	b004      	add	sp, #16
 8004ca6:	4770      	bx	lr
 8004ca8:	803c3800 	.word	0x803c3800

08004cac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc6:	d901      	bls.n	8004ccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e01b      	b.n	8004d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	daf2      	bge.n	8004cba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf0:	d901      	bls.n	8004cf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e006      	b.n	8004d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d0f0      	beq.n	8004ce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d28:	d901      	bls.n	8004d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e018      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	daf2      	bge.n	8004d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d4c:	d901      	bls.n	8004d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e006      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d0f0      	beq.n	8004d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0306 	and.w	r3, r3, #6
 8004db6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]
 8004dc2:	e00a      	b.n	8004dda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d002      	beq.n	8004dd0 <USB_GetDevSpeed+0x32>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d102      	bne.n	8004dd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	75fb      	strb	r3, [r7, #23]
 8004dd4:	e001      	b.n	8004dda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dd6:	230f      	movs	r3, #15
 8004dd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d13a      	bne.n	8004e7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d155      	bne.n	8004ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	059b      	lsls	r3, r3, #22
 8004e5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e60:	4313      	orrs	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e036      	b.n	8004ee8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11a      	bne.n	8004ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	791b      	ldrb	r3, [r3, #4]
 8004ecc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d161      	bne.n	8004fd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f2a:	d11f      	bne.n	8004f6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4b35      	ldr	r3, [pc, #212]	@ (80050a8 <USB_DeactivateEndpoint+0x1b0>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
 8004fd6:	e060      	b.n	800509a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fee:	d11f      	bne.n	8005030 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800500a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800500e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800502a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800502e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	43db      	mvns	r3, r3
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005050:	4013      	ands	r3, r2
 8005052:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	43db      	mvns	r3, r3
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005074:	4013      	ands	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0159      	lsls	r1, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	440b      	add	r3, r1
 800508e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005092:	4619      	mov	r1, r3
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <USB_DeactivateEndpoint+0x1b4>)
 8005096:	4013      	ands	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	ec337800 	.word	0xec337800
 80050ac:	eff37800 	.word	0xeff37800

080050b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	f040 817f 	bne.w	80053d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d132      	bne.n	8005140 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005118:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800511c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005138:	0cdb      	lsrs	r3, r3, #19
 800513a:	04db      	lsls	r3, r3, #19
 800513c:	6113      	str	r3, [r2, #16]
 800513e:	e097      	b.n	8005270 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	0151      	lsls	r1, r2, #5
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	440a      	add	r2, r1
 8005156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515a:	0cdb      	lsrs	r3, r3, #19
 800515c:	04db      	lsls	r3, r3, #19
 800515e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800517a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800517e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005182:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11a      	bne.n	80051c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e044      	b.n	800524a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	04d9      	lsls	r1, r3, #19
 80051e8:	4ba4      	ldr	r3, [pc, #656]	@ (800547c <USB_EPStartXfer+0x3cc>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d122      	bne.n	800524a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005222:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	8afb      	ldrh	r3, [r7, #22]
 8005234:	075b      	lsls	r3, r3, #29
 8005236:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800523a:	69b9      	ldr	r1, [r7, #24]
 800523c:	0148      	lsls	r0, r1, #5
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	4401      	add	r1, r0
 8005242:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d14b      	bne.n	800530e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d128      	bne.n	80052ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e00f      	b.n	80052ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005306:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e166      	b.n	80055dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005328:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800532c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	791b      	ldrb	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d015      	beq.n	8005362 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 814e 	beq.w	80055dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	69f9      	ldr	r1, [r7, #28]
 8005358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800535c:	4313      	orrs	r3, r2
 800535e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005360:	e13c      	b.n	80055dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d110      	bne.n	8005394 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e00f      	b.n	80053b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	b298      	uxth	r0, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4603      	mov	r3, r0
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f9b9 	bl	8005740 <USB_WritePacket>
 80053ce:	e105      	b.n	80055dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ea:	0cdb      	lsrs	r3, r3, #19
 80053ec:	04db      	lsls	r3, r3, #19
 80053ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800540a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800540e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005412:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d132      	bne.n	8005480 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	0148      	lsls	r0, r1, #5
 800544c:	69f9      	ldr	r1, [r7, #28]
 800544e:	4401      	add	r1, r0
 8005450:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005472:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005476:	6113      	str	r3, [r2, #16]
 8005478:	e062      	b.n	8005540 <USB_EPStartXfer+0x490>
 800547a:	bf00      	nop
 800547c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d123      	bne.n	80054d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	69b9      	ldr	r1, [r7, #24]
 80054a0:	0148      	lsls	r0, r1, #5
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	4401      	add	r1, r0
 80054a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054cc:	6113      	str	r3, [r2, #16]
 80054ce:	e037      	b.n	8005540 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	8afa      	ldrh	r2, [r7, #22]
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	04d9      	lsls	r1, r3, #19
 8005506:	4b38      	ldr	r3, [pc, #224]	@ (80055e8 <USB_EPStartXfer+0x538>)
 8005508:	400b      	ands	r3, r1
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	0148      	lsls	r0, r1, #5
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	4401      	add	r1, r0
 8005512:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005516:	4313      	orrs	r3, r2
 8005518:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	0148      	lsls	r0, r1, #5
 8005534:	69f9      	ldr	r1, [r7, #28]
 8005536:	4401      	add	r1, r0
 8005538:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800553c:	4313      	orrs	r3, r2
 800553e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d10d      	bne.n	8005562 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	68d9      	ldr	r1, [r3, #12]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555e:	460a      	mov	r2, r1
 8005560:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d128      	bne.n	80055bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d110      	bne.n	800559c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00f      	b.n	80055bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	1ff80000 	.word	0x1ff80000

080055ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d14a      	bne.n	80056a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005622:	f040 8086 	bne.w	8005732 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005644:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005648:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005668:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800566c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f242 7210 	movw	r2, #10000	@ 0x2710
 800567a:	4293      	cmp	r3, r2
 800567c:	d902      	bls.n	8005684 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
          break;
 8005682:	e056      	b.n	8005732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569c:	d0e7      	beq.n	800566e <USB_EPStopXfer+0x82>
 800569e:	e048      	b.n	8005732 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b8:	d13b      	bne.n	8005732 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800570e:	4293      	cmp	r3, r2
 8005710:	d902      	bls.n	8005718 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
          break;
 8005716:	e00c      	b.n	8005732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d0e7      	beq.n	8005702 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	460b      	mov	r3, r1
 8005750:	71fb      	strb	r3, [r7, #7]
 8005752:	4613      	mov	r3, r2
 8005754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800575e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d123      	bne.n	80057ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005766:	88bb      	ldrh	r3, [r7, #4]
 8005768:	3303      	adds	r3, #3
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e018      	b.n	80057a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	031a      	lsls	r2, r3, #12
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005780:	461a      	mov	r2, r3
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3301      	adds	r3, #1
 8005792:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3e2      	bcc.n	8005774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3724      	adds	r7, #36	@ 0x24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057bc:	b480      	push	{r7}
 80057be:	b08b      	sub	sp, #44	@ 0x2c
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	e014      	b.n	8005812 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	3301      	adds	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	3301      	adds	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	3301      	adds	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	3301      	adds	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	3301      	adds	r3, #1
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e6      	bcc.n	80057e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582a:	461a      	mov	r2, r3
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	701a      	strb	r2, [r3, #0]
      i++;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	3301      	adds	r3, #1
 800584a:	623b      	str	r3, [r7, #32]
      pDest++;
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	3301      	adds	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005852:	8bfb      	ldrh	r3, [r7, #30]
 8005854:	3b01      	subs	r3, #1
 8005856:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ea      	bne.n	8005834 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005860:	4618      	mov	r0, r3
 8005862:	372c      	adds	r7, #44	@ 0x2c
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d12c      	bne.n	80058e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	db12      	blt.n	80058c0 <USB_EPSetStall+0x54>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e02b      	b.n	800593a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db12      	blt.n	800591a <USB_EPSetStall+0xae>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00f      	beq.n	800591a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005914:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005918:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d128      	bne.n	80059b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005982:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d003      	beq.n	8005994 <USB_EPClearStall+0x4c>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	791b      	ldrb	r3, [r3, #4]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d138      	bne.n	8005a06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e027      	b.n	8005a06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d003      	beq.n	80059e6 <USB_EPClearStall+0x9e>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d10f      	bne.n	8005a06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a8e:	f023 0302 	bic.w	r3, r3, #2
 8005a92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005abc:	f023 0303 	bic.w	r3, r3, #3
 8005ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0c1b      	lsrs	r3, r3, #16
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	b29b      	uxth	r3, r3
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0301 	and.w	r3, r3, #1
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	460b      	mov	r3, r1
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	333c      	adds	r3, #60	@ 0x3c
 8005c82:	3304      	adds	r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4a26      	ldr	r2, [pc, #152]	@ (8005d24 <USB_EP0_OutStart+0xb8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d90a      	bls.n	8005ca6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ca0:	d101      	bne.n	8005ca6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e037      	b.n	8005d16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cac:	461a      	mov	r2, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd4:	f043 0318 	orr.w	r3, r3, #24
 8005cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005cec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10f      	bne.n	8005d14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	4f54300a 	.word	0x4f54300a

08005d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d40:	d901      	bls.n	8005d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e022      	b.n	8005d8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	daf2      	bge.n	8005d34 <USB_CoreReset+0xc>

  count = 10U;
 8005d4e:	230a      	movs	r3, #10
 8005d50:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005d52:	e002      	b.n	8005d5a <USB_CoreReset+0x32>
  {
    count--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f9      	bne.n	8005d54 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d78:	d901      	bls.n	8005d7e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e006      	b.n	8005d8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d0f0      	beq.n	8005d6c <USB_CoreReset+0x44>

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005da4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005da8:	f002 fd1e 	bl	80087e8 <USBD_static_malloc>
 8005dac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	32b0      	adds	r2, #176	@ 0xb0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e0d4      	b.n	8005f72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dc8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dcc:	2100      	movs	r1, #0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f002 fd4e 	bl	8008870 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	32b0      	adds	r2, #176	@ 0xb0
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	32b0      	adds	r2, #176	@ 0xb0
 8005dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7c1b      	ldrb	r3, [r3, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d138      	bne.n	8005e72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e00:	4b5e      	ldr	r3, [pc, #376]	@ (8005f7c <USBD_CDC_Init+0x1e4>)
 8005e02:	7819      	ldrb	r1, [r3, #0]
 8005e04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e08:	2202      	movs	r2, #2
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f002 fbc9 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e10:	4b5a      	ldr	r3, [pc, #360]	@ (8005f7c <USBD_CDC_Init+0x1e4>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3323      	adds	r3, #35	@ 0x23
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e2a:	4b55      	ldr	r3, [pc, #340]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e32:	2202      	movs	r2, #2
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f002 fbb4 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e3a:	4b51      	ldr	r3, [pc, #324]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005e52:	2201      	movs	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e56:	4b4b      	ldr	r3, [pc, #300]	@ (8005f84 <USBD_CDC_Init+0x1ec>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f003 020f 	and.w	r2, r3, #15
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	331c      	adds	r3, #28
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e035      	b.n	8005ede <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e72:	4b42      	ldr	r3, [pc, #264]	@ (8005f7c <USBD_CDC_Init+0x1e4>)
 8005e74:	7819      	ldrb	r1, [r3, #0]
 8005e76:	2340      	movs	r3, #64	@ 0x40
 8005e78:	2202      	movs	r2, #2
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f002 fb91 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e80:	4b3e      	ldr	r3, [pc, #248]	@ (8005f7c <USBD_CDC_Init+0x1e4>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	3323      	adds	r3, #35	@ 0x23
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e9a:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005e9c:	7819      	ldrb	r1, [r3, #0]
 8005e9e:	2340      	movs	r3, #64	@ 0x40
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f002 fb7d 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ea8:	4b35      	ldr	r3, [pc, #212]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8005f84 <USBD_CDC_Init+0x1ec>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 020f 	and.w	r2, r3, #15
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	331c      	adds	r3, #28
 8005eda:	2210      	movs	r2, #16
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ede:	4b29      	ldr	r3, [pc, #164]	@ (8005f84 <USBD_CDC_Init+0x1ec>)
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 fb5b 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005eec:	4b25      	ldr	r3, [pc, #148]	@ (8005f84 <USBD_CDC_Init+0x1ec>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3323      	adds	r3, #35	@ 0x23
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	33b0      	adds	r3, #176	@ 0xb0
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e018      	b.n	8005f72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7c1b      	ldrb	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f48:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005f4a:	7819      	ldrb	r1, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f002 fc12 	bl	8008780 <USBD_LL_PrepareReceive>
 8005f5c:	e008      	b.n	8005f70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f5e:	4b08      	ldr	r3, [pc, #32]	@ (8005f80 <USBD_CDC_Init+0x1e8>)
 8005f60:	7819      	ldrb	r1, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f68:	2340      	movs	r3, #64	@ 0x40
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 fc08 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000097 	.word	0x20000097
 8005f80:	20000098 	.word	0x20000098
 8005f84:	20000099 	.word	0x20000099

08005f88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f94:	4b3a      	ldr	r3, [pc, #232]	@ (8006080 <USBD_CDC_DeInit+0xf8>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 fb27 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fa0:	4b37      	ldr	r3, [pc, #220]	@ (8006080 <USBD_CDC_DeInit+0xf8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3323      	adds	r3, #35	@ 0x23
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fba:	4b32      	ldr	r3, [pc, #200]	@ (8006084 <USBD_CDC_DeInit+0xfc>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f002 fb14 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8006084 <USBD_CDC_DeInit+0xfc>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f003 020f 	and.w	r2, r3, #15
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fe2:	4b29      	ldr	r3, [pc, #164]	@ (8006088 <USBD_CDC_DeInit+0x100>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f002 fb00 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fee:	4b26      	ldr	r3, [pc, #152]	@ (8006088 <USBD_CDC_DeInit+0x100>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 020f 	and.w	r2, r3, #15
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	3323      	adds	r3, #35	@ 0x23
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006008:	4b1f      	ldr	r3, [pc, #124]	@ (8006088 <USBD_CDC_DeInit+0x100>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	331c      	adds	r3, #28
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	32b0      	adds	r2, #176	@ 0xb0
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01f      	beq.n	8006074 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	33b0      	adds	r3, #176	@ 0xb0
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	@ 0xb0
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	4618      	mov	r0, r3
 8006058:	f002 fbd4 	bl	8008804 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32b0      	adds	r2, #176	@ 0xb0
 8006066:	2100      	movs	r1, #0
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000097 	.word	0x20000097
 8006084:	20000098 	.word	0x20000098
 8006088:	20000099 	.word	0x20000099

0800608c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	32b0      	adds	r2, #176	@ 0xb0
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0bf      	b.n	800623c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d050      	beq.n	800616a <USBD_CDC_Setup+0xde>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	f040 80af 	bne.w	800622c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	88db      	ldrh	r3, [r3, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03a      	beq.n	800614c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da1b      	bge.n	8006118 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	33b0      	adds	r3, #176	@ 0xb0
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	88d2      	ldrh	r2, [r2, #6]
 80060fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	88db      	ldrh	r3, [r3, #6]
 8006102:	2b07      	cmp	r3, #7
 8006104:	bf28      	it	cs
 8006106:	2307      	movcs	r3, #7
 8006108:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	89fa      	ldrh	r2, [r7, #14]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fda9 	bl	8007c68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006116:	e090      	b.n	800623a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	785a      	ldrb	r2, [r3, #1]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	88db      	ldrh	r3, [r3, #6]
 8006126:	2b3f      	cmp	r3, #63	@ 0x3f
 8006128:	d803      	bhi.n	8006132 <USBD_CDC_Setup+0xa6>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	e000      	b.n	8006134 <USBD_CDC_Setup+0xa8>
 8006132:	2240      	movs	r2, #64	@ 0x40
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800613a:	6939      	ldr	r1, [r7, #16]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006142:	461a      	mov	r2, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fdbe 	bl	8007cc6 <USBD_CtlPrepareRx>
      break;
 800614a:	e076      	b.n	800623a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	33b0      	adds	r3, #176	@ 0xb0
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	7850      	ldrb	r0, [r2, #1]
 8006162:	2200      	movs	r2, #0
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4798      	blx	r3
      break;
 8006168:	e067      	b.n	800623a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b0b      	cmp	r3, #11
 8006170:	d851      	bhi.n	8006216 <USBD_CDC_Setup+0x18a>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <USBD_CDC_Setup+0xec>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061a9 	.word	0x080061a9
 800617c:	08006225 	.word	0x08006225
 8006180:	08006217 	.word	0x08006217
 8006184:	08006217 	.word	0x08006217
 8006188:	08006217 	.word	0x08006217
 800618c:	08006217 	.word	0x08006217
 8006190:	08006217 	.word	0x08006217
 8006194:	08006217 	.word	0x08006217
 8006198:	08006217 	.word	0x08006217
 800619c:	08006217 	.word	0x08006217
 80061a0:	080061d3 	.word	0x080061d3
 80061a4:	080061fd 	.word	0x080061fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d107      	bne.n	80061c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b4:	f107 030a 	add.w	r3, r7, #10
 80061b8:	2202      	movs	r2, #2
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fd53 	bl	8007c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c2:	e032      	b.n	800622a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fcd1 	bl	8007b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80061cc:	2303      	movs	r3, #3
 80061ce:	75fb      	strb	r3, [r7, #23]
          break;
 80061d0:	e02b      	b.n	800622a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061de:	f107 030d 	add.w	r3, r7, #13
 80061e2:	2201      	movs	r2, #1
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fd3e 	bl	8007c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ec:	e01d      	b.n	800622a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fcbc 	bl	8007b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e016      	b.n	800622a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b03      	cmp	r3, #3
 8006206:	d00f      	beq.n	8006228 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fcaf 	bl	8007b6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006214:	e008      	b.n	8006228 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fca8 	bl	8007b6e <USBD_CtlError>
          ret = USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	75fb      	strb	r3, [r7, #23]
          break;
 8006222:	e002      	b.n	800622a <USBD_CDC_Setup+0x19e>
          break;
 8006224:	bf00      	nop
 8006226:	e008      	b.n	800623a <USBD_CDC_Setup+0x1ae>
          break;
 8006228:	bf00      	nop
      }
      break;
 800622a:	e006      	b.n	800623a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 fc9d 	bl	8007b6e <USBD_CtlError>
      ret = USBD_FAIL;
 8006234:	2303      	movs	r3, #3
 8006236:	75fb      	strb	r3, [r7, #23]
      break;
 8006238:	bf00      	nop
  }

  return (uint8_t)ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32b0      	adds	r2, #176	@ 0xb0
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800626a:	2303      	movs	r3, #3
 800626c:	e065      	b.n	800633a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	32b0      	adds	r2, #176	@ 0xb0
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	3314      	adds	r3, #20
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02f      	beq.n	80062f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 020f 	and.w	r2, r3, #15
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	3314      	adds	r3, #20
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	f003 010f 	and.w	r1, r3, #15
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	460b      	mov	r3, r1
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4403      	add	r3, r0
 80062c0:	331c      	adds	r3, #28
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d112      	bne.n	80062f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	3314      	adds	r3, #20
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062ea:	78f9      	ldrb	r1, [r7, #3]
 80062ec:	2300      	movs	r3, #0
 80062ee:	2200      	movs	r2, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f002 fa24 	bl	800873e <USBD_LL_Transmit>
 80062f6:	e01f      	b.n	8006338 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	33b0      	adds	r3, #176	@ 0xb0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	33b0      	adds	r3, #176	@ 0xb0
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	32b0      	adds	r2, #176	@ 0xb0
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	32b0      	adds	r2, #176	@ 0xb0
 8006368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	e01a      	b.n	80063aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f002 fa22 	bl	80087c2 <USBD_LL_GetRxDataSize>
 800637e:	4602      	mov	r2, r0
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	33b0      	adds	r3, #176	@ 0xb0
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80063a4:	4611      	mov	r1, r2
 80063a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	32b0      	adds	r2, #176	@ 0xb0
 80063c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e024      	b.n	800641e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	33b0      	adds	r3, #176	@ 0xb0
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d019      	beq.n	800641c <USBD_CDC_EP0_RxReady+0x6a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063ee:	2bff      	cmp	r3, #255	@ 0xff
 80063f0:	d014      	beq.n	800641c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	33b0      	adds	r3, #176	@ 0xb0
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800640a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006412:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	22ff      	movs	r2, #255	@ 0xff
 8006418:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006430:	2182      	movs	r1, #130	@ 0x82
 8006432:	4818      	ldr	r0, [pc, #96]	@ (8006494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006434:	f000 fd62 	bl	8006efc <USBD_GetEpDesc>
 8006438:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800643a:	2101      	movs	r1, #1
 800643c:	4815      	ldr	r0, [pc, #84]	@ (8006494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800643e:	f000 fd5d 	bl	8006efc <USBD_GetEpDesc>
 8006442:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006444:	2181      	movs	r1, #129	@ 0x81
 8006446:	4813      	ldr	r0, [pc, #76]	@ (8006494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006448:	f000 fd58 	bl	8006efc <USBD_GetEpDesc>
 800644c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2210      	movs	r2, #16
 8006458:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2200      	movs	r2, #0
 8006464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006468:	711a      	strb	r2, [r3, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800647c:	711a      	strb	r2, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2243      	movs	r2, #67	@ 0x43
 8006486:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006488:	4b02      	ldr	r3, [pc, #8]	@ (8006494 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000054 	.word	0x20000054

08006498 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064a0:	2182      	movs	r1, #130	@ 0x82
 80064a2:	4818      	ldr	r0, [pc, #96]	@ (8006504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064a4:	f000 fd2a 	bl	8006efc <USBD_GetEpDesc>
 80064a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064aa:	2101      	movs	r1, #1
 80064ac:	4815      	ldr	r0, [pc, #84]	@ (8006504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ae:	f000 fd25 	bl	8006efc <USBD_GetEpDesc>
 80064b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b4:	2181      	movs	r1, #129	@ 0x81
 80064b6:	4813      	ldr	r0, [pc, #76]	@ (8006504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b8:	f000 fd20 	bl	8006efc <USBD_GetEpDesc>
 80064bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2210      	movs	r2, #16
 80064c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2200      	movs	r2, #0
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f042 0202 	orr.w	r2, r2, #2
 80064dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f042 0202 	orr.w	r2, r2, #2
 80064f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2243      	movs	r2, #67	@ 0x43
 80064f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f8:	4b02      	ldr	r3, [pc, #8]	@ (8006504 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000054 	.word	0x20000054

08006508 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006510:	2182      	movs	r1, #130	@ 0x82
 8006512:	4818      	ldr	r0, [pc, #96]	@ (8006574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006514:	f000 fcf2 	bl	8006efc <USBD_GetEpDesc>
 8006518:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800651a:	2101      	movs	r1, #1
 800651c:	4815      	ldr	r0, [pc, #84]	@ (8006574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800651e:	f000 fced 	bl	8006efc <USBD_GetEpDesc>
 8006522:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006524:	2181      	movs	r1, #129	@ 0x81
 8006526:	4813      	ldr	r0, [pc, #76]	@ (8006574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006528:	f000 fce8 	bl	8006efc <USBD_GetEpDesc>
 800652c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2210      	movs	r2, #16
 8006538:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2200      	movs	r2, #0
 8006544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006548:	711a      	strb	r2, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800655c:	711a      	strb	r2, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2243      	movs	r2, #67	@ 0x43
 8006566:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006568:	4b02      	ldr	r3, [pc, #8]	@ (8006574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000054 	.word	0x20000054

08006578 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	220a      	movs	r2, #10
 8006584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006586:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000010 	.word	0x20000010

08006598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e009      	b.n	80065c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	33b0      	adds	r3, #176	@ 0xb0
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	32b0      	adds	r2, #176	@ 0xb0
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e008      	b.n	8006604 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	32b0      	adds	r2, #176	@ 0xb0
 8006624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006628:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006630:	2303      	movs	r3, #3
 8006632:	e004      	b.n	800663e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32b0      	adds	r2, #176	@ 0xb0
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800666e:	2303      	movs	r3, #3
 8006670:	e025      	b.n	80066be <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11f      	bne.n	80066bc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2201      	movs	r2, #1
 8006680:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006684:	4b10      	ldr	r3, [pc, #64]	@ (80066c8 <USBD_CDC_TransmitPacket+0x7c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 020f 	and.w	r2, r3, #15
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4403      	add	r3, r0
 800669e:	3314      	adds	r3, #20
 80066a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066a2:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <USBD_CDC_TransmitPacket+0x7c>)
 80066a4:	7819      	ldrb	r1, [r3, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f002 f843 	bl	800873e <USBD_LL_Transmit>

    ret = USBD_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000097 	.word	0x20000097

080066cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	32b0      	adds	r2, #176	@ 0xb0
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32b0      	adds	r2, #176	@ 0xb0
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e018      	b.n	800672c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7c1b      	ldrb	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006702:	4b0c      	ldr	r3, [pc, #48]	@ (8006734 <USBD_CDC_ReceivePacket+0x68>)
 8006704:	7819      	ldrb	r1, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800670c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 f835 	bl	8008780 <USBD_LL_PrepareReceive>
 8006716:	e008      	b.n	800672a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006718:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <USBD_CDC_ReceivePacket+0x68>)
 800671a:	7819      	ldrb	r1, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006722:	2340      	movs	r3, #64	@ 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 f82b 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000098 	.word	0x20000098

08006738 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e01f      	b.n	8006790 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	79fa      	ldrb	r2, [r7, #7]
 8006782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f001 fea5 	bl	80084d4 <USBD_LL_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e025      	b.n	80067fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	@ 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	32ae      	adds	r2, #174	@ 0xae
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	f107 020e 	add.w	r2, r7, #14
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	4602      	mov	r2, r0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fead 	bl	800856c <USBD_LL_Start>
 8006812:	4603      	mov	r3, r0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	4611      	mov	r1, r2
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	4611      	mov	r1, r2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f922 	bl	8007afa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d01a      	beq.n	8006910 <USBD_LL_SetupStage+0x72>
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d822      	bhi.n	8006924 <USBD_LL_SetupStage+0x86>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <USBD_LL_SetupStage+0x4a>
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d00a      	beq.n	80068fc <USBD_LL_SetupStage+0x5e>
 80068e6:	e01d      	b.n	8006924 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb77 	bl	8006fe4 <USBD_StdDevReq>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	e020      	b.n	800693e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fbdf 	bl	80070c8 <USBD_StdItfReq>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e016      	b.n	800693e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fc41 	bl	80071a0 <USBD_StdEPReq>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
      break;
 8006922:	e00c      	b.n	800693e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800692a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800692e:	b2db      	uxtb	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fe7a 	bl	800862c <USBD_LL_StallEP>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]
      break;
 800693c:	bf00      	nop
  }

  return ret;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	460b      	mov	r3, r1
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d177      	bne.n	8006a50 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006966:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800696e:	2b03      	cmp	r3, #3
 8006970:	f040 80a1 	bne.w	8006ab6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	8992      	ldrh	r2, [r2, #12]
 800697c:	4293      	cmp	r3, r2
 800697e:	d91c      	bls.n	80069ba <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	8992      	ldrh	r2, [r2, #12]
 8006988:	1a9a      	subs	r2, r3, r2
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	8992      	ldrh	r2, [r2, #12]
 8006996:	441a      	add	r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6919      	ldr	r1, [r3, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	899b      	ldrh	r3, [r3, #12]
 80069a4:	461a      	mov	r2, r3
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4293      	cmp	r3, r2
 80069ac:	bf38      	it	cc
 80069ae:	4613      	movcc	r3, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 f9a8 	bl	8007d08 <USBD_CtlContinueRx>
 80069b8:	e07d      	b.n	8006ab6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d014      	beq.n	80069f2 <USBD_LL_DataOutStage+0xaa>
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d81d      	bhi.n	8006a08 <USBD_LL_DataOutStage+0xc0>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <USBD_LL_DataOutStage+0x8e>
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d003      	beq.n	80069dc <USBD_LL_DataOutStage+0x94>
 80069d4:	e018      	b.n	8006a08 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75bb      	strb	r3, [r7, #22]
            break;
 80069da:	e018      	b.n	8006a0e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa6e 	bl	8006ec8 <USBD_CoreFindIF>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75bb      	strb	r3, [r7, #22]
            break;
 80069f0:	e00d      	b.n	8006a0e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	4619      	mov	r1, r3
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fa70 	bl	8006ee2 <USBD_CoreFindEP>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75bb      	strb	r3, [r7, #22]
            break;
 8006a06:	e002      	b.n	8006a0e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	75bb      	strb	r3, [r7, #22]
            break;
 8006a0c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a0e:	7dbb      	ldrb	r3, [r7, #22]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d119      	bne.n	8006a48 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d113      	bne.n	8006a48 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a20:	7dba      	ldrb	r2, [r7, #22]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	32ae      	adds	r2, #174	@ 0xae
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006a30:	7dba      	ldrb	r2, [r7, #22]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a38:	7dba      	ldrb	r2, [r7, #22]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	32ae      	adds	r2, #174	@ 0xae
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f001 f96e 	bl	8007d2a <USBD_CtlSendStatus>
 8006a4e:	e032      	b.n	8006ab6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fa41 	bl	8006ee2 <USBD_CoreFindEP>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a64:	7dbb      	ldrb	r3, [r7, #22]
 8006a66:	2bff      	cmp	r3, #255	@ 0xff
 8006a68:	d025      	beq.n	8006ab6 <USBD_LL_DataOutStage+0x16e>
 8006a6a:	7dbb      	ldrb	r3, [r7, #22]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d122      	bne.n	8006ab6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d117      	bne.n	8006aac <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a7c:	7dba      	ldrb	r2, [r7, #22]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	32ae      	adds	r2, #174	@ 0xae
 8006a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006a8c:	7dba      	ldrb	r2, [r7, #22]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a94:	7dba      	ldrb	r2, [r7, #22]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	32ae      	adds	r2, #174	@ 0xae
 8006a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	7afa      	ldrb	r2, [r7, #11]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	4798      	blx	r3
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	e000      	b.n	8006ab8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d178      	bne.n	8006bc6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d163      	bne.n	8006bac <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	8992      	ldrh	r2, [r2, #12]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d91c      	bls.n	8006b2a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	8992      	ldrh	r2, [r2, #12]
 8006af8:	1a9a      	subs	r2, r3, r2
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	8992      	ldrh	r2, [r2, #12]
 8006b06:	441a      	add	r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6919      	ldr	r1, [r3, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	461a      	mov	r2, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 f8c4 	bl	8007ca4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2100      	movs	r1, #0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f001 fe2c 	bl	8008780 <USBD_LL_PrepareReceive>
 8006b28:	e040      	b.n	8006bac <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	899b      	ldrh	r3, [r3, #12]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d11c      	bne.n	8006b72 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d316      	bcc.n	8006b72 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d20f      	bcs.n	8006b72 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b52:	2200      	movs	r2, #0
 8006b54:	2100      	movs	r1, #0
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 f8a4 	bl	8007ca4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b64:	2300      	movs	r3, #0
 8006b66:	2200      	movs	r2, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 fe08 	bl	8008780 <USBD_LL_PrepareReceive>
 8006b70:	e01c      	b.n	8006bac <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d10f      	bne.n	8006b9e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b9e:	2180      	movs	r1, #128	@ 0x80
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 fd43 	bl	800862c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f001 f8d2 	bl	8007d50 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d03a      	beq.n	8006c2c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff fe30 	bl	800681c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bc4:	e032      	b.n	8006c2c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f986 	bl	8006ee2 <USBD_CoreFindEP>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2bff      	cmp	r3, #255	@ 0xff
 8006bde:	d025      	beq.n	8006c2c <USBD_LL_DataInStage+0x16c>
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d122      	bne.n	8006c2c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d11c      	bne.n	8006c2c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bf2:	7dfa      	ldrb	r2, [r7, #23]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	32ae      	adds	r2, #174	@ 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d014      	beq.n	8006c2c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006c02:	7dfa      	ldrb	r2, [r7, #23]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c0a:	7dfa      	ldrb	r2, [r7, #23]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	32ae      	adds	r2, #174	@ 0xae
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	7afa      	ldrb	r2, [r7, #11]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c22:	7dbb      	ldrb	r3, [r7, #22]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006c28:	7dbb      	ldrb	r3, [r7, #22]
 8006c2a:	e000      	b.n	8006c2e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d014      	beq.n	8006c9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6852      	ldr	r2, [r2, #4]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9c:	2340      	movs	r3, #64	@ 0x40
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fc7d 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb8:	2340      	movs	r3, #64	@ 0x40
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2180      	movs	r1, #128	@ 0x80
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fc6f 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2240      	movs	r2, #64	@ 0x40
 8006cd0:	841a      	strh	r2, [r3, #32]

  return ret;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d006      	beq.n	8006d1e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2204      	movs	r2, #4
 8006d22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d106      	bne.n	8006d56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d110      	bne.n	8006d9a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	@ 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e01c      	b.n	8006e00 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d115      	bne.n	8006dfe <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	32ae      	adds	r2, #174	@ 0xae
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32ae      	adds	r2, #174	@ 0xae
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32ae      	adds	r2, #174	@ 0xae
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e01c      	b.n	8006e64 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d115      	bne.n	8006e62 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32ae      	adds	r2, #174	@ 0xae
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32ae      	adds	r2, #174	@ 0xae
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6852      	ldr	r2, [r2, #4]
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	4611      	mov	r1, r2
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ed4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d91f      	bls.n	8006f62 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f28:	e013      	b.n	8006f52 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f2a:	f107 030a 	add.w	r3, r7, #10
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6978      	ldr	r0, [r7, #20]
 8006f32:	f000 f81b 	bl	8006f6c <USBD_GetNextDesc>
 8006f36:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	d108      	bne.n	8006f52 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	789b      	ldrb	r3, [r3, #2]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d008      	beq.n	8006f60 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	897b      	ldrh	r3, [r7, #10]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d8e5      	bhi.n	8006f2a <USBD_GetEpDesc+0x2e>
 8006f5e:	e000      	b.n	8006f62 <USBD_GetEpDesc+0x66>
          break;
 8006f60:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f62:	693b      	ldr	r3, [r7, #16]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	4413      	add	r3, r2
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	b21a      	sxth	r2, r3
 8006fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d005      	beq.n	800700a <USBD_StdDevReq+0x26>
 8006ffe:	2b40      	cmp	r3, #64	@ 0x40
 8007000:	d857      	bhi.n	80070b2 <USBD_StdDevReq+0xce>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <USBD_StdDevReq+0x42>
 8007006:	2b20      	cmp	r3, #32
 8007008:	d153      	bne.n	80070b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32ae      	adds	r2, #174	@ 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e04a      	b.n	80070bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b09      	cmp	r3, #9
 800702c:	d83b      	bhi.n	80070a6 <USBD_StdDevReq+0xc2>
 800702e:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <USBD_StdDevReq+0x50>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007089 	.word	0x08007089
 8007038:	0800709d 	.word	0x0800709d
 800703c:	080070a7 	.word	0x080070a7
 8007040:	08007093 	.word	0x08007093
 8007044:	080070a7 	.word	0x080070a7
 8007048:	08007067 	.word	0x08007067
 800704c:	0800705d 	.word	0x0800705d
 8007050:	080070a7 	.word	0x080070a7
 8007054:	0800707f 	.word	0x0800707f
 8007058:	08007071 	.word	0x08007071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa3e 	bl	80074e0 <USBD_GetDescriptor>
          break;
 8007064:	e024      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fba3 	bl	80077b4 <USBD_SetAddress>
          break;
 800706e:	e01f      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fbe2 	bl	800783c <USBD_SetConfig>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
          break;
 800707c:	e018      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc85 	bl	8007990 <USBD_GetConfig>
          break;
 8007086:	e013      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fcb6 	bl	80079fc <USBD_GetStatus>
          break;
 8007090:	e00e      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fce5 	bl	8007a64 <USBD_SetFeature>
          break;
 800709a:	e009      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fd09 	bl	8007ab6 <USBD_ClrFeature>
          break;
 80070a4:	e004      	b.n	80070b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fd60 	bl	8007b6e <USBD_CtlError>
          break;
 80070ae:	bf00      	nop
      }
      break;
 80070b0:	e004      	b.n	80070bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fd5a 	bl	8007b6e <USBD_CtlError>
      break;
 80070ba:	bf00      	nop
  }

  return ret;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070de:	2b40      	cmp	r3, #64	@ 0x40
 80070e0:	d005      	beq.n	80070ee <USBD_StdItfReq+0x26>
 80070e2:	2b40      	cmp	r3, #64	@ 0x40
 80070e4:	d852      	bhi.n	800718c <USBD_StdItfReq+0xc4>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <USBD_StdItfReq+0x26>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d14e      	bne.n	800718c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d840      	bhi.n	800717e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	889b      	ldrh	r3, [r3, #4]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b01      	cmp	r3, #1
 8007104:	d836      	bhi.n	8007174 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	889b      	ldrh	r3, [r3, #4]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff feda 	bl	8006ec8 <USBD_CoreFindIF>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2bff      	cmp	r3, #255	@ 0xff
 800711c:	d01d      	beq.n	800715a <USBD_StdItfReq+0x92>
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11a      	bne.n	800715a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007124:	7bba      	ldrb	r2, [r7, #14]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	32ae      	adds	r2, #174	@ 0xae
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00f      	beq.n	8007154 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007134:	7bba      	ldrb	r2, [r7, #14]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800713c:	7bba      	ldrb	r2, [r7, #14]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32ae      	adds	r2, #174	@ 0xae
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007152:	e004      	b.n	800715e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007158:	e001      	b.n	800715e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800715a:	2303      	movs	r3, #3
 800715c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d110      	bne.n	8007188 <USBD_StdItfReq+0xc0>
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fddc 	bl	8007d2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007172:	e009      	b.n	8007188 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fcf9 	bl	8007b6e <USBD_CtlError>
          break;
 800717c:	e004      	b.n	8007188 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fcf4 	bl	8007b6e <USBD_CtlError>
          break;
 8007186:	e000      	b.n	800718a <USBD_StdItfReq+0xc2>
          break;
 8007188:	bf00      	nop
      }
      break;
 800718a:	e004      	b.n	8007196 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fced 	bl	8007b6e <USBD_CtlError>
      break;
 8007194:	bf00      	nop
  }

  return ret;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071bc:	2b40      	cmp	r3, #64	@ 0x40
 80071be:	d007      	beq.n	80071d0 <USBD_StdEPReq+0x30>
 80071c0:	2b40      	cmp	r3, #64	@ 0x40
 80071c2:	f200 8181 	bhi.w	80074c8 <USBD_StdEPReq+0x328>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02a      	beq.n	8007220 <USBD_StdEPReq+0x80>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	f040 817c 	bne.w	80074c8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fe84 	bl	8006ee2 <USBD_CoreFindEP>
 80071da:	4603      	mov	r3, r0
 80071dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071de:	7b7b      	ldrb	r3, [r7, #13]
 80071e0:	2bff      	cmp	r3, #255	@ 0xff
 80071e2:	f000 8176 	beq.w	80074d2 <USBD_StdEPReq+0x332>
 80071e6:	7b7b      	ldrb	r3, [r7, #13]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 8172 	bne.w	80074d2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80071ee:	7b7a      	ldrb	r2, [r7, #13]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071f6:	7b7a      	ldrb	r2, [r7, #13]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	32ae      	adds	r2, #174	@ 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8165 	beq.w	80074d2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007208:	7b7a      	ldrb	r2, [r7, #13]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	32ae      	adds	r2, #174	@ 0xae
 800720e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
 800721a:	4603      	mov	r3, r0
 800721c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800721e:	e158      	b.n	80074d2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b03      	cmp	r3, #3
 8007226:	d008      	beq.n	800723a <USBD_StdEPReq+0x9a>
 8007228:	2b03      	cmp	r3, #3
 800722a:	f300 8147 	bgt.w	80074bc <USBD_StdEPReq+0x31c>
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 809b 	beq.w	800736a <USBD_StdEPReq+0x1ca>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d03c      	beq.n	80072b2 <USBD_StdEPReq+0x112>
 8007238:	e140      	b.n	80074bc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d002      	beq.n	800724c <USBD_StdEPReq+0xac>
 8007246:	2b03      	cmp	r3, #3
 8007248:	d016      	beq.n	8007278 <USBD_StdEPReq+0xd8>
 800724a:	e02c      	b.n	80072a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <USBD_StdEPReq+0xce>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b80      	cmp	r3, #128	@ 0x80
 8007256:	d00a      	beq.n	800726e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f9e5 	bl	800862c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007262:	2180      	movs	r1, #128	@ 0x80
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f9e1 	bl	800862c <USBD_LL_StallEP>
 800726a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800726c:	e020      	b.n	80072b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc7c 	bl	8007b6e <USBD_CtlError>
              break;
 8007276:	e01b      	b.n	80072b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10e      	bne.n	800729e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <USBD_StdEPReq+0xfe>
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b80      	cmp	r3, #128	@ 0x80
 800728a:	d008      	beq.n	800729e <USBD_StdEPReq+0xfe>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f9c7 	bl	800862c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd43 	bl	8007d2a <USBD_CtlSendStatus>

              break;
 80072a4:	e004      	b.n	80072b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc60 	bl	8007b6e <USBD_CtlError>
              break;
 80072ae:	bf00      	nop
          }
          break;
 80072b0:	e109      	b.n	80074c6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d002      	beq.n	80072c4 <USBD_StdEPReq+0x124>
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d016      	beq.n	80072f0 <USBD_StdEPReq+0x150>
 80072c2:	e04b      	b.n	800735c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <USBD_StdEPReq+0x146>
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d00a      	beq.n	80072e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 f9a9 	bl	800862c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072da:	2180      	movs	r1, #128	@ 0x80
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f9a5 	bl	800862c <USBD_LL_StallEP>
 80072e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072e4:	e040      	b.n	8007368 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc40 	bl	8007b6e <USBD_CtlError>
              break;
 80072ee:	e03b      	b.n	8007368 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d136      	bne.n	8007366 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f9af 	bl	800866a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fd0c 	bl	8007d2a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fde3 	bl	8006ee2 <USBD_CoreFindEP>
 800731c:	4603      	mov	r3, r0
 800731e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007320:	7b7b      	ldrb	r3, [r7, #13]
 8007322:	2bff      	cmp	r3, #255	@ 0xff
 8007324:	d01f      	beq.n	8007366 <USBD_StdEPReq+0x1c6>
 8007326:	7b7b      	ldrb	r3, [r7, #13]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d11c      	bne.n	8007366 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800732c:	7b7a      	ldrb	r2, [r7, #13]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007334:	7b7a      	ldrb	r2, [r7, #13]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32ae      	adds	r2, #174	@ 0xae
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d010      	beq.n	8007366 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32ae      	adds	r2, #174	@ 0xae
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800735a:	e004      	b.n	8007366 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fc05 	bl	8007b6e <USBD_CtlError>
              break;
 8007364:	e000      	b.n	8007368 <USBD_StdEPReq+0x1c8>
              break;
 8007366:	bf00      	nop
          }
          break;
 8007368:	e0ad      	b.n	80074c6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d002      	beq.n	800737c <USBD_StdEPReq+0x1dc>
 8007376:	2b03      	cmp	r3, #3
 8007378:	d033      	beq.n	80073e2 <USBD_StdEPReq+0x242>
 800737a:	e099      	b.n	80074b0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <USBD_StdEPReq+0x1f2>
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b80      	cmp	r3, #128	@ 0x80
 8007386:	d004      	beq.n	8007392 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fbef 	bl	8007b6e <USBD_CtlError>
                break;
 8007390:	e093      	b.n	80074ba <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da0b      	bge.n	80073b2 <USBD_StdEPReq+0x212>
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	3310      	adds	r3, #16
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	3304      	adds	r3, #4
 80073b0:	e00b      	b.n	80073ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4413      	add	r3, r2
 80073c8:	3304      	adds	r3, #4
 80073ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	330e      	adds	r3, #14
 80073d6:	2202      	movs	r2, #2
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc44 	bl	8007c68 <USBD_CtlSendData>
              break;
 80073e0:	e06b      	b.n	80074ba <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da11      	bge.n	800740e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3323      	adds	r3, #35	@ 0x23
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d117      	bne.n	8007434 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fbb1 	bl	8007b6e <USBD_CtlError>
                  break;
 800740c:	e055      	b.n	80074ba <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fb9e 	bl	8007b6e <USBD_CtlError>
                  break;
 8007432:	e042      	b.n	80074ba <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	da0b      	bge.n	8007454 <USBD_StdEPReq+0x2b4>
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	3310      	adds	r3, #16
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4413      	add	r3, r2
 8007450:	3304      	adds	r3, #4
 8007452:	e00b      	b.n	800746c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	3304      	adds	r3, #4
 800746c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <USBD_StdEPReq+0x2da>
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b80      	cmp	r3, #128	@ 0x80
 8007478:	d103      	bne.n	8007482 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2200      	movs	r2, #0
 800747e:	739a      	strb	r2, [r3, #14]
 8007480:	e00e      	b.n	80074a0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f90e 	bl	80086a8 <USBD_LL_IsStallEP>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2201      	movs	r2, #1
 8007496:	739a      	strb	r2, [r3, #14]
 8007498:	e002      	b.n	80074a0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	330e      	adds	r3, #14
 80074a4:	2202      	movs	r2, #2
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fbdd 	bl	8007c68 <USBD_CtlSendData>
              break;
 80074ae:	e004      	b.n	80074ba <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb5b 	bl	8007b6e <USBD_CtlError>
              break;
 80074b8:	bf00      	nop
          }
          break;
 80074ba:	e004      	b.n	80074c6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb55 	bl	8007b6e <USBD_CtlError>
          break;
 80074c4:	bf00      	nop
      }
      break;
 80074c6:	e005      	b.n	80074d4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb4f 	bl	8007b6e <USBD_CtlError>
      break;
 80074d0:	e000      	b.n	80074d4 <USBD_StdEPReq+0x334>
      break;
 80074d2:	bf00      	nop
  }

  return ret;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	2b06      	cmp	r3, #6
 8007502:	f200 8128 	bhi.w	8007756 <USBD_GetDescriptor+0x276>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBD_GetDescriptor+0x2c>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007529 	.word	0x08007529
 8007510:	08007541 	.word	0x08007541
 8007514:	08007581 	.word	0x08007581
 8007518:	08007757 	.word	0x08007757
 800751c:	08007757 	.word	0x08007757
 8007520:	080076f7 	.word	0x080076f7
 8007524:	08007723 	.word	0x08007723
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
      break;
 800753e:	e112      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7c1b      	ldrb	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	f107 0208 	add.w	r2, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	2202      	movs	r2, #2
 8007560:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007562:	e100      	b.n	8007766 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	f107 0208 	add.w	r2, r7, #8
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	2202      	movs	r2, #2
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e0f2      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	885b      	ldrh	r3, [r3, #2]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b05      	cmp	r3, #5
 8007588:	f200 80ac 	bhi.w	80076e4 <USBD_GetDescriptor+0x204>
 800758c:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <USBD_GetDescriptor+0xb4>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075e1 	.word	0x080075e1
 800759c:	08007615 	.word	0x08007615
 80075a0:	08007649 	.word	0x08007649
 80075a4:	0800767d 	.word	0x0800767d
 80075a8:	080076b1 	.word	0x080076b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e091      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 facb 	bl	8007b6e <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e089      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e077      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fab1 	bl	8007b6e <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e06f      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e05d      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa97 	bl	8007b6e <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e055      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e043      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa7d 	bl	8007b6e <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e03b      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e029      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa63 	bl	8007b6e <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e021      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e00f      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa49 	bl	8007b6e <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e007      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa41 	bl	8007b6e <USBD_CtlError>
          err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076f2:	bf00      	nop
      }
      break;
 80076f4:	e037      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	f107 0208 	add.w	r2, r7, #8
 800770a:	4610      	mov	r0, r2
 800770c:	4798      	blx	r3
 800770e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007710:	e029      	b.n	8007766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa2a 	bl	8007b6e <USBD_CtlError>
        err++;
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	3301      	adds	r3, #1
 800771e:	72fb      	strb	r3, [r7, #11]
      break;
 8007720:	e021      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7c1b      	ldrb	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	4610      	mov	r0, r2
 8007738:	4798      	blx	r3
 800773a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	2207      	movs	r2, #7
 8007742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007744:	e00f      	b.n	8007766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa10 	bl	8007b6e <USBD_CtlError>
        err++;
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	3301      	adds	r3, #1
 8007752:	72fb      	strb	r3, [r7, #11]
      break;
 8007754:	e007      	b.n	8007766 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa08 	bl	8007b6e <USBD_CtlError>
      err++;
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	3301      	adds	r3, #1
 8007762:	72fb      	strb	r3, [r7, #11]
      break;
 8007764:	bf00      	nop
  }

  if (err != 0U)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d11e      	bne.n	80077aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d016      	beq.n	80077a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007774:	893b      	ldrh	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00e      	beq.n	8007798 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88da      	ldrh	r2, [r3, #6]
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	4293      	cmp	r3, r2
 8007782:	bf28      	it	cs
 8007784:	4613      	movcs	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	461a      	mov	r2, r3
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fa69 	bl	8007c68 <USBD_CtlSendData>
 8007796:	e009      	b.n	80077ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9e7 	bl	8007b6e <USBD_CtlError>
 80077a0:	e004      	b.n	80077ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fac1 	bl	8007d2a <USBD_CtlSendStatus>
 80077a8:	e000      	b.n	80077ac <USBD_GetDescriptor+0x2cc>
    return;
 80077aa:	bf00      	nop
  }
}
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d131      	bne.n	800782a <USBD_SetAddress+0x76>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	88db      	ldrh	r3, [r3, #6]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d12d      	bne.n	800782a <USBD_SetAddress+0x76>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d4:	d829      	bhi.n	800782a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	885b      	ldrh	r3, [r3, #2]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d104      	bne.n	80077f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9bc 	bl	8007b6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	e01d      	b.n	8007834 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 ff7b 	bl	8008700 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa8d 	bl	8007d2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781e:	e009      	b.n	8007834 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007828:	e004      	b.n	8007834 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f99e 	bl	8007b6e <USBD_CtlError>
  }
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	885b      	ldrh	r3, [r3, #2]
 800784e:	b2da      	uxtb	r2, r3
 8007850:	4b4e      	ldr	r3, [pc, #312]	@ (800798c <USBD_SetConfig+0x150>)
 8007852:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007854:	4b4d      	ldr	r3, [pc, #308]	@ (800798c <USBD_SetConfig+0x150>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d905      	bls.n	8007868 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f985 	bl	8007b6e <USBD_CtlError>
    return USBD_FAIL;
 8007864:	2303      	movs	r3, #3
 8007866:	e08c      	b.n	8007982 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d002      	beq.n	800787a <USBD_SetConfig+0x3e>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d029      	beq.n	80078cc <USBD_SetConfig+0x90>
 8007878:	e075      	b.n	8007966 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800787a:	4b44      	ldr	r3, [pc, #272]	@ (800798c <USBD_SetConfig+0x150>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d020      	beq.n	80078c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007882:	4b42      	ldr	r3, [pc, #264]	@ (800798c <USBD_SetConfig+0x150>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800788c:	4b3f      	ldr	r3, [pc, #252]	@ (800798c <USBD_SetConfig+0x150>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fe ffcd 	bl	8006832 <USBD_SetClassConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f962 	bl	8007b6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b2:	e065      	b.n	8007980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa38 	bl	8007d2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2203      	movs	r2, #3
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078c2:	e05d      	b.n	8007980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa30 	bl	8007d2a <USBD_CtlSendStatus>
      break;
 80078ca:	e059      	b.n	8007980 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078cc:	4b2f      	ldr	r3, [pc, #188]	@ (800798c <USBD_SetConfig+0x150>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d112      	bne.n	80078fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80078dc:	4b2b      	ldr	r3, [pc, #172]	@ (800798c <USBD_SetConfig+0x150>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078e6:	4b29      	ldr	r3, [pc, #164]	@ (800798c <USBD_SetConfig+0x150>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fe ffbc 	bl	800686a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa19 	bl	8007d2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078f8:	e042      	b.n	8007980 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078fa:	4b24      	ldr	r3, [pc, #144]	@ (800798c <USBD_SetConfig+0x150>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	d02a      	beq.n	800795e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fe ffaa 	bl	800686a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007916:	4b1d      	ldr	r3, [pc, #116]	@ (800798c <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007920:	4b1a      	ldr	r3, [pc, #104]	@ (800798c <USBD_SetConfig+0x150>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fe ff83 	bl	8006832 <USBD_SetClassConfig>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00f      	beq.n	8007956 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f918 	bl	8007b6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fe ff8f 	bl	800686a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007954:	e014      	b.n	8007980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9e7 	bl	8007d2a <USBD_CtlSendStatus>
      break;
 800795c:	e010      	b.n	8007980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9e3 	bl	8007d2a <USBD_CtlSendStatus>
      break;
 8007964:	e00c      	b.n	8007980 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f900 	bl	8007b6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800796e:	4b07      	ldr	r3, [pc, #28]	@ (800798c <USBD_SetConfig+0x150>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7fe ff78 	bl	800686a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	73fb      	strb	r3, [r7, #15]
      break;
 800797e:	bf00      	nop
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000380 	.word	0x20000380

08007990 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d004      	beq.n	80079ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8e2 	bl	8007b6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079aa:	e023      	b.n	80079f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	dc02      	bgt.n	80079be <USBD_GetConfig+0x2e>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc03      	bgt.n	80079c4 <USBD_GetConfig+0x34>
 80079bc:	e015      	b.n	80079ea <USBD_GetConfig+0x5a>
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d00b      	beq.n	80079da <USBD_GetConfig+0x4a>
 80079c2:	e012      	b.n	80079ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3308      	adds	r3, #8
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f948 	bl	8007c68 <USBD_CtlSendData>
        break;
 80079d8:	e00c      	b.n	80079f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	2201      	movs	r2, #1
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f940 	bl	8007c68 <USBD_CtlSendData>
        break;
 80079e8:	e004      	b.n	80079f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f8be 	bl	8007b6e <USBD_CtlError>
        break;
 80079f2:	bf00      	nop
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d81e      	bhi.n	8007a52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	88db      	ldrh	r3, [r3, #6]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d004      	beq.n	8007a26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8a5 	bl	8007b6e <USBD_CtlError>
        break;
 8007a24:	e01a      	b.n	8007a5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f043 0202 	orr.w	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	330c      	adds	r3, #12
 8007a46:	2202      	movs	r2, #2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f90c 	bl	8007c68 <USBD_CtlSendData>
      break;
 8007a50:	e004      	b.n	8007a5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f88a 	bl	8007b6e <USBD_CtlError>
      break;
 8007a5a:	bf00      	nop
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f953 	bl	8007d2a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a84:	e013      	b.n	8007aae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d10b      	bne.n	8007aa6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	889b      	ldrh	r3, [r3, #4]
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f943 	bl	8007d2a <USBD_CtlSendStatus>
}
 8007aa4:	e003      	b.n	8007aae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f860 	bl	8007b6e <USBD_CtlError>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d80b      	bhi.n	8007ae6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	885b      	ldrh	r3, [r3, #2]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10c      	bne.n	8007af0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f923 	bl	8007d2a <USBD_CtlSendStatus>
      }
      break;
 8007ae4:	e004      	b.n	8007af0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f840 	bl	8007b6e <USBD_CtlError>
      break;
 8007aee:	e000      	b.n	8007af2 <USBD_ClrFeature+0x3c>
      break;
 8007af0:	bf00      	nop
  }
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fa3d 	bl	8006fa4 <SWAPBYTE>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7ff fa30 	bl	8006fa4 <SWAPBYTE>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff fa23 	bl	8006fa4 <SWAPBYTE>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	80da      	strh	r2, [r3, #6]
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b78:	2180      	movs	r1, #128	@ 0x80
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fd56 	bl	800862c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd52 	bl	800862c <USBD_LL_StallEP>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d042      	beq.n	8007c2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007baa:	6938      	ldr	r0, [r7, #16]
 8007bac:	f000 f842 	bl	8007c34 <USBD_GetLen>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bba:	d808      	bhi.n	8007bce <USBD_GetString+0x3e>
 8007bbc:	6938      	ldr	r0, [r7, #16]
 8007bbe:	f000 f839 	bl	8007c34 <USBD_GetLen>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	e001      	b.n	8007bd2 <USBD_GetString+0x42>
 8007bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	4413      	add	r3, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	3301      	adds	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4413      	add	r3, r2
 8007bee:	2203      	movs	r2, #3
 8007bf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bf8:	e013      	b.n	8007c22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	4413      	add	r3, r2
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	7812      	ldrb	r2, [r2, #0]
 8007c04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	613b      	str	r3, [r7, #16]
    idx++;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4413      	add	r3, r2
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e7      	bne.n	8007bfa <USBD_GetString+0x6a>
 8007c2a:	e000      	b.n	8007c2e <USBD_GetString+0x9e>
    return;
 8007c2c:	bf00      	nop
  }
}
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c44:	e005      	b.n	8007c52 <USBD_GetLen+0x1e>
  {
    len++;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f5      	bne.n	8007c46 <USBD_GetLen+0x12>
  }

  return len;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	2100      	movs	r1, #0
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fd52 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fd41 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fd41 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fd30 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2100      	movs	r1, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fcfc 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2205      	movs	r2, #5
 8007d5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fd0a 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4912      	ldr	r1, [pc, #72]	@ (8007dc8 <MX_USB_DEVICE_Init+0x50>)
 8007d80:	4812      	ldr	r0, [pc, #72]	@ (8007dcc <MX_USB_DEVICE_Init+0x54>)
 8007d82:	f7fe fcd9 	bl	8006738 <USBD_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d8c:	f7f8 fe50 	bl	8000a30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d90:	490f      	ldr	r1, [pc, #60]	@ (8007dd0 <MX_USB_DEVICE_Init+0x58>)
 8007d92:	480e      	ldr	r0, [pc, #56]	@ (8007dcc <MX_USB_DEVICE_Init+0x54>)
 8007d94:	f7fe fd00 	bl	8006798 <USBD_RegisterClass>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d9e:	f7f8 fe47 	bl	8000a30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007da2:	490c      	ldr	r1, [pc, #48]	@ (8007dd4 <MX_USB_DEVICE_Init+0x5c>)
 8007da4:	4809      	ldr	r0, [pc, #36]	@ (8007dcc <MX_USB_DEVICE_Init+0x54>)
 8007da6:	f7fe fbf7 	bl	8006598 <USBD_CDC_RegisterInterface>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007db0:	f7f8 fe3e 	bl	8000a30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007db4:	4805      	ldr	r0, [pc, #20]	@ (8007dcc <MX_USB_DEVICE_Init+0x54>)
 8007db6:	f7fe fd25 	bl	8006804 <USBD_Start>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dc0:	f7f8 fe36 	bl	8000a30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dc4:	bf00      	nop
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200000b8 	.word	0x200000b8
 8007dcc:	20000384 	.word	0x20000384
 8007dd0:	2000001c 	.word	0x2000001c
 8007dd4:	200000a4 	.word	0x200000a4

08007dd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4905      	ldr	r1, [pc, #20]	@ (8007df4 <CDC_Init_FS+0x1c>)
 8007de0:	4805      	ldr	r0, [pc, #20]	@ (8007df8 <CDC_Init_FS+0x20>)
 8007de2:	f7fe fbf3 	bl	80065cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007de6:	4905      	ldr	r1, [pc, #20]	@ (8007dfc <CDC_Init_FS+0x24>)
 8007de8:	4803      	ldr	r0, [pc, #12]	@ (8007df8 <CDC_Init_FS+0x20>)
 8007dea:	f7fe fc11 	bl	8006610 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000860 	.word	0x20000860
 8007df8:	20000384 	.word	0x20000384
 8007dfc:	20000660 	.word	0x20000660

08007e00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	6039      	str	r1, [r7, #0]
 8007e1a:	71fb      	strb	r3, [r7, #7]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b23      	cmp	r3, #35	@ 0x23
 8007e24:	f200 8098 	bhi.w	8007f58 <CDC_Control_FS+0x148>
 8007e28:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <CDC_Control_FS+0x20>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007f59 	.word	0x08007f59
 8007e34:	08007f59 	.word	0x08007f59
 8007e38:	08007f59 	.word	0x08007f59
 8007e3c:	08007f59 	.word	0x08007f59
 8007e40:	08007f59 	.word	0x08007f59
 8007e44:	08007f59 	.word	0x08007f59
 8007e48:	08007f59 	.word	0x08007f59
 8007e4c:	08007f59 	.word	0x08007f59
 8007e50:	08007f59 	.word	0x08007f59
 8007e54:	08007f59 	.word	0x08007f59
 8007e58:	08007f59 	.word	0x08007f59
 8007e5c:	08007f59 	.word	0x08007f59
 8007e60:	08007f59 	.word	0x08007f59
 8007e64:	08007f59 	.word	0x08007f59
 8007e68:	08007f59 	.word	0x08007f59
 8007e6c:	08007f59 	.word	0x08007f59
 8007e70:	08007f59 	.word	0x08007f59
 8007e74:	08007f59 	.word	0x08007f59
 8007e78:	08007f59 	.word	0x08007f59
 8007e7c:	08007f59 	.word	0x08007f59
 8007e80:	08007f59 	.word	0x08007f59
 8007e84:	08007f59 	.word	0x08007f59
 8007e88:	08007f59 	.word	0x08007f59
 8007e8c:	08007f59 	.word	0x08007f59
 8007e90:	08007f59 	.word	0x08007f59
 8007e94:	08007f59 	.word	0x08007f59
 8007e98:	08007f59 	.word	0x08007f59
 8007e9c:	08007f59 	.word	0x08007f59
 8007ea0:	08007f59 	.word	0x08007f59
 8007ea4:	08007f59 	.word	0x08007f59
 8007ea8:	08007f59 	.word	0x08007f59
 8007eac:	08007f59 	.word	0x08007f59
 8007eb0:	08007ec1 	.word	0x08007ec1
 8007eb4:	08007f05 	.word	0x08007f05
 8007eb8:	08007f59 	.word	0x08007f59
 8007ebc:	08007f59 	.word	0x08007f59
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8 ) | (pbuf[2] << 16) | pbuf[3] << 24);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	3303      	adds	r3, #3
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	061b      	lsls	r3, r3, #24
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4b20      	ldr	r3, [pc, #128]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007ee8:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	791a      	ldrb	r2, [r3, #4]
 8007eee:	4b1e      	ldr	r3, [pc, #120]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007ef0:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	795a      	ldrb	r2, [r3, #5]
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007ef8:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	799a      	ldrb	r2, [r3, #6]
 8007efe:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f00:	719a      	strb	r2, [r3, #6]

    break;
 8007f02:	e02a      	b.n	8007f5a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007f04:	4b18      	ldr	r3, [pc, #96]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8007f0e:	4b16      	ldr	r3, [pc, #88]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	0a1a      	lsrs	r2, r3, #8
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8007f1c:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	0c1a      	lsrs	r2, r3, #16
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	3302      	adds	r3, #2
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	0e1a      	lsrs	r2, r3, #24
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3303      	adds	r3, #3
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f3e:	7912      	ldrb	r2, [r2, #4]
 8007f40:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	3305      	adds	r3, #5
 8007f46:	4a08      	ldr	r2, [pc, #32]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f48:	7952      	ldrb	r2, [r2, #5]
 8007f4a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	3306      	adds	r3, #6
 8007f50:	4a05      	ldr	r2, [pc, #20]	@ (8007f68 <CDC_Control_FS+0x158>)
 8007f52:	7992      	ldrb	r2, [r2, #6]
 8007f54:	701a      	strb	r2, [r3, #0]
    break;
 8007f56:	e000      	b.n	8007f5a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f58:	bf00      	nop
  }

  return (USBD_OK);
 8007f5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	2000009c 	.word	0x2000009c

08007f6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(MyPtrRx != NULL)
 8007f76:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <CDC_Receive_FS+0x38>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <CDC_Receive_FS+0x1e>
	  MyPtrRx(Buf,Len);
 8007f7e:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <CDC_Receive_FS+0x38>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4611      	mov	r1, r2
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4806      	ldr	r0, [pc, #24]	@ (8007fa8 <CDC_Receive_FS+0x3c>)
 8007f8e:	f7fe fb3f 	bl	8006610 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f92:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <CDC_Receive_FS+0x3c>)
 8007f94:	f7fe fb9a 	bl	80066cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000a60 	.word	0x20000a60
 8007fa8:	20000384 	.word	0x20000384

08007fac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e00b      	b.n	8007fea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fd2:	887b      	ldrh	r3, [r7, #2]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4806      	ldr	r0, [pc, #24]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fda:	f7fe faf7 	bl	80065cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fde:	4805      	ldr	r0, [pc, #20]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fe0:	f7fe fb34 	bl	800664c <USBD_CDC_TransmitPacket>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000384 	.word	0x20000384

08007ff8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800800a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008024:	4a04      	ldr	r2, [pc, #16]	@ (8008038 <CDC_Attach_Rx+0x1c>)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6013      	str	r3, [r2, #0]
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000a60 	.word	0x20000a60

0800803c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2212      	movs	r2, #18
 800804c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	@ (800805c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	200000d4 	.word	0x200000d4

08008060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2204      	movs	r2, #4
 8008070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008072:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	200000e8 	.word	0x200000e8

08008084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4907      	ldr	r1, [pc, #28]	@ (80080b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800809a:	4808      	ldr	r0, [pc, #32]	@ (80080bc <USBD_FS_ProductStrDescriptor+0x38>)
 800809c:	f7ff fd78 	bl	8007b90 <USBD_GetString>
 80080a0:	e004      	b.n	80080ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	4904      	ldr	r1, [pc, #16]	@ (80080b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080a6:	4805      	ldr	r0, [pc, #20]	@ (80080bc <USBD_FS_ProductStrDescriptor+0x38>)
 80080a8:	f7ff fd72 	bl	8007b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080ac:	4b02      	ldr	r3, [pc, #8]	@ (80080b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000a64 	.word	0x20000a64
 80080bc:	080088e0 	.word	0x080088e0

080080c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	4904      	ldr	r1, [pc, #16]	@ (80080e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080d0:	4804      	ldr	r0, [pc, #16]	@ (80080e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080d2:	f7ff fd5d 	bl	8007b90 <USBD_GetString>
  return USBD_StrDesc;
 80080d6:	4b02      	ldr	r3, [pc, #8]	@ (80080e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000a64 	.word	0x20000a64
 80080e4:	080088f8 	.word	0x080088f8

080080e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	221a      	movs	r2, #26
 80080f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080fa:	f000 f843 	bl	8008184 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080fe:	4b02      	ldr	r3, [pc, #8]	@ (8008108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	200000ec 	.word	0x200000ec

0800810c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d105      	bne.n	800812a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4907      	ldr	r1, [pc, #28]	@ (8008140 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008122:	4808      	ldr	r0, [pc, #32]	@ (8008144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008124:	f7ff fd34 	bl	8007b90 <USBD_GetString>
 8008128:	e004      	b.n	8008134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4904      	ldr	r1, [pc, #16]	@ (8008140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800812e:	4805      	ldr	r0, [pc, #20]	@ (8008144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008130:	f7ff fd2e 	bl	8007b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000a64 	.word	0x20000a64
 8008144:	0800890c 	.word	0x0800890c

08008148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4907      	ldr	r1, [pc, #28]	@ (800817c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800815e:	4808      	ldr	r0, [pc, #32]	@ (8008180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008160:	f7ff fd16 	bl	8007b90 <USBD_GetString>
 8008164:	e004      	b.n	8008170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4904      	ldr	r1, [pc, #16]	@ (800817c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800816a:	4805      	ldr	r0, [pc, #20]	@ (8008180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800816c:	f7ff fd10 	bl	8007b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008170:	4b02      	ldr	r3, [pc, #8]	@ (800817c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000a64 	.word	0x20000a64
 8008180:	08008918 	.word	0x08008918

08008184 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800818a:	4b0f      	ldr	r3, [pc, #60]	@ (80081c8 <Get_SerialNum+0x44>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008190:	4b0e      	ldr	r3, [pc, #56]	@ (80081cc <Get_SerialNum+0x48>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008196:	4b0e      	ldr	r3, [pc, #56]	@ (80081d0 <Get_SerialNum+0x4c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d009      	beq.n	80081be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081aa:	2208      	movs	r2, #8
 80081ac:	4909      	ldr	r1, [pc, #36]	@ (80081d4 <Get_SerialNum+0x50>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f814 	bl	80081dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081b4:	2204      	movs	r2, #4
 80081b6:	4908      	ldr	r1, [pc, #32]	@ (80081d8 <Get_SerialNum+0x54>)
 80081b8:	68b8      	ldr	r0, [r7, #8]
 80081ba:	f000 f80f 	bl	80081dc <IntToUnicode>
  }
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	1fff7a10 	.word	0x1fff7a10
 80081cc:	1fff7a14 	.word	0x1fff7a14
 80081d0:	1fff7a18 	.word	0x1fff7a18
 80081d4:	200000ee 	.word	0x200000ee
 80081d8:	200000fe 	.word	0x200000fe

080081dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
 80081f2:	e027      	b.n	8008244 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	0f1b      	lsrs	r3, r3, #28
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d80b      	bhi.n	8008214 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	0f1b      	lsrs	r3, r3, #28
 8008200:	b2da      	uxtb	r2, r3
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	4619      	mov	r1, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	440b      	add	r3, r1
 800820c:	3230      	adds	r2, #48	@ 0x30
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	e00a      	b.n	800822a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0f1b      	lsrs	r3, r3, #28
 8008218:	b2da      	uxtb	r2, r3
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	4619      	mov	r1, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	440b      	add	r3, r1
 8008224:	3237      	adds	r2, #55	@ 0x37
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	3301      	adds	r3, #1
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4413      	add	r3, r2
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	3301      	adds	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
 8008244:	7dfa      	ldrb	r2, [r7, #23]
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3d3      	bcc.n	80081f4 <IntToUnicode+0x18>
  }
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	@ 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008264:	f107 0314 	add.w	r3, r7, #20
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	609a      	str	r2, [r3, #8]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800827c:	d13a      	bne.n	80082f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	4b1e      	ldr	r3, [pc, #120]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008286:	4a1d      	ldr	r2, [pc, #116]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 8008288:	f043 0301 	orr.w	r3, r3, #1
 800828c:	6313      	str	r3, [r2, #48]	@ 0x30
 800828e:	4b1b      	ldr	r3, [pc, #108]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800829a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800829e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a0:	2302      	movs	r3, #2
 80082a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a8:	2303      	movs	r3, #3
 80082aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082ac:	230a      	movs	r3, #10
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	4619      	mov	r1, r3
 80082b6:	4812      	ldr	r0, [pc, #72]	@ (8008300 <HAL_PCD_MspInit+0xa4>)
 80082b8:	f7f9 ff82 	bl	80021c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082bc:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 80082be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c0:	4a0e      	ldr	r2, [pc, #56]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 80082ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d0:	4a0a      	ldr	r2, [pc, #40]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 80082d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80082d8:	4b08      	ldr	r3, [pc, #32]	@ (80082fc <HAL_PCD_MspInit+0xa0>)
 80082da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082e4:	2200      	movs	r2, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	2043      	movs	r0, #67	@ 0x43
 80082ea:	f7f9 fbc2 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082ee:	2043      	movs	r0, #67	@ 0x43
 80082f0:	f7f9 fbdb 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082f4:	bf00      	nop
 80082f6:	3728      	adds	r7, #40	@ 0x28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40023800 	.word	0x40023800
 8008300:	40020000 	.word	0x40020000

08008304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7fe fabf 	bl	800689e <USBD_LL_SetupStage>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	4619      	mov	r1, r3
 8008352:	f7fe faf9 	bl	8006948 <USBD_LL_DataOutStage>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	3320      	adds	r3, #32
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	4619      	mov	r1, r3
 8008386:	f7fe fb9b 	bl	8006ac0 <USBD_LL_DataInStage>
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fcdf 	bl	8006d64 <USBD_LL_SOF>
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	79db      	ldrb	r3, [r3, #7]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d001      	beq.n	80083c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083c2:	f7f8 fb35 	bl	8000a30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083cc:	7bfa      	ldrb	r2, [r7, #15]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fc83 	bl	8006cdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fc2a 	bl	8006c36 <USBD_LL_Reset>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fc7e 	bl	8006cfc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7adb      	ldrb	r3, [r3, #11]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <HAL_PCD_SuspendCallback+0x48>)
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	4a03      	ldr	r2, [pc, #12]	@ (8008434 <HAL_PCD_SuspendCallback+0x48>)
 8008426:	f043 0306 	orr.w	r3, r3, #6
 800842a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fc74 	bl	8006d34 <USBD_LL_Resume>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fccc 	bl	8006e08 <USBD_LL_IsoOUTIncomplete>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fc88 	bl	8006da4 <USBD_LL_IsoINIncomplete>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fcde 	bl	8006e6c <USBD_LL_DevConnected>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fcdb 	bl	8006e82 <USBD_LL_DevDisconnected>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d13c      	bne.n	800855e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084e4:	4a20      	ldr	r2, [pc, #128]	@ (8008568 <USBD_LL_Init+0x94>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008568 <USBD_LL_Init+0x94>)
 80084f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008568 <USBD_LL_Init+0x94>)
 80084f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008568 <USBD_LL_Init+0x94>)
 80084fe:	2204      	movs	r2, #4
 8008500:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008502:	4b19      	ldr	r3, [pc, #100]	@ (8008568 <USBD_LL_Init+0x94>)
 8008504:	2202      	movs	r2, #2
 8008506:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008508:	4b17      	ldr	r3, [pc, #92]	@ (8008568 <USBD_LL_Init+0x94>)
 800850a:	2200      	movs	r2, #0
 800850c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800850e:	4b16      	ldr	r3, [pc, #88]	@ (8008568 <USBD_LL_Init+0x94>)
 8008510:	2202      	movs	r2, #2
 8008512:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008514:	4b14      	ldr	r3, [pc, #80]	@ (8008568 <USBD_LL_Init+0x94>)
 8008516:	2200      	movs	r2, #0
 8008518:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <USBD_LL_Init+0x94>)
 800851c:	2200      	movs	r2, #0
 800851e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008520:	4b11      	ldr	r3, [pc, #68]	@ (8008568 <USBD_LL_Init+0x94>)
 8008522:	2200      	movs	r2, #0
 8008524:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <USBD_LL_Init+0x94>)
 8008528:	2200      	movs	r2, #0
 800852a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800852c:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <USBD_LL_Init+0x94>)
 800852e:	2200      	movs	r2, #0
 8008530:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008532:	480d      	ldr	r0, [pc, #52]	@ (8008568 <USBD_LL_Init+0x94>)
 8008534:	f7f9 fffb 	bl	800252e <HAL_PCD_Init>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800853e:	f7f8 fa77 	bl	8000a30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008542:	2180      	movs	r1, #128	@ 0x80
 8008544:	4808      	ldr	r0, [pc, #32]	@ (8008568 <USBD_LL_Init+0x94>)
 8008546:	f7fb fa28 	bl	800399a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800854a:	2240      	movs	r2, #64	@ 0x40
 800854c:	2100      	movs	r1, #0
 800854e:	4806      	ldr	r0, [pc, #24]	@ (8008568 <USBD_LL_Init+0x94>)
 8008550:	f7fb f9dc 	bl	800390c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008554:	2280      	movs	r2, #128	@ 0x80
 8008556:	2101      	movs	r1, #1
 8008558:	4803      	ldr	r0, [pc, #12]	@ (8008568 <USBD_LL_Init+0x94>)
 800855a:	f7fb f9d7 	bl	800390c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20000c64 	.word	0x20000c64

0800856c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa f8e2 	bl	800274c <HAL_PCD_Start>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f942 	bl	8008818 <USBD_Get_USB_Status>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008598:	7bbb      	ldrb	r3, [r7, #14]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	4608      	mov	r0, r1
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	70fb      	strb	r3, [r7, #3]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70bb      	strb	r3, [r7, #2]
 80085b8:	4613      	mov	r3, r2
 80085ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ca:	78bb      	ldrb	r3, [r7, #2]
 80085cc:	883a      	ldrh	r2, [r7, #0]
 80085ce:	78f9      	ldrb	r1, [r7, #3]
 80085d0:	f7fa fdb6 	bl	8003140 <HAL_PCD_EP_Open>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f91c 	bl	8008818 <USBD_Get_USB_Status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7fa fe01 	bl	8003214 <HAL_PCD_EP_Close>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f8fd 	bl	8008818 <USBD_Get_USB_Status>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008622:	7bbb      	ldrb	r3, [r7, #14]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7fa feb9 	bl	80033c2 <HAL_PCD_EP_SetStall>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f8de 	bl	8008818 <USBD_Get_USB_Status>
 800865c:	4603      	mov	r3, r0
 800865e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008660:	7bbb      	ldrb	r3, [r7, #14]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa fefd 	bl	8003488 <HAL_PCD_EP_ClrStall>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f8bf 	bl	8008818 <USBD_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869e:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da0b      	bge.n	80086dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3316      	adds	r3, #22
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	e00b      	b.n	80086f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	4613      	mov	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80086f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fcea 	bl	80030f8 <HAL_PCD_SetAddress>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f874 	bl	8008818 <USBD_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	460b      	mov	r3, r1
 800874c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800875c:	7af9      	ldrb	r1, [r7, #11]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f7fa fdf4 	bl	800334e <HAL_PCD_EP_Transmit>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f853 	bl	8008818 <USBD_Get_USB_Status>
 8008772:	4603      	mov	r3, r0
 8008774:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008776:	7dbb      	ldrb	r3, [r7, #22]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	460b      	mov	r3, r1
 800878e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800879e:	7af9      	ldrb	r1, [r7, #11]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	f7fa fd80 	bl	80032a8 <HAL_PCD_EP_Receive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f832 	bl	8008818 <USBD_Get_USB_Status>
 80087b4:	4603      	mov	r3, r0
 80087b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fa fda0 	bl	800331e <HAL_PCD_EP_GetRxCount>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087f0:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <USBD_static_malloc+0x18>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20001148 	.word	0x20001148

08008804 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d817      	bhi.n	800885c <USBD_Get_USB_Status+0x44>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBD_Get_USB_Status+0x1c>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008845 	.word	0x08008845
 8008838:	0800884b 	.word	0x0800884b
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	e00b      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800884a:	2303      	movs	r3, #3
 800884c:	73fb      	strb	r3, [r7, #15]
    break;
 800884e:	e008      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e005      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008856:	2303      	movs	r3, #3
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e002      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	bf00      	nop
  }
  return usb_status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <memset>:
 8008870:	4402      	add	r2, r0
 8008872:	4603      	mov	r3, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4d0d      	ldr	r5, [pc, #52]	@ (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	@ (80088bc <__libc_init_array+0x3c>)
 8008886:	1b64      	subs	r4, r4, r5
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2600      	movs	r6, #0
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4d0b      	ldr	r5, [pc, #44]	@ (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	@ (80088c4 <__libc_init_array+0x44>)
 8008894:	f000 f818 	bl	80088c8 <_init>
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2600      	movs	r6, #0
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08008948 	.word	0x08008948
 80088bc:	08008948 	.word	0x08008948
 80088c0:	08008948 	.word	0x08008948
 80088c4:	0800894c 	.word	0x0800894c

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
